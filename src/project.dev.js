require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"Adapter":[function(require,module,exports){
"use strict";
cc._RF.push(module, '8a4f1zI+NlDAZr+FqnNWyUr', 'Adapter');
// scripts/lobby/Adapter.ts

Object.defineProperty(exports, "__esModule", { value: true });
var Adapter = (function () {
    function Adapter() {
    }
    Adapter.adapter = function (canvas) {
        canvas.fitHeight = false;
        canvas.fitWidth = false;
        //设置强制横屏
        cc.view.setOrientation(cc.macro.ORIENTATION_LANDSCAPE);
        //IOS设备开启Retina
        cc.view.enableRetina(cc.sys.os === cc.sys.OS_IOS ? true : false);
        cc.view.adjustViewPort(true);
        //适配策略
        //1.如果是手机浏览器 铺满全屏
        //2.如果是原生手机 自动适配（设计分辨率宽高比大于屏幕分辨率时，会自动适配高度（上面第一张图）；设计分辨率宽高比小于屏幕分辨率时，会自动适配宽度）
        //3.如果是桌面浏览器 完整显示（设计分辨率宽高比大于屏幕分辨率时，会自动适配高度（上面第一张图）；设计分辨率宽高比小于屏幕分辨率时，会自动适配宽度）
        //1移动设备浏览器
        if (cc.sys.platform == cc.sys.MOBILE_BROWSER) {
            console.log("移动设备浏览器>>铺满全屏");
            canvas.fitHeight = false;
            canvas.fitWidth = false;
            cc.view.setDesignResolutionSize(1136, 640, cc.ResolutionPolicy.EXACT_FIT);
        }
        else if (cc.sys.platform == cc.sys.DESKTOP_BROWSER) {
            console.log("桌面浏览器>>完整显示");
            canvas.fitHeight = true;
            canvas.fitWidth = true;
        }
        else if (cc.sys.isNative) {
            console.log("原生应用>>自动适配");
        }
        //自动更新浏览器大小
        cc.view.resizeWithBrowserSize(true);
        cc.view.enableAutoFullScreen(true);
    };
    return Adapter;
}());
exports.default = Adapter;

cc._RF.pop();
},{}],"Agora":[function(require,module,exports){
"use strict";
cc._RF.push(module, '5b185VmmPJDa4iuxdRtXbq9', 'Agora');
// scripts/lobby/module/Agora.ts

Object.defineProperty(exports, "__esModule", { value: true });
var IOS_CLASS_PATH = "Api";
var ANDROID_CLASS_PATH = "com/yaoji/qp/Api";
var Agora = (function () {
    function Agora() {
    }
    Agora.prototype.joinRoom = function (key, name, uid) {
        if (cc.sys.os == cc.sys.OS_IOS) {
            jsb.reflection.callStaticMethod(IOS_CLASS_PATH, "joinRoom:name:uid:", key, name, uid);
        }
        else if (cc.sys.os == cc.sys.OS_ANDROID) {
            jsb.reflection.callStaticMethod(ANDROID_CLASS_PATH, "joinRoom", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", key, name, uid);
        }
    };
    Agora.prototype.exitRoom = function () {
        if (cc.sys.os == cc.sys.OS_IOS) {
            jsb.reflection.callStaticMethod(IOS_CLASS_PATH, "exitRoom");
        }
        else if (cc.sys.os == cc.sys.OS_ANDROID) {
            jsb.reflection.callStaticMethod(ANDROID_CLASS_PATH, "exitRoom", "()V");
        }
    };
    Agora.prototype.startRecoder = function () {
        if (cc.sys.os == cc.sys.OS_IOS) {
            jsb.reflection.callStaticMethod(IOS_CLASS_PATH, "startRecoder");
        }
        else if (cc.sys.os == cc.sys.OS_ANDROID) {
            jsb.reflection.callStaticMethod(ANDROID_CLASS_PATH, "startRecoder", "()V");
        }
    };
    Agora.prototype.stopRecoder = function () {
        if (cc.sys.os == cc.sys.OS_IOS) {
            jsb.reflection.callStaticMethod(IOS_CLASS_PATH, "stopRecoder");
        }
        else if (cc.sys.os == cc.sys.OS_ANDROID) {
            jsb.reflection.callStaticMethod(ANDROID_CLASS_PATH, "stopRecoder", "()V");
        }
    };
    return Agora;
}());
exports.Agora = Agora;

cc._RF.pop();
},{}],"Alert":[function(require,module,exports){
"use strict";
cc._RF.push(module, '70f86wMyWlA1bzT1UBMzPfN', 'Alert');
// scripts/lobby/components/Alert.ts

Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = require("../module/Utils");
var AnimationShow_1 = require("./AnimationShow");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Alert = (function (_super) {
    __extends(Alert, _super);
    function Alert() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.delegate = null;
        _this.timer = null;
        return _this;
    }
    /**
     * Onload
     */
    Alert.prototype.onLoad = function () {
        this.setup();
    };
    //绑定
    Alert.prototype.setup = function () {
        this.animation = this.node.getComponent(AnimationShow_1.default);
        this.node.active = false;
        if (this.btnOk)
            Utils_1.default.addClickEvent(this.btnOk, this.node, "Alert", "onOkBtnClicked");
        if (this.btnCancel)
            Utils_1.default.addClickEvent(this.btnCancel, this.node, "Alert", "onOkBtnClicked");
    };
    /**
     * OnOk Btn Clicked
     * @param event
     */
    Alert.prototype.onOkBtnClicked = function (event) {
        var idx = 0;
        if (event.target === this.btnOk)
            idx = 1;
        else if (event.target === this.btnCancel)
            idx = 0;
        if (this.delegate) {
            this.delegate.onAlertButtonClicked(idx, null);
        }
        this.dismiss();
    };
    /**
     *
     * @param content
     * @param delegate
     * @param needcancel
     */
    Alert.prototype.show = function (content, delegate, needcancel) {
        this.node.active = true;
        this.delegate = delegate;
        this.content.string = content;
        if (needcancel) {
            if (this.btnCancel) {
                this.btnCancel.active = true;
                this.btnCancel.x = 150;
                this.btnOk.x = -150;
            }
        }
        else {
            if (this.btnCancel) {
                this.btnCancel.active = false;
            }
            this.btnOk.x = 0;
        }
    };
    /**
     * 隐藏
     */
    Alert.prototype.dismiss = function () {
        clearInterval(this.timer);
        this.animation.show(false);
    };
    //隐藏按钮
    Alert.prototype.showButtons = function (isShow) {
        this.btnOk.active = isShow;
        this.btnCancel.active = isShow;
    };
    /**
     * Alert
     * @param content
     */
    Alert.prototype.alert = function (content) {
        var self = this;
        this.node.active = true;
        this.content.string = "<b>" + content + "</b>";
        clearTimeout(this.timer);
        this.timer = setTimeout(function () {
            self.node.active = false;
        }, 10000);
    };
    /**
     * 简易文字提示
     * @param content
     * @param dismiss
     */
    Alert.prototype.prompt = function (content, dismiss) {
        if (dismiss === void 0) { dismiss = 1; }
        var self = this;
        this.node.active = true;
        this.msgLabel.string = content;
        clearTimeout(this.timer);
        this.timer = setTimeout(function () {
            self.node.active = false;
        }, dismiss * 1000);
    };
    Alert.prototype.onDestory = function () {
    };
    return Alert;
}(cc.Component));
__decorate([
    property({ type: cc.Node, default: null })
], Alert.prototype, "btnOk", void 0);
__decorate([
    property({ type: cc.Node, default: null })
], Alert.prototype, "btnCancel", void 0);
__decorate([
    property({ type: cc.Label, default: null })
], Alert.prototype, "msgLabel", void 0);
__decorate([
    property({ type: cc.RichText, default: null })
], Alert.prototype, "content", void 0);
Alert = __decorate([
    ccclass
], Alert);
exports.default = Alert;

cc._RF.pop();
},{"../module/Utils":"Utils","./AnimationShow":"AnimationShow"}],"AnimationShow":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'ce9efvgYdJBZK7+HPmNaRYV', 'AnimationShow');
// scripts/lobby/components/AnimationShow.ts

Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = require("../module/Utils");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var AnimationShow = (function (_super) {
    __extends(AnimationShow, _super);
    function AnimationShow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.animationNode = null;
        _this.closeBtn = null;
        return _this;
    }
    AnimationShow.prototype.onLoad = function () {
        this.animationNode.scale = 0;
        if (this.closeBtn) {
            var button = this.closeBtn.addComponent(cc.Button);
            Utils_1.default.addClickEvent(this.closeBtn, this.node, 'AnimationShow', 'onBtnClicked');
        }
    };
    AnimationShow.prototype.onBtnClicked = function () {
        this.show(false);
    };
    AnimationShow.prototype.show = function (show) {
        if (show) {
            var aciton = cc.scaleTo(0.6, 1, 1);
            aciton.easing(cc.easeBounceOut());
            this.animationNode.runAction(aciton);
        }
        else {
            var aciton = cc.scaleTo(0.5, 0, 0);
            aciton.easing(cc.easeBounceIn());
            var finished = cc.callFunc(this.hiden, this);
            var seq = cc.sequence(aciton, finished);
            this.animationNode.runAction(seq);
        }
    };
    AnimationShow.prototype.hiden = function () {
        this.node.active = false;
    };
    AnimationShow.prototype.onEnable = function () {
        this.show(true);
    };
    AnimationShow.prototype.onDisable = function () {
    };
    return AnimationShow;
}(cc.Component));
__decorate([
    property(cc.Node)
], AnimationShow.prototype, "animationNode", void 0);
__decorate([
    property(cc.Node)
], AnimationShow.prototype, "closeBtn", void 0);
AnimationShow = __decorate([
    ccclass
], AnimationShow);
exports.default = AnimationShow;

cc._RF.pop();
},{"../module/Utils":"Utils"}],"AudioMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'b60a8E+8/JJqZ3yR1BRYl11', 'AudioMgr');
// scripts/lobby/module/AudioMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var CrossApi_1 = require("./platform/CrossApi");
var AudioMgr = (function () {
    function AudioMgr() {
        this._bgmVolume = 1.0;
        this._sfxVolume = 1.0;
        this._shakeOpen = 0;
        this.bgmAudioID = -1;
        this.init();
    }
    AudioMgr.getInstance = function () {
        if (!this.instance)
            this.instance = new AudioMgr();
        return this.instance;
    };
    AudioMgr.prototype.init = function () {
        var t = cc.sys.localStorage.getItem("bgmVolume");
        if (t != null) {
            this.bgmVolume = parseFloat(t);
        }
        t = cc.sys.localStorage.getItem("sfxVolume");
        if (t != null) {
            this.sfxVolume = parseFloat(t);
        }
        this.handelEvent();
    };
    AudioMgr.prototype.handelEvent = function () {
        cc.game.on(cc.game.EVENT_HIDE, function () {
            console.log("cc.audioEngine.pauseAll");
            cc.audioEngine.pauseAll();
        });
        cc.game.on(cc.game.EVENT_SHOW, function () {
            console.log("cc.audioEngine.resumeAll");
            cc.audioEngine.resumeAll();
        });
    };
    Object.defineProperty(AudioMgr.prototype, "bgmVolume", {
        get: function () {
            var bgmVolume = cc.sys.localStorage.getItem("bgmVolume");
            if (bgmVolume != null) {
                this._bgmVolume = parseFloat(bgmVolume);
            }
            return this._bgmVolume;
        },
        set: function (volume) {
            this._bgmVolume = volume;
            cc.sys.localStorage.setItem("bgmVolume", volume);
            if (volume > 0) {
                if (this.bgmVolume != -1)
                    cc.audioEngine.resume(this.bgmAudioID);
            }
            else {
                if (this.bgmVolume != -1)
                    cc.audioEngine.pause(this.bgmAudioID);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AudioMgr.prototype, "sfxVolume", {
        get: function () {
            var sfxVolume = cc.sys.localStorage.getItem("sfxVolume");
            if (sfxVolume != null) {
                this._sfxVolume = parseFloat(sfxVolume);
            }
            return this._sfxVolume;
        },
        set: function (volume) {
            this._sfxVolume = volume;
            cc.sys.localStorage.setItem("sfxVolume", volume);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AudioMgr.prototype, "shakeOpen", {
        get: function () {
            var shakeOpen = cc.sys.localStorage.getItem("shakeOpen");
            if (shakeOpen != null) {
                this._shakeOpen = parseFloat(shakeOpen);
            }
            return this._shakeOpen;
        },
        set: function (open) {
            this._shakeOpen = open;
            cc.sys.localStorage.setItem("shakeOpen", open);
        },
        enumerable: true,
        configurable: true
    });
    AudioMgr.prototype.getUrl = function (url) {
        return cc.url.raw("resources/sounds/" + url);
    };
    AudioMgr.prototype.playBGM = function (url) {
        // let audioUrl = this.getUrl(url);
        console.log(url);
        if (this.bgmAudioID != -1) {
            cc.audioEngine.stop(this.bgmAudioID);
        }
        this.bgmAudioID = cc.audioEngine.play(url, true, this.bgmVolume);
    };
    AudioMgr.prototype.playSFX = function (url) {
        // let audioUrl = this.getUrl(url);
        if (this.sfxVolume > 0) {
            var audioId = cc.audioEngine.play(url, false, this.sfxVolume);
        }
    };
    AudioMgr.prototype.switchShake = function (openOrClose) {
        cc.sys.localStorage.setItem("shake", openOrClose);
    };
    AudioMgr.prototype.shake = function () {
        CrossApi_1.default.shake();
    };
    AudioMgr.prototype.pauseAll = function () {
        cc.audioEngine.pauseAll();
    };
    AudioMgr.prototype.resumeAll = function () {
        cc.audioEngine.resumeAll();
    };
    return AudioMgr;
}());
AudioMgr.instance = null;
exports.default = AudioMgr;

cc._RF.pop();
},{"./platform/CrossApi":"CrossApi"}],"CancelButton":[function(require,module,exports){
"use strict";
cc._RF.push(module, '6abc3tpXjNCt4g78kj4Cwgi', 'CancelButton');
// scripts/lobby/components/CancelButton.ts

Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = require("../module/Utils");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var CancelButton = (function (_super) {
    __extends(CancelButton, _super);
    function CancelButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.closeTarget = null;
        return _this;
    }
    CancelButton.prototype.onLoad = function () {
        var button = this.node.addComponent(cc.Button);
        Utils_1.default.addClickEvent(this.node, this.node, 'CancelButton', 'onBtnClicked');
    };
    CancelButton.prototype.onBtnClicked = function () {
        this.closeTarget.active = false;
    };
    return CancelButton;
}(cc.Component));
__decorate([
    property(cc.Label)
], CancelButton.prototype, "closeTarget", void 0);
CancelButton = __decorate([
    ccclass
], CancelButton);
exports.default = CancelButton;

cc._RF.pop();
},{"../module/Utils":"Utils"}],"CheckIn":[function(require,module,exports){
"use strict";
cc._RF.push(module, '43ae3clGz5G8bKlOLNDlmw5', 'CheckIn');
// scripts/lobby/components/CheckIn.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var CheckIn = (function (_super) {
    __extends(CheckIn, _super);
    function CheckIn() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isCheckin = false;
        return _this;
    }
    CheckIn.prototype.onLoad = function () {
        // init logic
        console.log("check in is onLoad");
        this.checkShowDialog();
    };
    CheckIn.prototype.onEnable = function () {
        console.log("check in is onEnable");
        this.checkShowDialog();
    };
    /**
     * 签到逻辑
     */
    CheckIn.prototype.checkIn = function () {
        var _time = Date.parse(new Date());
        console.log("签到成功! 时间:", _time);
        cc.sys.localStorage.setItem("time", _time);
        this.isCheckin = true;
    };
    CheckIn.prototype.onKeycheckIn = function () {
        if (!this.isCheckin) {
            this.checkIn();
            // this.btn_check.enabled = false;
        }
        else {
            this.node.active = false;
        }
    };
    CheckIn.prototype.checkShowDialog = function () {
        this.time = new Date(Number(cc.sys.localStorage.getItem("time")));
        var current_time = new Date();
        console.log("签到时间: ", this.time);
        console.log("系统时间:", current_time);
        if (current_time.getDate() !== this.time.getDate()
            || current_time.getMonth() !== this.time.getMonth()
            || current_time.getFullYear() !== this.time.getFullYear()) {
            console.log("没有签到");
            this.node.active = true;
        }
        else {
            console.log("已经签过到了");
            // this.node.active = false;
            this.isCheckin = true;
            this.btn_check.getComponent(cc.Toggle).isChecked = true;
        }
    };
    return CheckIn;
}(cc.Component));
__decorate([
    property(cc.Toggle)
], CheckIn.prototype, "btn_check", void 0);
CheckIn = __decorate([
    ccclass
], CheckIn);
exports.default = CheckIn;

cc._RF.pop();
},{}],"Checkbox":[function(require,module,exports){
"use strict";
cc._RF.push(module, '70900Rl8+BGzZLdDw5Vz9ph', 'Checkbox');
// scripts/lobby/components/Checkbox.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Utils_1 = require("../module/Utils");
var Checkbox = (function (_super) {
    __extends(Checkbox, _super);
    function Checkbox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.eventListener = null;
        return _this;
    }
    Checkbox.prototype.setChecked = function (checked) {
        this.checked = true;
        this.refresh();
    };
    Checkbox.prototype.onLoad = function () {
        if (this.target.getComponent(cc.Sprite) == null) {
            this.target.addComponent(cc.Sprite);
        }
        if (this.target.getComponent(cc.Button) == null) {
            this.target.addComponent(cc.Button);
        }
        Utils_1.default.addClickEvent(this.target.node, this.node, 'Checkbox', 'onBtnClicked');
        this.refresh();
    };
    Checkbox.prototype.onBtnClicked = function (event) {
        this.checked = !this.checked;
        this.refresh();
        if (this.eventListener)
            this.eventListener.onCheckboxChanged(this);
    };
    Checkbox.prototype.refresh = function () {
        var targetSprite = this.target.getComponent(cc.Sprite);
        if (this.checked) {
            targetSprite.spriteFrame = this.checkedSprite;
        }
        else {
            targetSprite.spriteFrame = this.sprite;
        }
    };
    return Checkbox;
}(cc.Component));
__decorate([
    property(cc.Sprite)
], Checkbox.prototype, "target", void 0);
__decorate([
    property(cc.SpriteFrame)
], Checkbox.prototype, "sprite", void 0);
__decorate([
    property(cc.SpriteFrame)
], Checkbox.prototype, "checkedSprite", void 0);
__decorate([
    property({ default: false })
], Checkbox.prototype, "checked", void 0);
Checkbox = __decorate([
    ccclass
], Checkbox);
exports.Checkbox = Checkbox;

cc._RF.pop();
},{"../module/Utils":"Utils"}],"Configs":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'd0483La7dVAf4RKVUkUTtkI', 'Configs');
// scripts/lobby/Configs.ts

Object.defineProperty(exports, "__esModule", { value: true });
exports.Configs = {
    LoginSrvUrl: "http://portal.wobu2.com/api",
    ServerUrl: "http://yj-test.wobu2.com/api",
    WXShareUrl: "http://yj-test.wobu2.com/api",
    CurrentVersion: 20170410,
    Environment: "test",
    Debug: true,
};

cc._RF.pop();
},{}],"CreatRoom":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'e18dbFRPdlPoojmArLZXCt5', 'CreatRoom');
// scripts/lobby/components/CreatRoom.ts

Object.defineProperty(exports, "__esModule", { value: true });
var UserMgr_1 = require("../UserMgr");
var Lobby_1 = require("./Lobby");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var CreatRoom = (function (_super) {
    __extends(CreatRoom, _super);
    function CreatRoom() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreatRoom.prototype.onLoad = function () {
        this.confNode = this.node.getChildByName("bg")
            .getChildByName("container")
            .getChildByName("confs");
        this.toggleGroups = [];
        for (var i = 0; i < this.confNode.childrenCount; i++) {
            var item = this.confNode.children[i];
            var group = item.getChildByName("group");
            var toogleGroup = group.getComponent(cc.ToggleGroup);
            this.toggleGroups.push(toogleGroup);
        }
        this.alert = this.node.parent.getComponent(Lobby_1.default).alert;
        this.hud = this.node.parent.getComponent(Lobby_1.default).hud;
    };
    CreatRoom.prototype.onTopBtnChangeState = function (event) {
        if (event.target.name == "toggle1") {
        }
        else if (event.target.name == "toggle2") {
        }
    };
    CreatRoom.prototype.onBtnClicked = function (event) {
        if (event.target.name == "btn_create") {
            this.createRoom();
        }
        else if (event.target.name == "btn_vip") {
        }
    };
    CreatRoom.prototype.createRoom = function () {
        var _loop_1 = function () {
            var self = this_1;
            var fd = this_1.toggleGroups[0];
            var js = this_1.toggleGroups[1];
            var kz = this_1.toggleGroups[2];
            var fd_idx = this_1.getCheckedItem(fd.toggleItems);
            var js_idx = this_1.getCheckedItem(js.toggleItems);
            if (-1 == fd_idx) {
                this_1.alert.alert("请选择封顶");
                return "break";
            }
            if (-1 == js_idx) {
                this_1.alert.alert("请选择局数");
                return "break";
            }
            var nickType = kz.toggleItems[0].isChecked ? 1 : 0;
            var audioType = kz.toggleItems[1].isChecked ? 1 : 0;
            var multiples = [36, 64, 128];
            var rounds = [6, 12, 20];
            this_1.hud.active = true;
            var req = { game_type: "ddz", max_multiple: multiples[fd_idx], max_round: rounds[js_idx], hidden_nick: nickType, shield_audio: audioType };
            UserMgr_1.default.getInstance().createrRoom(req, function (res) {
                self.hud.active = false;
                if (res !== null) {
                    var roomInfo = res.data;
                    if (0 === res.status) {
                        var ev = new cc.Event.EventCustom("event_created", false);
                        ev.detail = res;
                        self.node.parent.dispatchEvent(ev);
                    }
                    else {
                        self.alert.alert(res.msg);
                    }
                }
            });
            return { value: true };
        };
        var this_1 = this;
        do {
            var state_1 = _loop_1();
            if (typeof state_1 === "object")
                return state_1.value;
            if (state_1 === "break")
                break;
        } while (false);
        return false;
    };
    CreatRoom.prototype.getCheckedItem = function (toggles) {
        for (var i = 0; i < toggles.length; i++) {
            if (toggles[i].isChecked)
                return i;
        }
        return -1;
    };
    return CreatRoom;
}(cc.Component));
CreatRoom = __decorate([
    ccclass
], CreatRoom);
exports.default = CreatRoom;

cc._RF.pop();
},{"../UserMgr":"UserMgr","./Lobby":"Lobby"}],"CrossApi":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'cee45XjCPVDXqVF/BwKdNeA', 'CrossApi');
// scripts/lobby/module/CrossApi.ts

Object.defineProperty(exports, "__esModule", { value: true });
var CrossApi = (function () {
    function CrossApi() {
    }
    CrossApi.pickerImage = function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            jsb.reflection.callStaticMethod(this.ANDROID_CLASS_PATH, "pickerImage", "()V");
        }
        else if (cc.sys.os == cc.sys.OS_IOS) {
            jsb.reflection.callStaticMethod(this.IOS_CLASS_PATH, "pickerImage");
        }
    };
    CrossApi.onPickerImage = function (status, img_base64) {
        console.log(img_base64);
    };
    CrossApi.shake = function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            jsb.reflection.callStaticMethod(this.ANDROID_CLASS_PATH, "shake", "()V");
        }
        else if (cc.sys.os == cc.sys.OS_IOS) {
            jsb.reflection.callStaticMethod(this.IOS_CLASS_PATH, "shake");
        }
    };
    CrossApi.getElectric = function () {
        return 100;
    };
    CrossApi.getUUID = function () {
        return "TODO";
    };
    return CrossApi;
}());
CrossApi.IOS_CLASS_PATH = "Api";
CrossApi.ANDROID_CLASS_PATH = "com/yaoji/qp/Api";
exports.default = CrossApi;

cc._RF.pop();
},{}],"CrossPlatform":[function(require,module,exports){
"use strict";
cc._RF.push(module, '67814DdCrRGhKeTLa7b2Lu/', 'CrossPlatform');
// scripts/lobby/module/platform/CrossPlatform.ts



cc._RF.pop();
},{}],"DDZApizInterface.d":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'df8199HekNNa4jH4U8BLQGr', 'DDZApizInterface.d');
// scripts/games/ddz/DDZApizInterface.d.ts



cc._RF.pop();
},{}],"DDZAssetsMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, '62efbvVhJdOLYcf3oA6kae2', 'DDZAssetsMgr');
// scripts/games/ddz/DDZAssetsMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZAssetsMgr = (function () {
    function DDZAssetsMgr() {
        //牌动画Clips
        this._cardAnimationClips = {};
    }
    /**
     * 预加载斗地主所有资源
     */
    DDZAssetsMgr.prototype.asyncPreLoadDDZAllAssets = function () {
        cc.loader.loadResDir('games/ddz', function (progress) {
        }, function (error, resource, urls) {
            console.log("\u9884\u52A0\u8F7D\u5B8C\u6210\uFF0C\u8D44\u6E90\u6570\u91CF\uFF1A" + resource.length + ", URLS:" + urls);
        });
    };
    /**
     * 获取表情Atlas
     */
    DDZAssetsMgr.prototype.getEmijoAtlas = function (callBack) {
        if (this._emojiSpriteAtlas) {
            callBack(this._emojiSpriteAtlas);
            return;
        }
        var self = this;
        cc.loader.loadRes("textures/chat/emoji_action_texture", cc.SpriteAtlas, function (err, spriteAtlas) {
            if (err) {
                cc.error(err.message || err);
                return;
            }
            self._emojiSpriteAtlas = spriteAtlas;
        });
    };
    /**
     * 获取表情动画Clip
     * @param effName
     * @param callBack
     */
    DDZAssetsMgr.prototype.getEmijoAnimationClip = function (effName, callBack) {
        var effMap = { angry: 8, fennu: 3, han: 2, happy: 2, huaixiao: 9, jiong: 6, lihai: 13, se: 4, shaoxiang: 5, shihua: 6, sleep: 9, smaile: 9, touxiang: 4, yun: 4, zhiya: 2 };
        var effCount = effMap[effName];
        if (!effCount)
            return;
        var frames = [];
        this.getEmijoAtlas(function (atlas) {
            for (var i = 0; i < effCount; i++) {
                var spriteFrame = atlas.getSpriteFrame(effName + i);
                frames.push(spriteFrame);
            }
            var animationClip = cc.AnimationClip.createWithSpriteFrames(frames, 5);
            animationClip.wrapMode = cc.WrapMode.Loop;
            callBack(animationClip);
        });
    };
    /**
     * 获取牌的Atlas
     * @param callback
     */
    DDZAssetsMgr.prototype.getCardsAtlas = function (callback) {
        //先使用缓存
        if (this._cardSpriteAtlas) {
            callback(this._cardSpriteAtlas);
            return;
        }
        var self = this;
        //直接取
        cc.loader.loadRes("games/ddz/atlas/cardsAtlas", cc.SpriteAtlas, function (err, spriteAtlas) {
            if (err) {
                cc.error(err.message || err);
                return;
            }
            self._cardSpriteAtlas = spriteAtlas;
            callback(spriteAtlas);
        });
    };
    /**
     * 获取牌的精灵从图集中
     */
    DDZAssetsMgr.prototype.getCardSpriteFrameFromAtlas = function (filename, callBack) {
        if (!filename) {
            callBack(null);
            return;
        }
        this.getCardsAtlas(function (atlas) {
            if (atlas) {
                callBack(atlas.getSpriteFrame(filename));
            }
        });
    };
    /**
     * 加载牌的动画
     */
    DDZAssetsMgr.prototype.loadCardAnimations = function () {
        var self = this;
        var animations = { "bomb": { count: 9, row: 3, col: 3 }, "plane": { count: 5, row: 3, col: 2 }, "rocket": { count: 16, row: 8, col: 2 }, "straight": { count: 10, row: 4, col: 3 } };
        var _loop_1 = function (key) {
            var data = animations[key];
            this_1.getFrameAnimationClips("games/ddz/texture/anim/" + key, data.count, data.row, data.col, function (clip) {
                self._cardAnimationClips[key] = clip;
            });
        };
        var this_1 = this;
        for (var key in animations) {
            _loop_1(key);
        }
    };
    /**
     * 获取动画Clip
     * @param aniFile
     * @param volumn
     * @param row_count
     * @param column_count
     * @param callBack
     */
    DDZAssetsMgr.prototype.getFrameAnimationClips = function (aniFile, volumn, row_count, column_count, callBack) {
        var realUrl = cc.url.raw(aniFile);
        cc.loader.loadRes(aniFile, cc.SpriteFrame, function (err, frame) {
            var size = frame.getTexture().getContentSize();
            var width = size.width / column_count;
            var height = size.height / row_count;
            var bbreak = false;
            var current_index = 0;
            var rect = cc.rect(0, 0, 0, 0);
            var framesArr = [];
            for (var row = 0; row < row_count; row++) {
                if (bbreak) {
                    break;
                }
                for (var column = 0; column < column_count; column++) {
                    current_index = row * column_count + column;
                    if (current_index < volumn) {
                        rect = cc.rect(column * width, row * height, width, height);
                        framesArr.push(frame);
                    }
                    else {
                        bbreak = true;
                        break;
                    }
                }
            }
            var animationClip = cc.AnimationClip.createWithSpriteFrames(framesArr, 10);
            callBack(animationClip);
        });
    };
    return DDZAssetsMgr;
}());
exports.default = DDZAssetsMgr;

cc._RF.pop();
},{}],"DDZAudioMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'ebf3fg7YPxEz7yq/Ff5hug9', 'DDZAudioMgr');
// scripts/games/ddz/DDZAudioMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var AudioMgr_1 = require("../../lobby/module/AudioMgr");
var DDZTypes_1 = require("./DDZTypes");
var DDZAudioMgr = (function () {
    function DDZAudioMgr() {
        this.assetsRelativePath = "resources/games/ddz/sounds/";
        this.audioMgr = AudioMgr_1.default.getInstance();
    }
    /**
     * 播放背景音乐
     * @param audioId
     */
    DDZAudioMgr.prototype.playBgMusic = function () {
        this.audioMgr.playBGM(this.getAudioPath("bgm_ddz"));
    };
    /**
     * 获取文件路径
     * @param file
     */
    DDZAudioMgr.prototype.getAudioPath = function (file) {
        var path = this.assetsRelativePath + file + ".mp3";
        return cc.url.raw(path);
    };
    /**
     * 播放聊天音效
     * @param soundName
     */
    DDZAudioMgr.prototype.playChatAudio = function (soundName) {
        var path = this.getAudioPath("phrase/" + soundName);
        this.playAudioEff(path);
    };
    /**
     * 播放音效
     * @param audioId
     */
    DDZAudioMgr.prototype.playAudioEff = function (fileName) {
        this.audioMgr.playSFX(fileName);
    };
    /**
     * 播放牌型音效
     */
    DDZAudioMgr.prototype.playCardsAudioEff = function (cards, type, gender) {
        if (gender === void 0) { gender = 0; }
        var targetCardId = null;
        var audioPath = "";
        //空
        if (null === cards || undefined === cards || cards.length === 0) {
            var rand_n = Math.floor((Math.random() * 4) + 1);
            audioPath += (gender === 0) ? "man/" : "woman/";
            audioPath += "buyao_" + rand_n;
        }
        else if (type === DDZTypes_1.CardType.DAN) {
            targetCardId = cards[0];
            audioPath += (gender === 0) ? "man/" : "woman/";
            audioPath += "dan_" + DDZTypes_1.getCardPoint(targetCardId);
        }
        else if (type === DDZTypes_1.CardType.DUIZI) {
            targetCardId = cards[0];
            audioPath += (gender === 0) ? "man/" : "woman/";
            audioPath += "dui_" + DDZTypes_1.getCardPoint(targetCardId);
        }
        else if (type === DDZTypes_1.CardType.SAN) {
            targetCardId = cards[0];
            audioPath += (gender === 0) ? "man/" : "woman/";
            audioPath += "tuple_" + DDZTypes_1.getCardPoint(targetCardId);
        }
        else if (type === DDZTypes_1.CardType.SANDAIYI) {
            audioPath += (gender === 0) ? "man/" : "woman/";
            audioPath += "sandaiyi";
        }
        else if (type === DDZTypes_1.CardType.SANDAIDUI) {
            audioPath += (gender === 0) ? "man/" : "woman/";
            audioPath += "sandaiyidui";
        }
        else if (type === DDZTypes_1.CardType.SHUNZI) {
            audioPath += (gender === 0) ? "man/" : "woman/";
            audioPath += "shunzi";
        }
        else if (type === DDZTypes_1.CardType.ZHADAN) {
            audioPath += (gender === 0) ? "man/" : "woman/";
            audioPath += "zhadan";
        }
        else if (type === DDZTypes_1.CardType.WANGZHA) {
            audioPath += (gender === 0) ? "man/" : "woman/";
            audioPath += "wangzha";
        }
        else if (type === DDZTypes_1.CardType.FEIJI) {
            audioPath += (gender === 0) ? "man/" : "woman/";
            audioPath += "feiji";
        }
        else if (type === DDZTypes_1.CardType.LIANDUI) {
            audioPath += (gender === 0) ? "man/" : "woman/";
            audioPath += "liandui";
        }
        var path = this.getAudioPath(audioPath);
        this.audioMgr.playSFX(path);
    };
    /**
     * 播放抢地主
     */
    DDZAudioMgr.prototype.playGrabLandlord = function (grab, gender) {
        if (gender === void 0) { gender = 0; }
        var audioPath = "";
        audioPath += (gender === 0) ? "man/" : "woman/";
        if (grab === false)
            audioPath += "norob";
        else {
            var rand_n = Math.floor((Math.random() * 3) + 1);
            audioPath += "rob_" + rand_n;
        }
        var path = this.getAudioPath(audioPath);
        this.playAudioEff(path);
    };
    /**
     * 播放震动
     */
    DDZAudioMgr.prototype.playShake = function () {
    };
    return DDZAudioMgr;
}());
exports.default = DDZAudioMgr;

cc._RF.pop();
},{"../../lobby/module/AudioMgr":"AudioMgr","./DDZTypes":"DDZTypes"}],"DDZCardMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'a0bd9//LJNMaIMdOtgn+aie', 'DDZCardMgr');
// scripts/games/ddz/DDZCardMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZCard_1 = require("./DDZCard");
var DDZRule_1 = require("./DDZRule");
var MY_HOLD_CARD_SPACE = 52;
var CARD_RATIO = 148 / 190.;
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZCardMgr = DDZCardMgr_1 = (function (_super) {
    __extends(DDZCardMgr, _super);
    // draw      : cc.Graphics;
    function DDZCardMgr() {
        var _this = _super.call(this) || this;
        //我的手牌ID数组
        _this.myHandCardsIds = [];
        //我的手牌
        _this.myHandCardsArray = [];
        _this.isTouching = false;
        _this.selectedCardsArray = [];
        _this.myHandCardsSpace = MY_HOLD_CARD_SPACE;
        DDZCardMgr_1.instance = _this;
        return _this;
    }
    DDZCardMgr.prototype.onLoad = function () {
        this.initViews();
        this.bindingEvent();
        this.debug();
    };
    DDZCardMgr.prototype.debug = function () {
        // let debugNode = new cc.Node('card');
        // this.draw = debugNode.addComponent<cc.Graphics>(cc.Graphics);
        // this.myHandCardsNode.addChild(debugNode, 9999, "draw");
        // this.draw.lineWidth = 10;
        // this.draw.strokeColor = cc.Color.RED;
        // this.draw.fillColor = cc.Color.RED;
        //this.setupMyCards([40,41,42,43,44,45,46,47,48,49,50,51,52,53,0,7,11,15,19,23]);
    };
    DDZCardMgr.prototype.bindingEvent = function () {
        this.node.on(cc.Node.EventType.TOUCH_START, this.touchStart, this.node);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.touchMove, this.node);
        this.node.on(cc.Node.EventType.TOUCH_END, this.touchEnd, this.node);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.touchCancel, this.node);
    };
    DDZCardMgr.prototype.initViews = function () {
        //init my self
        this.mySelfNode = this.node.getChildByName("mine");
        this.myHandCardsNode = this.mySelfNode.getChildByName("cards");
        this.myHandCardsNode.getComponent(cc.Sprite).spriteFrame = null;
        // this.myHandCardsNode.active = false;
        var myCardsSpriteArray = this.myHandCardsNode.getComponentsInChildren(cc.Sprite);
        this.topLandlordCardsPanel = this.node.getChildByName("main")
            .getChildByName("top")
            .getChildByName("card_panel");
        this.topLandlordCardsPanel.active = false;
        var topSprsArr = this.topLandlordCardsPanel.getComponentsInChildren(cc.Sprite);
        this.topLandlordCardsArray = [];
        for (var i = 0; i < 3; i++) {
            var cardSpr = topSprsArr[i];
            var card = new DDZCard_1.default(1, cc.size(128, 168), cardSpr);
            this.topLandlordCardsArray.push(card);
        }
        this.resetTopCards();
    };
    DDZCardMgr.prototype.touchStart = function (event) {
        var self = DDZCardMgr_1.instance;
        if (self.myHandCardsArray.length === 0)
            return;
        var pos = event.getLocation();
        self._touchBegan = self.myHandCardsNode.convertToNodeSpaceAR(pos);
        self.checkSelCard(self._touchBegan, self._touchBegan, true);
        this.isTouching = true;
    };
    DDZCardMgr.prototype.touchMove = function (event) {
        var self = DDZCardMgr_1.instance;
        if (self.myHandCardsArray.length === 0)
            return;
        var pos = event.getLocation();
        self._touchMoved = self.myHandCardsNode.convertToNodeSpaceAR(pos);
        self.checkSelCard(self._touchMoved, self._touchMoved);
        self.checkSelCardReserve(self._touchBegan, self._touchMoved);
    };
    DDZCardMgr.prototype.touchEnd = function (event) {
        var self = DDZCardMgr_1.instance;
        if (self.myHandCardsArray.length === 0)
            return;
        var pos = event.getLocation();
        self._touchEnd = self.myHandCardsNode.convertToNodeSpaceAR(pos);
        self.checkSelCardEnd();
        this.isTouching = false;
    };
    DDZCardMgr.prototype.touchCancel = function (event) {
        var self = DDZCardMgr_1.instance;
        if (self.myHandCardsArray.length === 0)
            return;
        this.isTouching = false;
    };
    /**
     * 发牌
     * @param cards 牌
     */
    DDZCardMgr.prototype.dealMyCards = function (cards) {
        if (cards === void 0) { cards = null; }
        //添加牌
        this.addMyCards(cards, false);
        //布局牌
        this.layoutMyCards();
        //播放发牌动画
        this.playDealCardsAnimation();
    };
    /**
     * 我的牌
     * @param cards 牌数组
     * @param needAnimation 是否需要动画发牌
     */
    DDZCardMgr.prototype.addMyCards = function (cards, attach) {
        if (cards === void 0) { cards = null; }
        if (attach === void 0) { attach = true; }
        if (!cards)
            return;
        for (var i = 0; i < cards.length; i++) {
            var cardid = cards[i];
            var card = new DDZCard_1.default(cardid);
            if (attach) {
                card.attach(this.myHandCardsNode);
            }
            this.myHandCardsArray.push(card);
            this.myHandCardsIds.push(cardid);
        }
    };
    /**
     * 设置我的牌
     * @param cards
     * @param needAnimation
     */
    DDZCardMgr.prototype.setupMyCards = function (cards, needAnimation) {
        if (cards === void 0) { cards = null; }
        if (needAnimation === void 0) { needAnimation = false; }
        this.cleanMyHoldCards();
        if (needAnimation) {
            this.dealMyCards(cards);
        }
        else {
            this.addMyCards(cards, true);
            this.sortMyHoldCards();
            this.layoutMyCards();
        }
    };
    /**
     * 重新布局我的牌
     */
    DDZCardMgr.prototype.layoutMyCards = function () {
        var card_count = this.myHandCardsArray.length;
        var wSize = cc.director.getVisibleSize();
        var card_container_width = wSize.width - 135; //this.myHandCardsNode.getContentSize().width;
        console.log("cardContainerSize：" + card_container_width);
        var card_width = 148; //cardContainerSize.width - (20-1) * MY_HOLD_CARD_SPACE;
        var card_space = (card_container_width - card_width) / (card_count - 1);
        card_space = card_space < MY_HOLD_CARD_SPACE ? card_space : MY_HOLD_CARD_SPACE;
        this.myHandCardsSpace = card_space;
        console.log("cardContainerSize：" + card_space);
        var cardSize = cc.size(card_width, card_width / CARD_RATIO);
        var x = card_container_width / -2.;
        x += cardSize.width / 2;
        var y = 0;
        var i = 0;
        for (i; i < this.myHandCardsArray.length; i++) {
            var card = this.myHandCardsArray[i];
            card.setCardSize(cardSize);
            card.setPosition(cc.p(x, y));
            card.setOriginalRect(cc.rect(x, y, cardSize.width, cardSize.height));
            x += card_space;
        }
    };
    DDZCardMgr.prototype.checkSelCard = function (beganPoint, endPoint, isBegan) {
        if (isBegan === void 0) { isBegan = false; }
        var self = DDZCardMgr_1.instance;
        if (isBegan) {
            for (var i = self.myHandCardsArray.length - 1; i >= 0; i--) {
                var card = self.myHandCardsArray[i];
                if (card.canTouched(beganPoint)) {
                    card.setTouched(true);
                    card.tag = 1;
                    return;
                }
            }
        }
        else {
            var x = void 0, y = void 0, w = void 0, h = void 0;
            x = Math.min(beganPoint.x, endPoint.x);
            y = Math.min(beganPoint.y, endPoint.y);
            w = Math.max(1, Math.abs(beganPoint.x - endPoint.x));
            h = Math.max(1, Math.abs(beganPoint.y - endPoint.y));
            var rect = cc.rect(x, y, w, h);
            for (var i = self.myHandCardsArray.length - 1; i >= 0; i--) {
                var card = self.myHandCardsArray[i];
                var r = card.getRect();
                if (i !== self.myHandCardsArray.length - 1)
                    r.width = this.myHandCardsSpace;
                if (rect.intersects(r)) {
                    card.setTouched(true);
                    return;
                }
            }
        }
    };
    DDZCardMgr.prototype.checkSelCardReserve = function (touchBegan, touchMoved) {
        var self = DDZCardMgr_1.instance;
        var p1 = touchBegan.x < touchMoved.x ? touchBegan : touchMoved;
        var width = Math.abs(touchBegan.x - touchMoved.x);
        var height = Math.abs(touchBegan.y - touchMoved.y) > 6 ? Math.abs(touchBegan.y - touchMoved.y) : 6;
        var rect = cc.rect(p1.x, p1.y, width, height);
        // self.draw.clear();
        // self.draw.rect(p1.x, p1.y, width, height);
        // self.draw.strokeColor = cc.Color.RED;
        // self.draw.stroke();
        var isOut = true;
        for (var _i = 0, _a = self.myHandCardsArray; _i < _a.length; _i++) {
            var card = _a[_i];
            if (card.canTouched(touchMoved))
                isOut = false;
        }
        if (isOut)
            return;
        for (var i = self.myHandCardsArray.length - 1; i >= 0; i--) {
            var card = self.myHandCardsArray[i];
            var r = card.getRect();
            if (i !== self.myHandCardsArray.length - 1)
                r.width = this.myHandCardsSpace;
            if (rect.intersects(r)) {
                card.setTouched(true);
            }
            else {
                card.setTouched(false);
            }
        }
    };
    DDZCardMgr.prototype.checkSelCardEnd = function () {
        var self = DDZCardMgr_1.instance;
        for (var i = self.myHandCardsArray.length - 1; i >= 0; i--) {
            var card = self.myHandCardsArray[i];
            if (!card.isSelected() && card.isTouched())
                card.setSelected(true);
            else if (card.isSelected() && card.isTouched())
                card.setSelected(false);
            card.setTouched(false);
        }
    };
    DDZCardMgr.prototype.getSelectedCards = function () {
        var cardsArr = [];
        for (var _i = 0, _a = this.myHandCardsArray; _i < _a.length; _i++) {
            var card = _a[_i];
            if (card.isSelected()) {
                cardsArr.push(card.cardId);
            }
        }
        return cardsArr;
    };
    /**
     * 删除我的选中的牌
     */
    DDZCardMgr.prototype.removeSelectedCards = function () {
        var cards = this.getSelectedCards();
        this.removeMyCards(cards);
        this.sortMyHoldCards();
        this.layoutMyCards();
    };
    /**
     * 删除我的牌
     * @param removeCards 要删除的牌
     */
    DDZCardMgr.prototype.removeMyCards = function (removeCards) {
        //删除牌
        for (var i = this.myHandCardsArray.length - 1; i >= 0; i--) {
            var card = this.myHandCardsArray[i];
            var cardId = card.cardId;
            if (removeCards.indexOf(cardId) !== -1) {
                card.remove();
                this.myHandCardsArray.splice(i, 1);
                this.myHandCardsIds.splice(i, 1);
            }
        }
    };
    /**
     * 设置头部三张牌
     * @param card 牌
     */
    DDZCardMgr.prototype.setupTopCards = function (cards) {
        if (cards.length != 3)
            return;
        this.topLandlordCardsPanel.active = true;
        for (var i = 0; i < 3; i++) {
            var card = this.topLandlordCardsArray[i];
            card.setCardId(cards[i]);
        }
    };
    /**
     * 排序我手里的牌
     */
    DDZCardMgr.prototype.sortMyHoldCards = function () {
        var self = DDZCardMgr_1.instance;
        self.myHandCardsIds = DDZRule_1.sortCards(self.myHandCardsIds);
        //重新更新我的牌
        for (var i = 0; i < self.myHandCardsIds.length; i++) {
            var cardId = self.myHandCardsIds[i];
            var card = self.myHandCardsArray[i];
            card.setCardId(cardId);
        }
    };
    /**
     * 提示出牌
     */
    DDZCardMgr.prototype.noticeMyCards = function (preCards, preType, cards) {
        // let noticeCards = noticePlay(preCards, preType, cards, this.noticeexcludeCards);
        // this.noticeexcludeCards = this.noticeexcludeCards.concat( noticeCards );
    };
    /**
     * 清除手里的牌的 状态
     */
    DDZCardMgr.prototype.cleanAllCardsState = function () {
        for (var _i = 0, _a = this.myHandCardsArray; _i < _a.length; _i++) {
            var card = _a[_i];
            card.cleanState();
        }
    };
    DDZCardMgr.prototype.getMycards = function () {
        return this.myHandCardsIds;
    };
    /**
     *
     * @param cards
     * @param localIdx
     */
    DDZCardMgr.prototype.setCards = function (cards, localIdx) {
        this.playerCardsArray[localIdx] = cards;
    };
    /**
     * 播放发牌动画
     */
    DDZCardMgr.prototype.playDealCardsAnimation = function () {
        var _this = this;
        var self = this;
        var move_width = this.myHandCardsSpace / 2;
        var temArr = [];
        var i = 0;
        var timer = null;
        var finishCallBack = function () {
            clearInterval(timer);
            setTimeout(self.sortMyCardsAnimation, 0.8);
        };
        timer = setInterval(function () {
            var card = self.myHandCardsArray[i];
            card.setPosition(cc.p(0, 0));
            card.attach(self.myHandCardsNode);
            if (temArr.length > 0) {
                var target = temArr[temArr.length - 1];
                var pos = target.getPosition();
                card.setPosition(cc.p(pos.x, pos.y));
            }
            temArr.push(card);
            for (var y = 0; y < temArr.length; y++) {
                var card_1 = temArr[y];
                var move_by_x = -move_width;
                if (y == i) {
                    move_by_x = move_width;
                }
                if (y == 0 && i == 0) {
                    continue;
                }
                card_1.cardSprite.node.runAction(cc.moveBy(0.1, cc.p(move_by_x, 0)));
            }
            if (temArr.length == _this.myHandCardsArray.length)
                finishCallBack();
            i++;
        }, 150);
    };
    /**
     * 排序我的牌
     */
    DDZCardMgr.prototype.sortMyCardsAnimation = function () {
        var self = DDZCardMgr_1.instance;
        for (var _i = 0, _a = self.myHandCardsArray; _i < _a.length; _i++) {
            var card = _a[_i];
            var orpos = card.getOriginalRect().origin;
            var move = cc.moveTo(0.1, cc.p(0, 0));
            move.easing(cc.easeBounceIn());
            var moveBack = cc.moveTo(0.1, orpos);
            moveBack.easing(cc.easeBounceIn());
            var call = cc.callFunc(self.sortMyHoldCards);
            var action = cc.sequence(move, call, cc.delayTime(0.2), moveBack);
            card.cardSprite.node.runAction(action);
        }
    };
    /**
     * 增加地主牌 3张到我的手牌
     */
    DDZCardMgr.prototype.addLandownerThreeCardsToMyHand = function (cards) {
        this.addMyCards(cards, true);
        this.sortMyHoldCards();
        this.layoutMyCards();
    };
    /**
     * 提示出牌
     */
    DDZCardMgr.prototype.hint = function () {
    };
    /**
     * 清除牌
     * @param localIdx
     */
    DDZCardMgr.prototype.cleanCards = function (localIdx) {
        delete this.playerCardsArray[localIdx];
    };
    // cleanAllCards(){
    //     for (let key in this.cardArray){
    //         delete this.cardArray[ key ];
    //     }
    // }
    /**
     * 清除我的手牌
     */
    DDZCardMgr.prototype.cleanMyHoldCards = function () {
        if (!this.myHandCardsArray || this.myHandCardsArray.length === 0)
            return;
        for (var i = 0; i < this.myHandCardsArray.length; i++) {
            var card = this.myHandCardsArray[i];
            card.remove();
        }
        this.myHandCardsArray = [];
        this.myHandCardsIds = [];
    };
    /**
     * 移除地主牌
     */
    DDZCardMgr.prototype.removeTopCards = function () {
        if (!this.topLandlordCardsArray)
            return;
        for (var i = 0; i < this.topLandlordCardsArray.length; i++) {
            var card = this.topLandlordCardsArray[i];
            card.remove();
        }
    };
    /**
     * 重置地主牌
     */
    DDZCardMgr.prototype.resetTopCards = function () {
        this.topLandlordCardsPanel.active = false;
        for (var i = 0; i < 3; i++) {
            var card = this.topLandlordCardsArray[i];
            card.setCardId(1);
        }
    };
    /**
     * 清理我的手牌  && 重置地主牌
     */
    DDZCardMgr.prototype.cleanAllCards = function () {
        this.cleanMyHoldCards();
        this.resetTopCards();
    };
    return DDZCardMgr;
}(cc.Component));
DDZCardMgr = DDZCardMgr_1 = __decorate([
    ccclass
], DDZCardMgr);
exports.DDZCardMgr = DDZCardMgr;
var DDZCardMgr_1;

cc._RF.pop();
},{"./DDZCard":"DDZCard","./DDZRule":"DDZRule"}],"DDZCardNode":[function(require,module,exports){
"use strict";
cc._RF.push(module, '84d19vsu1JPMqV8k7uf4Uc6', 'DDZCardNode');
// scripts/games/ddz/DDZCardNode.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZCardNode = (function (_super) {
    __extends(DDZCardNode, _super);
    function DDZCardNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DDZCardNode.prototype.onLoad = function () {
        this.landlorder1Flag.active = false;
        this.landlorder2Flag.active = false;
    };
    DDZCardNode.prototype.setCardContent = function (cardId) {
        var self = this;
        cc.loader.loadRes("games/ddz/atlas/cardsAtlas", cc.SpriteAtlas, function (err, spriteAtlas) {
            if (err) {
                cc.error(err);
                return;
            }
            var cardInfo = self.getCardFileName(cardId);
            self.point1Sprite.spriteFrame = spriteAtlas.getSpriteFrame(cardInfo.pointFile);
            self.point2Sprite.spriteFrame = spriteAtlas.getSpriteFrame(cardInfo.pointFile);
            if (cardInfo.point === 14) {
                self.suit1Sprite.spriteFrame = null;
                self.suit2Sprite.spriteFrame = null;
                self.point1Sprite.node.scale = 0.5;
                self.point2Sprite.node.scale = 0.5;
            }
            else {
                self.point1Sprite.node.scale = 1;
                self.point2Sprite.node.scale = 1;
                self.suit1Sprite.spriteFrame = spriteAtlas.getSpriteFrame(cardInfo.suitFile);
                self.suit2Sprite.spriteFrame = spriteAtlas.getSpriteFrame(cardInfo.suitFile);
            }
        });
    };
    DDZCardNode.prototype.getCardFileName = function (cid) {
        var cardId = cid - 1;
        var point = 0;
        var suits = 0;
        if (cardId === 52 || cardId === 53) {
            point = 14;
            suits = cardId - 51;
        }
        else {
            suits = Math.floor(cardId / 13);
            point = Math.ceil(cardId % 13);
            point += 1;
            suits += 1;
        }
        var cardFile = "card";
        cardFile += "-" + point;
        if (suits === 1 || suits === 3) {
            cardFile += "-" + 1;
        }
        else {
            cardFile += "-" + 2;
        }
        var suitFile = "suit-" + suits;
        return { pointFile: cardFile, suitFile: suitFile, point: point };
    };
    DDZCardNode.prototype.setGray = function (isGray) {
        this.node.color = isGray ? cc.Color.GRAY : cc.Color.WHITE;
        for (var i = 0; i < this.node.childrenCount; i++) {
            var node = this.node.children[i];
            node.color = isGray ? cc.Color.GRAY : cc.Color.WHITE;
        }
    };
    return DDZCardNode;
}(cc.Component));
__decorate([
    property(cc.Sprite)
], DDZCardNode.prototype, "point1Sprite", void 0);
__decorate([
    property(cc.Sprite)
], DDZCardNode.prototype, "point2Sprite", void 0);
__decorate([
    property(cc.Sprite)
], DDZCardNode.prototype, "suit1Sprite", void 0);
__decorate([
    property(cc.Sprite)
], DDZCardNode.prototype, "suit2Sprite", void 0);
__decorate([
    property(cc.Node)
], DDZCardNode.prototype, "landlorder1Flag", void 0);
__decorate([
    property(cc.Node)
], DDZCardNode.prototype, "landlorder2Flag", void 0);
DDZCardNode = __decorate([
    ccclass
], DDZCardNode);
exports.default = DDZCardNode;

cc._RF.pop();
},{}],"DDZCardPanel":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'd52ccr1bIND7YE+FPOg3wRV', 'DDZCardPanel');
// scripts/games/ddz/DDZCardPanel.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZCard_1 = require("./DDZCard");
var CARD_RATIO = 148 / 190.;
var CARD_WIDTH = 128;
var CARD_HEIGHT = 168;
var CARD_ROW_SPACE = 40;
var CARD_COL_SPACE = 40;
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZCardPanel = (function (_super) {
    __extends(DDZCardPanel, _super);
    function DDZCardPanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cardsArr = [];
        _this.cardScale = 1;
        return _this;
    }
    DDZCardPanel.prototype.onLoad = function () {
        var wSize = cc.director.getVisibleSize();
        var width = (wSize.width - 200 * 2) / 2;
        this.node.width = width;
    };
    DDZCardPanel.prototype.showCards = function (cards) {
        if (cards === void 0) { cards = null; }
        this.cleanCards();
        if (!cards)
            return;
        var rol_space = CARD_ROW_SPACE * this.cardScale;
        var card_count = cards.length;
        var container_size = this.node.getContentSize();
        var card_width = CARD_WIDTH * this.cardScale;
        var card_height = CARD_HEIGHT * this.cardScale;
        var start_x = 0;
        var start_y = container_size.height / 2 - card_height / 2;
        var need_width = (card_count - 1) * rol_space + card_width;
        var row_max_count = (container_size.width - (card_width * 1)) / rol_space + 1;
        row_max_count = Math.floor(row_max_count);
        var row_item_count = card_count > row_max_count ? row_max_count : card_count;
        console.log("row_max_count:" + row_max_count + "  container_size:" + container_size.width);
        var need_col_count = Math.ceil(card_count / row_item_count);
        var need_row_width = (row_item_count - 1) * rol_space + card_width;
        var need_col_height = card_height + CARD_COL_SPACE;
        console.log("need_row_width:" + need_row_width);
        var panel_anchor = this.node.getAnchorPoint();
        var card_anchor = cc.p(0.5, 0.5);
        if (panel_anchor.x === 0) {
            card_anchor.x = 0;
            start_x = 0;
        }
        else if (panel_anchor.x === 0.5) {
            card_anchor.x = 0;
            start_x = need_row_width / -2; //need_width / -2;
            start_y = 0;
        }
        else if (panel_anchor.x === 1) {
            card_anchor.x = 0;
            start_x = -need_row_width; //-need_width;
        }
        var pos_x = start_x;
        var pos_y = start_y;
        for (var i = 0; i < cards.length; i++) {
            var card = new DDZCard_1.default(cards[i], cc.v2(card_width, card_height));
            card.cardSprite.node.setAnchorPoint(card_anchor);
            this.node.addChild(card.cardSprite.node);
            card.setPosition(cc.p(pos_x, pos_y));
            this.cardsArr.push(card);
            pos_x += rol_space;
            if ((i + 1) % row_max_count == 0) {
                pos_y -= CARD_COL_SPACE;
                pos_x = start_x;
            }
        }
    };
    DDZCardPanel.prototype.cleanCards = function () {
        for (var _i = 0, _a = this.cardsArr; _i < _a.length; _i++) {
            var card = _a[_i];
            card.remove();
        }
        this.cardsArr.splice(0, this.cardsArr.length);
    };
    return DDZCardPanel;
}(cc.Component));
DDZCardPanel = __decorate([
    ccclass
], DDZCardPanel);
exports.default = DDZCardPanel;

cc._RF.pop();
},{"./DDZCard":"DDZCard"}],"DDZCard":[function(require,module,exports){
"use strict";
cc._RF.push(module, '5eff3m7jatPCaL1krVPuIEM', 'DDZCard');
// scripts/games/ddz/DDZCard.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZCardNode_1 = require("./DDZCardNode");
var DDZCardType;
(function (DDZCardType) {
    DDZCardType[DDZCardType["DDZCardTypeHand"] = 0] = "DDZCardTypeHand";
    DDZCardType[DDZCardType["DDZCardTypePlay"] = 1] = "DDZCardTypePlay";
})(DDZCardType || (DDZCardType = {}));
var ASPECT_RATIO = 0.76;
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZCard = (function () {
    /**
     * 初始化Card
     * @param cardId 牌ID
     * @param size 牌精灵大小
     * @param sprite 牌的精灵
     */
    function DDZCard(cardId, size, sprite) {
        if (size === void 0) { size = cc.v2(128 * 1.3, 168 * 1.3); }
        if (sprite === void 0) { sprite = null; }
        this.cardId = -1;
        this.cardType = DDZCardType.DDZCardTypeHand;
        this.touched = false;
        this.selected = false;
        this.originalRect = cc.rect(0, 0, 0, 0);
        this.contentSize = cc.v2(128, 168);
        this.tag = 0;
        this.setCardSize(size);
        if (!sprite)
            this.initSprite();
        else
            this.cardSprite = sprite;
        this.setCardId(cardId);
    }
    /**
     * 设置牌大小
     * @param size
     */
    DDZCard.prototype.setCardSize = function (size) {
        this.originalRect.size.width = size.x;
        this.originalRect.size.height = size.y;
        this.contentSize = size;
    };
    /**
     * 设置牌ID
     * @param cardId
     */
    DDZCard.prototype.setCardId = function (cardId) {
        this.cardId = cardId;
        this.setTexture(cardId);
    };
    /**
     * 设置牌的纹理通过ID
     * @param cardId
     */
    DDZCard.prototype.setTexture = function (cardId) {
        var _this = this;
        var filename = this.getCardAssetPath(cardId);
        var self = this;
        cc.loader.loadRes(filename, cc.SpriteFrame, function (err, sprframe) {
            if (err) {
                cc.error(err);
                return;
            }
            if (cardId !== _this.cardId)
                return;
            self.cardSprite.spriteFrame = sprframe;
        });
        // let realUrl = cc.url.raw(filename);
        // let texture:cc.Texture2D = cc.textureCache.addImage(realUrl,null,null);
        // let sprframe = new cc.SpriteFrame(texture);
        // this.cardSprite.spriteFrame = sprframe;
    };
    /**
     * 加载预制
     */
    DDZCard.prototype.setCardTexture = function (cardId) {
        var self = this;
        //loadRes 加载的资源会自动缓存，第二次加载会很快
        cc.loader.loadRes("games/ddz/prefabs/card", function (err, prefab) {
            if (err) {
                cc.error(err);
                return;
            }
            self.cardPrefab = prefab;
            var node = cc.instantiate(prefab);
            node.position = cc.v2(0, 0);
            self.cardNode.addChild(node);
            self.cardBody = node.getComponent(DDZCardNode_1.default);
            self.cardBody.setCardContent(cardId);
        });
    };
    /**
     * 设置牌的内容
     * @param cardId
     */
    DDZCard.prototype.setCardContent = function (cardId) {
    };
    /**
     * 根据牌ID获取牌的资源
     * @param cardId
     */
    DDZCard.prototype.getCardAssetPath = function (cid) {
        // let point = Math.floor(cardId / 4);
        // let suits = Math.ceil(cardId % 4);
        var cardId = cid - 1;
        var point = 0;
        var suits = 0;
        if (cardId === 52 || cardId === 53) {
            point = 14;
            suits = cardId - 51;
        }
        else {
            suits = Math.floor(cardId / 13);
            point = Math.ceil(cardId % 13);
            point += 1;
            suits += 1;
        }
        // let point = Math.floor(cardId / 13);
        // let suits = Math.ceil(cardId % 13);
        var fileName = "games/ddz/texture/card/" + "card-" + point + "-" + suits;
        return fileName;
    };
    /**
     * 获取牌是否在触摸范围内
     * @param wordLocation
     */
    DDZCard.prototype.canTouched = function (wordLocation) {
        var rect = this.cardSprite.node.getBoundingBox();
        var contains = rect.contains(wordLocation);
        return contains;
    };
    /**
     * 设置牌是否选中
     * @param seleted
     */
    DDZCard.prototype.setSelected = function (seleted) {
        if (this.selected === seleted)
            return;
        this.selected = seleted;
        if (seleted)
            this.up();
        else
            this.cleanState();
    };
    /**
     * 牌是否选中
     */
    DDZCard.prototype.isSelected = function () {
        return this.selected;
    };
    /**
     * 设置牌的位置
     * @param pos
     */
    DDZCard.prototype.setPosition = function (pos) {
        this.cardNode.position = pos;
    };
    /**
     * 获取牌位置
     */
    DDZCard.prototype.getPosition = function () {
        return this.cardNode.position;
    };
    /**
     * 设置牌的原始大小
     * @param rect
     */
    DDZCard.prototype.setOriginalRect = function (rect) {
        this.originalRect = rect;
    };
    /**
     * 获取牌的原始大小
     */
    DDZCard.prototype.getOriginalRect = function () {
        return this.originalRect;
    };
    DDZCard.prototype.getRect = function () {
        var rect = this.cardSprite.node.getBoundingBox();
        return rect;
    };
    DDZCard.prototype.up = function () {
        this.cardSprite.node.runAction(cc.moveBy(0.1, cc.p(0, 30)));
    };
    /**
     * 设置牌按下
     * @param touched
     */
    DDZCard.prototype.setTouched = function (touched) {
        this.touched = touched;
        if (touched) {
            if (this.cardBody)
                this.cardBody.setGray(true);
            this.cardSprite.node.color = cc.Color.GRAY; //cc.hexToColor("#6F6969");
        }
        else {
            if (this.cardBody)
                this.cardBody.setGray(false);
            this.cardSprite.node.color = cc.Color.WHITE;
        }
    };
    DDZCard.prototype.isTouched = function () {
        return this.touched;
    };
    /**
     * 将牌附加到node中
     * @param node
     * @param order
     */
    DDZCard.prototype.attach = function (node, order) {
        if (order === void 0) { order = 0; }
        node.addChild(this.cardSprite.node, order);
    };
    /**
     * 将牌从节点中移除
     */
    DDZCard.prototype.remove = function () {
        this.cardSprite.node.removeFromParent();
    };
    /**
     * 清除牌的纹理
     */
    DDZCard.prototype.cleanTexture = function () {
        this.cardSprite.spriteFrame = null;
    };
    /**
     * 清除牌的状态
     */
    DDZCard.prototype.cleanState = function () {
        this.setSelected(false);
        this.setTouched(false);
        var pos = this.cardSprite.node.position;
        pos.y = this.originalRect.origin.y;
        this.cardSprite.node.position = pos;
    };
    /**
     * 初始化牌的精灵
     */
    DDZCard.prototype.initSprite = function () {
        this.cardNode = new cc.Node('card');
        this.cardSprite = this.cardNode.addComponent(cc.Sprite);
        this.cardSprite.sizeMode = cc.Sprite.SizeMode.CUSTOM;
        this.cardSprite.node.width = this.contentSize.x;
        this.cardSprite.node.height = this.contentSize.y;
    };
    /**
     * 重置牌
     */
    DDZCard.prototype.resetCard = function () {
        this.cardSprite.spriteFrame = null;
        this.cardId = -1;
    };
    return DDZCard;
}());
DDZCard = __decorate([
    ccclass
], DDZCard);
exports.default = DDZCard;

cc._RF.pop();
},{"./DDZCardNode":"DDZCardNode"}],"DDZChat":[function(require,module,exports){
"use strict";
cc._RF.push(module, '33139xRMT5IULCp6zhxf8R3', 'DDZChat');
// scripts/games/ddz/DDZChat.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZGameDataMgr_1 = require("./DDZGameDataMgr");
var Utils_1 = require("../../lobby/module/Utils");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZChat = (function (_super) {
    __extends(DDZChat, _super);
    function DDZChat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DDZChat.prototype.onLoad = function () {
        this.initView();
    };
    DDZChat.prototype.initView = function () {
        this.chatRoot = this.node.getChildByName("chat");
        this.chatRoot.active = false;
        var bgNode = this.chatRoot.getChildByName("bg");
        //mask
        var mask = this.chatRoot.getChildByName("mask");
        Utils_1.default.addClickEvent(mask, this.node, "DDZChat", "onBgClicked");
        this.iptChat = bgNode.getChildByName("iptChat").getComponent(cc.EditBox);
        var btnSend = bgNode.getChildByName("btn_send");
        Utils_1.default.addClickEvent(btnSend, this.node, "DDZChat", "onBtnSendChatClicked");
        this.quickChatInfo = DDZGameDataMgr_1.DDZGameDataMgr.getInstance().getChatMessageMap();
        var content = bgNode.getChildByName("quickchatlist").getChildByName("view").getChildByName("content");
        for (var i = 0; i < content.childrenCount; i++) {
            var node = content.children[i];
            Utils_1.default.addClickEvent(node, this.node, "DDZChat", "onQuickChatItemClicked");
        }
        content = bgNode.getChildByName("emojis").getChildByName("content");
        for (var i = 0; i < content.childrenCount; i++) {
            var node = content.children[i];
            Utils_1.default.addClickEvent(node, this.node, "DDZChat", "onEmojiItemClicked");
        }
    };
    DDZChat.prototype.getQuickChatInfo = function (index) {
        var key = "item" + index;
        return this.quickChatInfo[key];
    };
    DDZChat.prototype.onBtnChatClicked = function () {
        this.chatRoot.active = true;
    };
    DDZChat.prototype.onBgClicked = function () {
        this.chatRoot.active = false;
    };
    DDZChat.prototype.onQuickChatItemClicked = function (event) {
        this.chatRoot.active = false;
        var info = this.quickChatInfo[event.target.name];
        var ev = new cc.Event.EventCustom("UI_EVENT_CHAT", false);
        ev.setUserData({ msg: info.index, type: 0 });
        this.node.dispatchEvent(ev);
    };
    DDZChat.prototype.onEmojiItemClicked = function (event) {
        console.log(event.target.name);
        this.chatRoot.active = false;
        var ev = new cc.Event.EventCustom("UI_EVENT_CHAT", false);
        ev.setUserData({ msg: event.target.name, type: 1 });
        this.node.dispatchEvent(ev);
    };
    DDZChat.prototype.onBtnSendChatClicked = function () {
        this.chatRoot.active = false;
        if (this.iptChat.string == "") {
            return;
        }
        var ev = new cc.Event.EventCustom("send_chat", false);
        ev.setUserData({ msg: this.iptChat.string, type: 3 });
        this.node.dispatchEvent(ev);
        this.iptChat.string = "";
    };
    DDZChat.prototype.show = function (show) {
        this.chatRoot.active = show;
    };
    return DDZChat;
}(cc.Component));
DDZChat = __decorate([
    ccclass
], DDZChat);
exports.default = DDZChat;

cc._RF.pop();
},{"../../lobby/module/Utils":"Utils","./DDZGameDataMgr":"DDZGameDataMgr"}],"DDZCmdDef":[function(require,module,exports){
"use strict";
cc._RF.push(module, '90a58oiz6dIZK2lckBkHYB2', 'DDZCmdDef');
// scripts/games/ddz/DDZCmdDef.ts

Object.defineProperty(exports, "__esModule", { value: true });
var CMD = (function () {
    function CMD() {
    }
    return CMD;
}());
CMD.SERVER = {
    ENTER_ROOM_RESULT: "enter_room_result",
    NEW_PLAYER_ENTER: "enter_room_result_2",
    PLAYER_GET_READY: "player_ready",
    PLAYER_CANCEL_READY: "player_cancel_ready",
    GAME_START_AND_DEAL: "game_start",
    GAME_RESTART: "game_restart",
    GAME_START_LORD: "game_start_lord",
    GAME_LORD_CHANGED: "lord_info",
    GAME_LORD_RESULT: "lord_result",
    GAME_PLAY_CARDS: "play_a_card_broadcast",
    USER_OFFLINE: "user_offline",
    GAME_OVER: "game_over",
    GAME_ROUND_OVER: "game_round_over",
    GAME_CHAT: "chat",
    GAME_DISSOLVE: "do_leave_room",
    GAME_DISSOLVE_RESULT: "do_leave_room_result",
    GAME_ACHIEVEMENT: "game_achievement",
    ACHIEVEMENT_PUSH: "game_achievement_push",
};
CMD.CLIENT = {
    ENTER_ROOM: "enter_room",
    GET_READY: "get_ready",
    CANCEL_READY: "cancel_ready",
    GRAB_LANDLORD: "lord_info",
    PLAY_CARD: "play_a_card",
    CHAT: "chat",
    DISSOLVE: "do_leave_room",
    ACHIEVEMENT_PULL: "game_achievement_pull",
};
exports.default = CMD;

cc._RF.pop();
},{}],"DDZDebugNode":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'a3536zUT91JMadbKlDxXItf', 'DDZDebugNode');
// scripts/games/ddz/DDZDebugNode.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZDebugNode = (function (_super) {
    __extends(DDZDebugNode, _super);
    function DDZDebugNode() {
        return _super.call(this) || this;
    }
    return DDZDebugNode;
}(cc.Graphics));
DDZDebugNode = __decorate([
    ccclass
], DDZDebugNode);
exports.default = DDZDebugNode;

cc._RF.pop();
},{}],"DDZDissolve":[function(require,module,exports){
"use strict";
cc._RF.push(module, '50f07PpNRxLQ6VwZqrGltys', 'DDZDissolve');
// scripts/games/ddz/DDZDissolve.ts

Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = require("../../lobby/module/Utils");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZDissolve = (function (_super) {
    __extends(DDZDissolve, _super);
    function DDZDissolve() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.items = [];
        _this.btns = [];
        return _this;
    }
    DDZDissolve.prototype.onLoad = function () {
        var bg = this.node.getChildByName("bg");
        this.items = bg.getComponentsInChildren(cc.RichText);
        this.btns = bg.getComponentsInChildren(cc.Button);
        for (var _i = 0, _a = this.btns; _i < _a.length; _i++) {
            var btn = _a[_i];
            Utils_1.default.addClickEvent(btn.node, this.node, "DDZDissolve", "onBtnClicked");
        }
    };
    /**
     * 显示
     * @param seats
     */
    DDZDissolve.prototype.show = function (seats) {
        this.node.active = true;
        this.hiddenItems();
        for (var _i = 0, seats_1 = seats; _i < seats_1.length; _i++) {
            var seat = seats_1[_i];
            this.updateItem(seat.nickname, -1, seat.seatId);
        }
    };
    DDZDissolve.prototype.disEnableButtons = function () {
        for (var _i = 0, _a = this.btns; _i < _a.length; _i++) {
            var btn = _a[_i];
            btn.interactable = false;
        }
    };
    /**
     * 隐藏
     */
    DDZDissolve.prototype.hidden = function () {
        this.node.active = false;
        this.hiddenItems();
    };
    /**
     * 隐藏
     */
    DDZDissolve.prototype.hiddenItems = function () {
        for (var i = 0; i < this.items.length; i++) {
            var label = this.items[i];
            if (label)
                label.node.active = false;
        }
    };
    /**
     * 点击
     * @param event
     */
    DDZDissolve.prototype.onBtnClicked = function (event) {
        this.disEnableButtons();
        if (event.target.name === "btn_dissolve_yes") {
            console.log("点击同意" + this.node);
            this.node.parent.dispatchEvent(new cc.Event.EventCustom("UI_EVENT_DISSOLVE_YES", false));
        }
        else {
            console.log("点击拒绝");
            this.node.parent.dispatchEvent(new cc.Event.EventCustom("UI_EVENT_DISSOLVE_NO", false));
        }
    };
    /**
     * 更新Item
     * @param nicknamme
     * @param agree
     * @param idx
     */
    DDZDissolve.prototype.updateItem = function (nicknamme, agree, idx) {
        if (nicknamme === void 0) { nicknamme = ""; }
        if (agree === void 0) { agree = -1; }
        if (idx === void 0) { idx = 0; }
        if (idx < 0 || idx > 2)
            return;
        var itemLabel = this.items[idx];
        itemLabel.node.active = true;
        var str = "等待投票";
        if (agree === 0)
            str = "不同意";
        else if (agree === 1)
            str = "同意";
        itemLabel.string = nicknamme + ":" + str;
    };
    return DDZDissolve;
}(cc.Component));
DDZDissolve = __decorate([
    ccclass
], DDZDissolve);
exports.default = DDZDissolve;

cc._RF.pop();
},{"../../lobby/module/Utils":"Utils"}],"DDZGameAnimator":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'c98b4djNJ9DhKoFJARxUZwW', 'DDZGameAnimator');
// scripts/games/ddz/DDZGameAnimator.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZGameDataMgr_1 = require("./DDZGameDataMgr");
var DDZTypes_1 = require("./DDZTypes");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZGameAnimator = (function (_super) {
    __extends(DDZGameAnimator, _super);
    function DDZGameAnimator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DDZGameAnimator.prototype.onLoad = function () {
        this.initAnimations();
    };
    /**
     * 初始化动画
     */
    DDZGameAnimator.prototype.initAnimations = function () {
        this.animations = {};
        var animations = this.node.getChildByName("animations").getComponentsInChildren(dragonBones.ArmatureDisplay);
        for (var i = 0; i < animations.length; i++) {
            var da = animations[i];
            var key = da.node.name;
            this.animations[key] = da;
            da.node.active = false;
            da.enabled = false;
        }
    };
    /**
     * 停止所有动画
     */
    DDZGameAnimator.prototype.stopAllAnimations = function () {
        for (var key in this.animations) {
            var da = this.animations[key];
            da.node.active = false;
            da.enabled = false;
        }
    };
    /**
     * 播放动画
     * @param da
     * @param aniname
     */
    DDZGameAnimator.prototype.playAnimation = function (da, aniname) {
        this.stopAllAnimations();
        if (!da)
            return;
        da.node.active = true;
        da.enabled = true;
        da.playAnimation(aniname, 1);
    };
    /**
     * 播放王炸
     */
    DDZGameAnimator.prototype.playWangZha = function () {
        var wangzha = this.animations["wangzha"];
        this.playAnimation(wangzha, "Ani_rocket");
    };
    /**
     * 播放炸弹
     */
    DDZGameAnimator.prototype.playZhadan = function (seatId) {
        var _this = this;
        if (seatId === null || seatId === undefined || seatId < 0 || seatId > 2)
            return;
        var gameMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var localSeatId = gameMgr.getLocalIndex(seatId);
        var zhadan = this.animations["zhadan"];
        this.playAnimation(zhadan, "Ani_boom_" + localSeatId);
        var self = this;
        this.scheduleOnce(function () {
            _this.playAnimation(zhadan, "Ani_boom");
        }, 0.6);
    };
    /**
     * 播放顺子
     */
    DDZGameAnimator.prototype.playShunzi = function (seatId) {
        if (seatId === null || seatId === undefined || seatId < 0 || seatId > 2)
            return;
        var gameMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var localSeatId = gameMgr.getLocalIndex(seatId);
        var aniname = "Ani_sz_";
        if (localSeatId === 1)
            aniname += 1;
        else
            aniname += 0;
        var y = 0;
        if (localSeatId === 0)
            y = -180;
        else
            y = 180;
        var shunzi = this.animations["shunzi"];
        shunzi.node.y = y;
        this.playAnimation(shunzi, aniname);
    };
    /**
     * 播放飞机
     */
    DDZGameAnimator.prototype.playFeiji = function () {
        var feiji = this.animations["feiji"];
        this.playAnimation(feiji, "Ani_plan");
    };
    /**
     * 连队
     */
    DDZGameAnimator.prototype.playLianDui = function () {
        var liandui = this.animations["liandui"];
        this.playAnimation(liandui, "Ani_ld");
    };
    /**
     * 春天
     */
    DDZGameAnimator.prototype.playChunTian = function () {
        var chuntian = this.animations["chuntian"];
        this.playAnimation(chuntian, "Ani_spring");
    };
    /**
     * 反春
     */
    DDZGameAnimator.prototype.playFanChun = function () {
        var fanchun = this.animations["fanchun"];
        this.playAnimation(fanchun, "Ani_play_all");
    };
    DDZGameAnimator.prototype.playJingBaoForevery = function () {
    };
    /**
     * 播放牌型动画
     * @param type
     * @param seatId
     */
    DDZGameAnimator.prototype.playCardsTypeAnimation = function (type, seatId) {
        switch (type) {
            case DDZTypes_1.CardType.WANGZHA:
                this.playWangZha();
                break;
            case DDZTypes_1.CardType.ZHADAN:
                this.playZhadan(seatId);
                break;
            case DDZTypes_1.CardType.SHUNZI:
                this.playShunzi(seatId);
                break;
            case DDZTypes_1.CardType.LIANDUI:
                this.playLianDui();
                break;
            case DDZTypes_1.CardType.FEIJI:
            case DDZTypes_1.CardType.FEIJIDAIDAN:
            case DDZTypes_1.CardType.FEIJIDAIDUI:
                this.playFeiji();
                break;
            case DDZTypes_1.CardType.LIANDUI:
                this.playLianDui();
                break;
        }
    };
    return DDZGameAnimator;
}(cc.Component));
DDZGameAnimator = __decorate([
    ccclass
], DDZGameAnimator);
exports.default = DDZGameAnimator;

cc._RF.pop();
},{"./DDZGameDataMgr":"DDZGameDataMgr","./DDZTypes":"DDZTypes"}],"DDZGameDataMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, '3c29adaOsRJzZ+y2+JgE4Fo', 'DDZGameDataMgr');
// scripts/games/ddz/DDZGameDataMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZPlayersMgr_1 = require("./DDZPlayersMgr");
var DDZGameNetMgr_1 = require("./DDZGameNetMgr");
var UserMgr_1 = require("../../lobby/UserMgr");
var Utils_1 = require("../../lobby/module/Utils");
var DDZSeat_1 = require("./DDZSeat");
var DDZRoomInfo_1 = require("./DDZRoomInfo");
var DDZAssetsMgr_1 = require("./DDZAssetsMgr");
var DDZAudioMgr_1 = require("./DDZAudioMgr");
function isLegalSeatId(seatId) {
    return seatId >= 0 && seatId <= 2;
}
exports.isLegalSeatId = isLegalSeatId;
var DDZGameDataMgr = (function () {
    function DDZGameDataMgr() {
        this.init();
    }
    DDZGameDataMgr.getInstance = function () {
        if (!this.instance)
            this.instance = new DDZGameDataMgr();
        return this.instance;
    };
    DDZGameDataMgr.prototype.init = function () {
        this.gameNetMgr = new DDZGameNetMgr_1.default();
        this.roomInfo = new DDZRoomInfo_1.default();
        this.assetsMgr = new DDZAssetsMgr_1.default();
        this.audioMgr = new DDZAudioMgr_1.default();
        this.playerMgr = new DDZPlayersMgr_1.default();
        //load cache
        this.assetsMgr.asyncPreLoadDDZAllAssets();
    };
    /**
     * 清除上一局数据
     */
    DDZGameDataMgr.prototype.cleanPreGameData = function () {
        this.roomInfo.cleanRoundGameData();
        this.setNextOperationSeatId(null);
    };
    /**
     * 设置下一个操作玩家
     * @param seatId
     */
    DDZGameDataMgr.prototype.setNextOperationSeatId = function (seatId) {
        this.nextOperationSeatId = seatId;
        this.playerMgr.setNextOperationSeatId(seatId);
    };
    /**
     * 设置用户管理
     * @param playMgr
     */
    DDZGameDataMgr.prototype.setPlayerMgr = function (playMgr) {
        this.playerMgr = playMgr;
    };
    /**
     * 获取房间信息
     */
    DDZGameDataMgr.prototype.getRoomInfo = function () {
        return this.roomInfo;
    };
    /**
     * 设置房间信息
     * @param roomRes
     */
    DDZGameDataMgr.prototype.setRoomInfo = function (roomRes) {
        if (!roomRes)
            return;
        var myUid = UserMgr_1.default.getInstance().uid;
        var room = roomRes.data;
        var roomInfo = this.getRoomInfo();
        roomInfo.roomNum = room.roomNum;
        roomInfo.maxRound = room.maxRound;
        roomInfo.currentRound = room.currentRound;
        roomInfo.maxMultiple = room.maxMultiple;
        roomInfo.baseScore = room.baseScore;
        roomInfo.gamestate = room.status;
        //地主信息
        roomInfo.landlorderInfo.lordSeatId = room.lordSeatId;
        roomInfo.landlorderInfo.lordCards = room.lordCards;
        this.setNextOperationSeatId(room.nextSeatId);
        this.roomInfo.myCards = room.myCards;
        //已经抢过地主的信息
        this.roomInfo.grabLanlord = room.doLordInfo;
        if (!Utils_1.isNull(room.seats) && room.seats.length > 0) {
            for (var _i = 0, _a = room.seats; _i < _a.length; _i++) {
                var seatData = _a[_i];
                var uid = seatData.uid;
                var seat = new DDZSeat_1.default(seatData);
                //是我
                if (myUid === uid) {
                    this.roomInfo.setMySeat(seat);
                }
                //设置seat
                this.roomInfo.setSeat(seat.seatId, seat);
            }
            //根据我的位置 更新其他玩家的本地位置ID
            this.updateLocalSeatId();
        }
    };
    /**
     * 更新玩家本地位置
     */
    DDZGameDataMgr.prototype.updateLocalSeatId = function () {
        for (var seatId in this.roomInfo.getSeats()) {
            var seat = this.roomInfo.getSeat(seatId);
            seat.localSeatIdx = this.getLocalIndex(seat.seatId);
        }
    };
    /**
     * 获取下一个位置
     * @param currentSeat
     */
    DDZGameDataMgr.prototype.getNextSeatId = function (currentSeat) {
        return currentSeat === 2 ? 0 : currentSeat + 1;
    };
    /**
     * 获取上一个位置
     * @param currentSeat
     */
    DDZGameDataMgr.prototype.getPreSeatIdByCurrent = function (currentSeat) {
        return currentSeat === 0 ? 2 : currentSeat - 1;
    };
    /**
     * 转换本地位置
     * @param seatIndex
     */
    DDZGameDataMgr.prototype.getLocalIndex = function (seatIndex) {
        var seat = this.roomInfo.getMySeat();
        var mySeatId = seat.seatId;
        var localIdx = (seatIndex - mySeatId + 3) % 3;
        return localIdx;
    };
    /**
     * 当前是否是该我操作
     */
    DDZGameDataMgr.prototype.isMyTurn = function () {
        var mySeatId = this.roomInfo.getMySeat().seatId;
        return mySeatId === this.nextOperationSeatId;
    };
    /**
     * 连接服务
     * @param gameData 游戏房间数据
     * @param token Token
     * @param nick 昵称
     * @param avatar 头像
     */
    DDZGameDataMgr.prototype.connectGameServer = function (gameData, token, nick, avatar) {
        cc.log("connectGameServer");
        this.gameNetMgr.connectServer(gameData.ip, gameData.port, token, gameData.room_number, nick, avatar, function (res) {
            if (res) {
                cc.director.loadScene("ddzgame");
            }
        });
    };
    /**
     * 异步加载游戏场景需要的资源
     * @param onProgress 进度回掉
     */
    DDZGameDataMgr.prototype.loadSceneAssets = function (onProgress) {
        cc.loader.loadResDir('games/ddz', onProgress, function (err, assets) {
            cc.log("斗地主资源加载完成");
        });
    };
    /**
     * 释放游戏场景资源
     */
    DDZGameDataMgr.prototype.unLoadSceneAssets = function () {
        cc.loader.releaseResDir("games/ddz");
    };
    /**
     * 获取聊天信息
     */
    DDZGameDataMgr.prototype.getChatMessageMap = function () {
        var chatmsg = {};
        chatmsg["item0"] = { index: 0, content: "快点啊，都等到我花儿都谢了！", sound: "fix_msg_1" };
        chatmsg["item1"] = { index: 1, content: "怎么又断线了，网络怎么这么差啊！", sound: "fix_msg_2" };
        chatmsg["item2"] = { index: 2, content: "不要走，决战到天亮！", sound: "fix_msg_3" };
        chatmsg["item3"] = { index: 3, content: "你的牌打得也太好了！", sound: "fix_msg_4" };
        chatmsg["item4"] = { index: 4, content: "你是妹妹还是哥哥啊？", sound: "fix_msg_5" };
        chatmsg["item5"] = { index: 5, content: "和你合作真是太愉快了！", sound: "fix_msg_6" };
        chatmsg["item6"] = { index: 6, content: "大家好，很高兴见到各位！", sound: "fix_msg_7" };
        chatmsg["item7"] = { index: 7, content: "各位，真是不好意思，我得离开一会儿。", sound: "fix_msg_8" };
        chatmsg["item8"] = { index: 8, content: "不要吵了，专心玩游戏吧！", sound: "fix_msg_9" };
        return chatmsg;
    };
    /**
     * 获取聊天消息
     * @param id 聊天iD
     */
    DDZGameDataMgr.prototype.getChatMessageById = function (id) {
        return this.getChatMessageMap()["item" + id];
    };
    return DDZGameDataMgr;
}());
exports.DDZGameDataMgr = DDZGameDataMgr;

cc._RF.pop();
},{"../../lobby/UserMgr":"UserMgr","../../lobby/module/Utils":"Utils","./DDZAssetsMgr":"DDZAssetsMgr","./DDZAudioMgr":"DDZAudioMgr","./DDZGameNetMgr":"DDZGameNetMgr","./DDZPlayersMgr":"DDZPlayersMgr","./DDZRoomInfo":"DDZRoomInfo","./DDZSeat":"DDZSeat"}],"DDZGameNetMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'c28e1yf0JVCFoRJLiqa0wGN', 'DDZGameNetMgr');
// scripts/games/ddz/DDZGameNetMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZGameDataMgr_1 = require("./DDZGameDataMgr");
var Net_1 = require("../../lobby/module/Net");
var Utils_1 = require("../../lobby/module/Utils");
var UserMgr_1 = require("../../lobby/UserMgr");
var DDZCmdDef_1 = require("./DDZCmdDef");
var DDZGameNetMgr = (function () {
    /**
     * Constructor
     */
    function DDZGameNetMgr() {
        /**
         * Net Module
         */
        this.net = new Net_1.default();
        /**
         * Net Protocol
         */
        this.delegate = null;
        this.initNetEventHandlers();
    }
    /**
     * Set Delegate
     * @param delegate
     */
    DDZGameNetMgr.prototype.setDelegate = function (delegate) {
        this.delegate = delegate;
    };
    /**
     * 连接服务
     * @param ip
     * @param port
     * @param token
     * @param roomId
     * @param nick
     * @param avatar
     * @param cb
     */
    DDZGameNetMgr.prototype.connectServer = function (ip, port, token, roomId, nick, avatar, cb) {
        this.onConnectCallBack = cb;
        var url = ip + ':' + port;
        var self = this;
        console.log("开始连接服务...：" + url);
        this.net.connect(url, function (res) {
            console.log("=============服务器连接成功=============");
            console.log("发送登录消息...");
            var uid = UserMgr_1.default.getInstance().getUser().uid;
            var req = { roomNum: roomId, nickname: nick, avatar: avatar, token: token, uid: uid };
            console.log("==========================================");
            console.log("登录信息：" + JSON.stringify(req));
            console.log("==========================================");
            self.net.send(DDZCmdDef_1.default.CLIENT.ENTER_ROOM, req);
        });
    };
    /**
     * 注册通知
     * @param node
     */
    DDZGameNetMgr.prototype.registNotification = function (node) {
        this.dispatchNode = node;
    };
    /**
     * 推送通知
     * @param eventStr
     * @param data
     */
    DDZGameNetMgr.prototype.pushNotification = function (eventStr, data) {
        if (data === void 0) { data = null; }
        var ev = new cc.Event.EventCustom(eventStr, false);
        ev.setUserData(data);
        if (this.dispatchNode)
            this.dispatchNode.dispatchEvent(ev);
    };
    /**
     * 检查数据是否合法
     * @param res
     */
    DDZGameNetMgr.prototype.checkLegal = function (res) {
        return (!Utils_1.isNull(res) && res.status === 0);
    };
    /**
     * 发送准备消息
     * @param isReady
     */
    DDZGameNetMgr.prototype.ready = function (isReady) {
        console.log("=================发送准备：" + isReady + "==================");
        if (isReady)
            this.net.send(DDZCmdDef_1.default.CLIENT.GET_READY);
        else
            this.net.send(DDZCmdDef_1.default.CLIENT.CANCEL_READY);
    };
    /**
     * 发送抢地主
     * @param is
     */
    DDZGameNetMgr.prototype.grabLandlord = function (grab) {
        console.log("=================发送抢地主：" + grab + "==================");
        this.net.send(DDZCmdDef_1.default.CLIENT.GRAB_LANDLORD, { isLord: grab ? "1" : "0" });
    };
    /**
     * 发送出牌
     * @param cards
     * @param type
     */
    DDZGameNetMgr.prototype.playCards = function (cards, type) {
        if (cards === void 0) { cards = []; }
        if (type === void 0) { type = 0; }
        console.log("=======================================");
        console.log("我出牌：" + cards + "  类型：" + type);
        console.log("=======================================");
        this.net.send(DDZCmdDef_1.default.CLIENT.PLAY_CARD, { cards: cards, type: type });
    };
    /**
     * 发送聊天
     * @param msg
     * @param type
     */
    DDZGameNetMgr.prototype.chat = function (msg, type) {
        console.log("=================发送聊天：" + msg + "==================");
        this.net.send(DDZCmdDef_1.default.CLIENT.CHAT, { msg: msg, type: type });
    };
    /**
     * 发送解散
     * @param agree
     */
    DDZGameNetMgr.prototype.dissolve = function (agree) {
        console.log("=================发起解散：" + agree + "==================");
        this.net.send(DDZCmdDef_1.default.CLIENT.DISSOLVE, { agree: agree ? 1 : 0 });
    };
    /**
     * 发送产看战绩
     */
    DDZGameNetMgr.prototype.pullAchievement = function () {
        console.log("=================发送查看战绩==================");
        this.net.send(DDZCmdDef_1.default.CLIENT.ACHIEVEMENT_PULL);
    };
    /**
     * 初始化事件
     */
    DDZGameNetMgr.prototype.initNetEventHandlers = function () {
        var self = this;
        //进入房间 返回房间信息，同步房间信息
        this.net.addHandler(DDZCmdDef_1.default.SERVER.ENTER_ROOM_RESULT, function (res) {
            do {
                console.log("======================================");
                console.log("登陆结果: " + JSON.stringify(res));
                console.log("======================================");
                if (!self.checkLegal(res)) {
                    self.onConnectCallBack(null);
                    break;
                }
                var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
                //设置房间信息
                gameData.setRoomInfo(res);
                //回调
                self.onConnectCallBack(res);
                //回调
                if (self.delegate) {
                    self.delegate.onEnterRoomResultCallBack();
                }
                //回调
                self.pushNotification("SERVER_ENTER_ROOM");
            } while (false);
        });
        //新用户进入房间 更新用户信息
        this.net.addHandler(DDZCmdDef_1.default.SERVER.NEW_PLAYER_ENTER, function (res) {
            do {
                console.log("======================================");
                console.log("新用户到达: " + JSON.stringify(res));
                console.log("======================================");
                if (!self.checkLegal(res))
                    break;
                var seatData = res.data;
                var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
                var roomInfo = gameData.getRoomInfo();
                //更新或插入玩家
                roomInfo.updateOrInsertSeat(seatData);
                //更新玩家本地位置
                gameData.updateLocalSeatId();
                if (self.delegate) {
                    self.delegate.onNewPlayerEnterRoomCallBack();
                }
                self.pushNotification("SERVER_NEW_USER");
            } while (false);
        });
        //用户准备
        this.net.addHandler(DDZCmdDef_1.default.SERVER.PLAYER_GET_READY, function (res) {
            do {
                if (res.status !== 0)
                    break;
                console.log("===================================");
                console.log("用户准备: " + JSON.stringify(res));
                console.log("===================================");
                if (!self.checkLegal(res))
                    break;
                var ready = res.data;
                if (Utils_1.isNull(ready.seatId))
                    break;
                var roomInfo = DDZGameDataMgr_1.DDZGameDataMgr.getInstance().getRoomInfo();
                var seat = roomInfo.getSeat(ready.seatId);
                seat.ready = 1;
                if (self.delegate) {
                    self.delegate.onPlayerReadyStateChangedCallBack(seat);
                }
                self.pushNotification("SERVER_USER_READY", seat);
            } while (false);
        });
        //取消准备
        this.net.addHandler(DDZCmdDef_1.default.SERVER.PLAYER_CANCEL_READY, function (res) {
            do {
                if (res.status !== 0)
                    break;
                console.log("===================================");
                console.log("用户取消准备: " + res);
                console.log("===================================");
                if (!self.checkLegal(res))
                    break;
                var ready = res.data;
                if (Utils_1.isNull(ready.seatId))
                    break;
                var roomInfo = DDZGameDataMgr_1.DDZGameDataMgr.getInstance().getRoomInfo();
                var seat = roomInfo.getSeat(ready.seatId);
                seat.ready = 0;
                if (self.delegate) {
                    self.delegate.onPlayerReadyStateChangedCallBack(seat);
                }
                self.pushNotification("SERVER_USER_READY", seat);
            } while (false);
        });
        //游戏开始 发牌
        this.net.addHandler(DDZCmdDef_1.default.SERVER.GAME_START_AND_DEAL, function (res) {
            do {
                console.log("===================================");
                console.log("游戏开始，发牌: " + JSON.stringify(res));
                console.log("===================================");
                if (!self.checkLegal(res))
                    break;
                var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
                var roomInfo = gameData.getRoomInfo();
                var data = res.data;
                gameData.setNextOperationSeatId(data.lordSeatId);
                //我的牌
                roomInfo.myCards = data.cards;
                if (self.delegate) {
                    self.delegate.onGameStartAndDealCardsCallBack();
                }
                self.pushNotification("SERVER_DEAL_CARDS");
            } while (false);
        });
        //游戏重新开始
        this.net.addHandler(DDZCmdDef_1.default.SERVER.GAME_RESTART, function (res) {
            console.log("===================================");
            console.log("游戏重新开始，发牌: ");
            console.log("===================================");
            if (!self.checkLegal(res))
                return;
            if (self.delegate) {
                self.delegate.onGameReStartCallBack();
            }
            self.pushNotification("SERVER_GAME_START");
        });
        //通知抢地主
        this.net.addHandler(DDZCmdDef_1.default.SERVER.GAME_START_LORD, function (res) {
            console.log("===================================");
            console.log("开始抢地主: ");
            console.log("===================================");
            if (!self.checkLegal(res))
                return;
            if (self.delegate) {
                self.delegate.onPlayerGrabLandlordStartCallBack();
            }
            self.pushNotification("SERVER_LORD_START");
        });
        //有人抢地主通知
        this.net.addHandler(DDZCmdDef_1.default.SERVER.GAME_LORD_CHANGED, function (res) {
            console.log("===================================");
            console.log("有人抢地主: " + JSON.stringify(res));
            console.log("===================================");
            if (!self.checkLegal(res))
                return;
            var lordData = res.data;
            var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
            var roomInfo = gameData.getRoomInfo();
            gameData.setNextOperationSeatId(lordData.nextSeatId);
            var grabInfo = { lordSeatId: lordData.lordSeatId, isLord: lordData.isLord };
            if (!roomInfo.grabLanlord)
                roomInfo.grabLanlord = [];
            roomInfo.grabLanlord.push(grabInfo);
            if (self.delegate) {
                self.delegate.onPlayerGrabLandlordChangedCallBack();
            }
            self.pushNotification("SERVER_CHANGE_LORD");
        });
        //抢地主结果
        this.net.addHandler(DDZCmdDef_1.default.SERVER.GAME_LORD_RESULT, function (res) {
            console.log("===================================");
            console.log("抢地主结果: " + JSON.stringify(res));
            console.log("===================================");
            if (!self.checkLegal(res))
                return;
            var lordresult = res.data;
            var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
            var roomInfo = gameData.getRoomInfo();
            gameData.setNextOperationSeatId(lordresult.nextSeatId);
            roomInfo.landlorderInfo.lordSeatId = lordresult.lordSeatId;
            roomInfo.landlorderInfo.lordCards = lordresult.cards;
            roomInfo.curMultiple = lordresult.multiple;
            if (self.delegate) {
                self.delegate.onPlayerGrabLandlordResultCallBack();
            }
            self.pushNotification("SERVER_LORD_RESULT");
        });
        //玩家出牌, 1 设置出牌玩家的牌，数量，出牌特效，出牌音效。 2.检查下一个玩家是否是我，是我现实出牌框
        this.net.addHandler(DDZCmdDef_1.default.SERVER.GAME_PLAY_CARDS, function (res) {
            console.log("===================================");
            console.log("有玩家出牌: " + JSON.stringify(res));
            console.log("===================================");
            if (!self.checkLegal(res))
                return;
            var data = res.data;
            var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
            var roomInfo = gameData.getRoomInfo();
            //更新下一个玩家
            gameData.setNextOperationSeatId(data.nextSeatId);
            //更新玩家出的牌
            var seat = roomInfo.getSeat(data.seatId);
            //牌
            seat.playedCards = data.cards;
            //牌类型
            seat.playedCardsType = data.type;
            //推送消息
            if (self.delegate) {
                self.delegate.onPlayerPlayedCardsCallBack();
            }
            self.pushNotification("SERVER_PLAY_CARDS");
        });
        //用户断线
        this.net.addHandler(DDZCmdDef_1.default.SERVER.USER_OFFLINE, function (res) {
            console.log("===================================");
            console.log("用户断线: " + JSON.stringify(res));
            console.log("===================================");
            if (!self.checkLegal(res))
                return;
            var seatId = res.data;
            var roomInfo = DDZGameDataMgr_1.DDZGameDataMgr.getInstance().getRoomInfo();
            var seat = roomInfo.getSeat(seatId);
            seat.online = 0;
            if (self.delegate) {
                self.delegate.onPlayerOfflineCallBack();
            }
            self.pushNotification("SERVER_STATE_CHANGED");
        });
        //全局结束
        this.net.addHandler(DDZCmdDef_1.default.SERVER.GAME_OVER, function (res) {
            console.log("===================================");
            console.log("游戏结束: " + JSON.stringify(res));
            console.log("===================================");
            if (!self.checkLegal(res))
                return;
            var data = res.data;
            var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
            var roomInfo = gameData.roomInfo;
            roomInfo.gameOverDatas = data;
            if (self.delegate) {
                self.delegate.onGameOverCallBack(data);
            }
            self.pushNotification("SERVER_GAME_OVER");
        });
        //单局结束
        this.net.addHandler(DDZCmdDef_1.default.SERVER.GAME_ROUND_OVER, function (res) {
            console.log("===================================");
            console.log("单局结束: " + JSON.stringify(res));
            console.log("===================================");
            if (!self.checkLegal(res))
                return;
            var data = res.data;
            var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
            var roomInfo = gameData.roomInfo;
            roomInfo.gameRoundDatas.push(data);
            if (self.delegate) {
                self.delegate.onGameResultCallBack(data);
            }
            self.pushNotification("SERVER_ROUND_RESULT");
        });
        //聊天
        this.net.addHandler(DDZCmdDef_1.default.SERVER.GAME_CHAT, function (res) {
            console.log("===================================");
            console.log("用户聊天: " + JSON.stringify(res));
            console.log("===================================");
            if (!self.checkLegal(res))
                return;
            if (self.delegate) {
                self.delegate.onPlayerChatCallBack(res.data);
            }
            self.pushNotification("SERVER_CHAT", res.data);
        });
        //解散广播
        this.net.addHandler(DDZCmdDef_1.default.SERVER.GAME_DISSOLVE, function (res) {
            console.log("===================================");
            console.log("有人发起解散: " + JSON.stringify(res));
            console.log("===================================");
            if (!self.checkLegal(res))
                return;
            var data = res.data;
            if (self.delegate) {
                self.delegate.onDissolveChangedCallBack(data);
            }
            self.pushNotification("SERVER_DISSOLVE_CHANGED", data);
        });
        //解散结果
        this.net.addHandler(DDZCmdDef_1.default.SERVER.GAME_DISSOLVE_RESULT, function (res) {
            console.log("===================================");
            console.log("解散结果: " + JSON.stringify(res));
            console.log("===================================");
            if (!self.checkLegal(res))
                return;
            var data = res.data;
            if (self.delegate) {
                self.delegate.onDissolveResultCallBack(data);
            }
            self.pushNotification("SERVER_DISSOLVE_RESULT", data);
        });
        //战绩查看
        this.net.addHandler(DDZCmdDef_1.default.SERVER.ACHIEVEMENT_PUSH, function (res) {
            console.log("===================================");
            console.log("查看战绩: " + JSON.stringify(res));
            console.log("===================================");
            if (!self.checkLegal(res))
                return;
            var data = res.data;
            if (self.delegate) {
                self.delegate.onAchievementCallBack(data);
            }
        });
    };
    return DDZGameNetMgr;
}());
exports.default = DDZGameNetMgr;

cc._RF.pop();
},{"../../lobby/UserMgr":"UserMgr","../../lobby/module/Net":"Net","../../lobby/module/Utils":"Utils","./DDZCmdDef":"DDZCmdDef","./DDZGameDataMgr":"DDZGameDataMgr"}],"DDZGameOver":[function(require,module,exports){
"use strict";
cc._RF.push(module, '93d06PxoUBKKrgKUr5WIE92', 'DDZGameOver');
// scripts/games/ddz/DDZGameOver.ts

Object.defineProperty(exports, "__esModule", { value: true });
var ImgLoader_1 = require("../../lobby/components/ImgLoader");
var DDZGameDataMgr_1 = require("./DDZGameDataMgr");
var Utils_1 = require("../../lobby/module/Utils");
var DDZGameOverItem = (function () {
    function DDZGameOverItem(node) {
        this.init(node);
    }
    DDZGameOverItem.prototype.init = function (node) {
        var t1Node = node.getChildByName("t1");
        this.flagSprite = t1Node.getChildByName("flag").getComponent(cc.Sprite);
        this.avatarLoder = t1Node.getChildByName("avatar").getChildByName("mask").getChildByName("img").getComponent(ImgLoader_1.default);
        this.nicknameLabel = t1Node.getChildByName("nickname").getComponent(cc.Label);
        this.idLabel = t1Node.getChildByName("id").getComponent(cc.Label);
        this.t2Label = node.getChildByName("t2").getComponent(cc.Label);
        this.t3Label = node.getChildByName("t3").getComponent(cc.Label);
        this.t4Label = node.getChildByName("t4").getComponent(cc.Label);
        this.t5Label = node.getChildByName("t5").getComponent(cc.Label);
    };
    DDZGameOverItem.prototype.setFontColor = function (hex) {
        var color = cc.hexToColor(hex);
        this.nicknameLabel.node.color = color;
        this.idLabel.node.color = color;
        this.t2Label.node.color = color;
        this.t3Label.node.color = color;
        this.t4Label.node.color = color;
        this.t5Label.node.color = color;
    };
    DDZGameOverItem.prototype.setData = function (avatar, nickname, idStr, t1, t2, t3, t4, ranking) {
        if (ranking === void 0) { ranking = 1; }
        this.avatarLoder.setupWithUrl(avatar);
        this.nicknameLabel.string = nickname;
        this.idLabel.string = idStr;
        this.t2Label.string = t1;
        this.t3Label.string = t2;
        this.t4Label.string = t3;
        this.t5Label.string = t4;
        this.flagSprite.node.active = true;
        if (ranking < 1 && ranking > 3)
            return;
        var sprArr = ["result_flag_1", "result_flag_2", "result_flag_3"];
        var self = this;
        cc.loader.loadRes("resources/games/ddz/texture/" + sprArr[ranking], cc.SpriteFrame, function (err, spr) {
            if (err) {
                cc.error(err);
                return;
            }
            self.flagSprite.spriteFrame = spr;
        });
    };
    return DDZGameOverItem;
}());
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZGameOver = (function (_super) {
    __extends(DDZGameOver, _super);
    function DDZGameOver() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.items = [];
        return _this;
    }
    DDZGameOver.prototype.onLoad = function () {
        this.gameOverNode = this.node.getChildByName("game_over");
        var pop = this.gameOverNode.getChildByName("bg").getChildByName("pop");
        this.contentNode = pop.getChildByName("content");
        for (var i = 0; i < 3; i++) {
            var itemNode = this.contentNode.getChildByName("item" + i);
            var item = new DDZGameOverItem(itemNode);
            this.items.push(item);
        }
        var btn_result_again = pop.getChildByName("btn_result_again");
        var btn_result_share = pop.getChildByName("btn_result_share");
        Utils_1.default.addClickEvent(btn_result_again, this.node, "DDZGameOver", "onBtnClicked");
        Utils_1.default.addClickEvent(btn_result_share, this.node, "DDZGameOver", "onBtnClicked");
    };
    DDZGameOver.prototype.onBtnClicked = function () {
        this.show(false);
    };
    DDZGameOver.prototype.show = function (isShow) {
        this.gameOverNode.active = isShow;
    };
    DDZGameOver.prototype.setupData = function (data) {
        var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var mySeatId = gameData.roomInfo.getMySeat().seatId;
        var lordSeatId = gameData.roomInfo.landlorderInfo.lordSeatId;
        var item = this.items[i];
        var resultData = data;
        var datas = [];
        for (var i = 0; i < 3; i++) {
            var itemData = resultData["" + i];
            itemData.seatId = i;
            datas.push(itemData);
        }
        datas.sort(function (a, b) {
            return a.score - b.score;
        });
        for (var _i = 0; _i < 3; _i++) {
            var itemData = datas[_i];
            var seatId = itemData.seatId;
            var seat = gameData.roomInfo.getSeat(seatId);
            var item_1 = this.items[_i];
            var multiple = gameData.roomInfo.curMultiple;
            var baseScore = gameData.roomInfo.baseScore;
            var totalGameNum = gameData.roomInfo.maxRound;
            var winNum = itemData.winNum;
            var loseNum = totalGameNum - winNum;
            var score = itemData.score;
            var isLord = _i === lordSeatId;
            if (isLord)
                multiple *= 2;
            item_1.setData(seat.avatar, seat.nickname, "" + seat.uid, "" + itemData.maxScore, "" + itemData.bombNum, "" + winNum + "赢" + loseNum + "输", "" + score, _i);
            if (seat.seatId === mySeatId) {
                item_1.setFontColor("#f0d108");
            }
            else {
                item_1.setFontColor("#ffffff");
            }
        }
    };
    return DDZGameOver;
}(cc.Component));
DDZGameOver = __decorate([
    ccclass
], DDZGameOver);
exports.default = DDZGameOver;

cc._RF.pop();
},{"../../lobby/components/ImgLoader":"ImgLoader","../../lobby/module/Utils":"Utils","./DDZGameDataMgr":"DDZGameDataMgr"}],"DDZGameResult":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'acba77WFyNEZLFY0uKihiSU', 'DDZGameResult');
// scripts/games/ddz/DDZGameResult.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZGameDataMgr_1 = require("./DDZGameDataMgr");
var Utils_1 = require("../../lobby/module/Utils");
var DDZGameResultItem = (function () {
    function DDZGameResultItem(node) {
        this.init(node);
    }
    DDZGameResultItem.prototype.init = function (node) {
        this.flagSprite = node.getChildByName("flag").getComponent(cc.Sprite);
        this.nicknameLabel = node.getChildByName("nickname").getComponent(cc.Label);
        this.t1Label = node.getChildByName("mut").getComponent(cc.Label);
        this.t2Label = node.getChildByName("basescore").getComponent(cc.Label);
        this.t3Label = node.getChildByName("score").getComponent(cc.Label);
    };
    DDZGameResultItem.prototype.setFontColor = function (hex) {
        var color = cc.hexToColor(hex);
        this.nicknameLabel.node.color = color;
        this.t1Label.node.color = color;
        this.t2Label.node.color = color;
        this.t3Label.node.color = color;
    };
    DDZGameResultItem.prototype.setData = function (t0, t1, t2, t3, showFlag) {
        this.nicknameLabel.string = t0;
        this.t1Label.string = t1;
        this.t2Label.string = t2;
        this.t3Label.string = t3;
        this.flagSprite.node.active = showFlag;
    };
    return DDZGameResultItem;
}());
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZGameResult = (function (_super) {
    __extends(DDZGameResult, _super);
    function DDZGameResult() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.items = [];
        return _this;
    }
    DDZGameResult.prototype.onLoad = function () {
        this.gameResultWin = this.node.getChildByName("game_result_win");
        this.gameResultLose = this.node.getChildByName("game_result_lose");
        this.gameResultNode = this.gameResultWin;
    };
    DDZGameResult.prototype.show = function (isShow) {
        this.gameResultNode.active = isShow;
    };
    DDZGameResult.prototype.init = function (resultData) {
        this.setupData(resultData);
    };
    DDZGameResult.prototype.setupData = function (data) {
        var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var mySeatId = gameData.roomInfo.getMySeat().seatId;
        var lordSeatId = gameData.roomInfo.landlorderInfo.lordSeatId;
        var isWin = false;
        if (data.lordWin === 1) {
            if (mySeatId === lordSeatId)
                isWin = true;
        }
        else {
            if (mySeatId !== lordSeatId)
                isWin = true;
        }
        if (isWin)
            this.gameResultNode = this.gameResultWin;
        else
            this.gameResultNode = this.gameResultLose;
        this.contentNode = this.gameResultNode.getChildByName("bg").getChildByName("content").getChildByName("list");
        this.readyBtn = this.gameResultNode.getChildByName("bg").getChildByName("btn_result_ok").getComponent(cc.Button);
        Utils_1.default.addClickEvent(this.readyBtn.node, this.node, "DDZGameResult", "onReadyButtonClicked");
        for (var i = 0; i < 3; i++) {
            var itemNode = this.contentNode.getChildByName("item" + i);
            var item = new DDZGameResultItem(itemNode);
            this.items.push(item);
        }
        var scoresMap = data.score;
        for (var i = 0; i < 3; i++) {
            var seat = gameData.roomInfo.getSeat(i);
            var scoreData = scoresMap[i];
            var item = this.items[i];
            var multiple = gameData.roomInfo.curMultiple;
            var baseScore = gameData.roomInfo.baseScore;
            var score = parseInt(scoreData);
            var isLord = i === lordSeatId;
            if (isLord)
                multiple *= 2;
            item.setData(seat.nickname, "" + multiple, "" + baseScore, "" + score, isLord);
            if (seat.seatId === mySeatId) {
                item.setFontColor("#f0d108");
            }
            else {
                item.setFontColor("#ffffff");
            }
        }
    };
    DDZGameResult.prototype.onReadyButtonClicked = function () {
        this.show(false);
        var event = new cc.Event.EventCustom("UI_EVENT_READY_YES", false);
        this.node.dispatchEvent(event);
    };
    return DDZGameResult;
}(cc.Component));
DDZGameResult = __decorate([
    ccclass
], DDZGameResult);
exports.default = DDZGameResult;

cc._RF.pop();
},{"../../lobby/module/Utils":"Utils","./DDZGameDataMgr":"DDZGameDataMgr"}],"DDZGameUIBinder":[function(require,module,exports){
"use strict";
cc._RF.push(module, '646be/w41pIMq3xVqOLYJuZ', 'DDZGameUIBinder');
// scripts/games/ddz/DDZGameUIBinder.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZUserInfoUI_1 = require("./DDZUserInfoUI");
var Alert_1 = require("../../lobby/components/Alert");
var DDZGameOver_1 = require("./DDZGameOver");
var DDZGameResult_1 = require("./DDZGameResult");
var Utils_1 = require("../../lobby/module/Utils");
var DDZChat_1 = require("./DDZChat");
var DDZDissolve_1 = require("./DDZDissolve");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZGameUIBinder = (function (_super) {
    __extends(DDZGameUIBinder, _super);
    function DDZGameUIBinder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 初始化场景
     */
    DDZGameUIBinder.prototype.bindingUI = function () {
        //重连
        this.reconnectPanel = this.node.getChildByName("reconnect");
        this.reconnectPanel.active = false;
        //弹出框
        this.alert = this.node.getChildByName("alert").getComponent(Alert_1.default);
        this.alert.delegate = this;
        this.alert.node.active = false;
        //文字提示
        this.prompt = this.node.getChildByName("prompt").getComponent(Alert_1.default);
        this.prompt.node.active = false;
        //设置面板
        this.settingPanel = this.node.getChildByName("setting");
        //断线重连
        this.reconnectPanel = this.node.getChildByName("reconnect");
        //解散
        var dissolvePanel = this.node.getChildByName("dissolve");
        this.dissolve = dissolvePanel.getComponent(DDZDissolve_1.default);
        this.realTimePanel = this.node.getChildByName("realtime");
        //用户信息
        this.userInfoPanel = this.node.getChildByName("userinfo").getComponent(DDZUserInfoUI_1.default);
        var btns = [];
        var node = cc.find("ui/main/top/top_right");
        btns = btns.concat(node.getComponentsInChildren(cc.Button));
        node = cc.find("ui/main/top/top_left");
        this.electricProgress = node.getChildByName("electric").getComponent(cc.ProgressBar);
        this.timeLabel = node.getChildByName("time").getComponent(cc.Label);
        this.roomNumLabel = node.getChildByName("room").getComponentInChildren(cc.Label);
        node = cc.find("ui/main/bottom");
        this.scoreLabel = node.getChildByName("score").getComponentInChildren(cc.Label);
        this.multipleLabel = node.getChildByName("multiple").getComponentInChildren(cc.Label);
        this.inningsLabel = node.getChildByName("innings").getComponentInChildren(cc.Label);
        btns = btns.concat(node.getComponentsInChildren(cc.Button));
        this.operatePanel = cc.find("ui/hint/operatepanel");
        this.operatePanel.active = false;
        btns = btns.concat(this.operatePanel.getComponentsInChildren(cc.Button));
        this.playButton = this.operatePanel.getChildByName("btn_play").getComponent(cc.Button);
        this.readyPanel = cc.find("ui/hint/readypanel");
        this.readyPanel.active = false;
        this.readyButton = this.readyPanel.getChildByName("btn_ready").getComponent(cc.Button);
        this.unReadyButton = this.readyPanel.getChildByName("btn_unready").getComponent(cc.Button);
        btns = btns.concat(this.readyPanel.getComponentsInChildren(cc.Button));
        this.callPanel = cc.find("ui/hint/calllandlord");
        this.callPanel.active = false;
        btns = btns.concat(this.callPanel.getComponentsInChildren(cc.Button));
        for (var _i = 0, btns_1 = btns; _i < btns_1.length; _i++) {
            var btn = btns_1[_i];
            Utils_1.default.addClickEvent(btn.node, this.node, "DDZGameUI", "onBtnClicked");
        }
        //游戏结束
        this.gameOver = this.node.getComponent(DDZGameOver_1.default);
        this.gameResult = this.node.getComponent(DDZGameResult_1.default);
        //聊天组件
        this.chatPanel = this.node.getComponent(DDZChat_1.default);
    };
    /**
     * 隐藏所有面板
     */
    DDZGameUIBinder.prototype.hiddenAllPanels = function () {
        //设置面板
        this.settingPanel.active = false;
        //解散面板
        this.dissolve.hidden();
        //准备面板
        this.readyPanel.active = false;
        //叫地主面板
        this.callPanel.active = false;
        //出牌操作面板
        this.operatePanel.active = false;
        //用户信息面板
        this.userInfoPanel.node.active = false;
        //游戏结束面板
        this.gameOver.show(false);
        //游戏结算面板
        this.gameResult.show(false);
        //重新连接面板
        this.reconnectPanel.active = false;
        //聊天
        this.chatPanel.show(false);
    };
    DDZGameUIBinder.prototype.onBtnClicked = function (ev) {
    };
    return DDZGameUIBinder;
}(cc.Component));
DDZGameUIBinder = __decorate([
    ccclass
], DDZGameUIBinder);
exports.default = DDZGameUIBinder;

cc._RF.pop();
},{"../../lobby/components/Alert":"Alert","../../lobby/module/Utils":"Utils","./DDZChat":"DDZChat","./DDZDissolve":"DDZDissolve","./DDZGameOver":"DDZGameOver","./DDZGameResult":"DDZGameResult","./DDZUserInfoUI":"DDZUserInfoUI"}],"DDZGameUI":[function(require,module,exports){
"use strict";
cc._RF.push(module, '01f2fAmD71IeKB8V0dcpU1V', 'DDZGameUI');
// scripts/games/ddz/DDZGameUI.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZGameDataMgr_1 = require("./DDZGameDataMgr");
var Utils_1 = require("../../lobby/module/Utils");
var DDZGameUIBinder_1 = require("./DDZGameUIBinder");
var CrossApi_1 = require("../../lobby/module/platform/CrossApi");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZGameUI = DDZGameUI_1 = (function (_super) {
    __extends(DDZGameUI, _super);
    function DDZGameUI() {
        var _this = _super.call(this) || this;
        _this.alertType = 0;
        DDZGameUI_1.instance = _this;
        return _this;
    }
    //组件驱动
    DDZGameUI.prototype.onLoad = function () {
        this.initView();
    };
    DDZGameUI.prototype.initView = function () {
        //绑定UI
        _super.prototype.bindingUI.call(this);
        //定时器
        setInterval(this.updateUIState, 1 * 1000);
    };
    /**
     * 所有按钮事件入口
     * @param ev
     */
    DDZGameUI.prototype.onBtnClicked = function (ev) {
        var name = ev.target.name;
        console.log("按钮事件");
        switch (name) {
            case "btn_setting":
                {
                    this.settingPanel.active = true;
                }
                break;
            case "btn_dissolve":
                {
                    this.alertType = 1;
                    this.showAlert("是否解散房间？", 0);
                }
                break;
            case "btn_exploits":
                {
                    console.log("查看战绩");
                    this.node.dispatchEvent(new cc.Event.EventCustom("UI_EVENT_EXPLOITE", false));
                }
                break;
            case "btn_chat":
                {
                    this.chatPanel.show(true);
                }
                break;
            case "btn_video":
                {
                }
                break;
            case "btn_audio":
                {
                }
                break;
            case "btn_play":
                {
                    console.log("点击出牌按钮事件");
                    this.node.dispatchEvent(new cc.Event.EventCustom("UI_EVENT_PLAY_PLAY", false));
                }
                break;
            case "btn_pass":
                {
                    console.log("点击过牌按钮事件");
                    this.node.dispatchEvent(new cc.Event.EventCustom("UI_EVENT_PLAY_PASS", false));
                }
                break;
            case "btn_notice":
                {
                    console.log("点击提示出牌按钮事件");
                    this.node.dispatchEvent(new cc.Event.EventCustom("UI_EVENT_PLAY_NOTICE", false));
                }
                break;
            //准备
            case "btn_ready":
                {
                    this.setReady(true);
                    console.log("点击准备按钮");
                    this.node.dispatchEvent(new cc.Event.EventCustom("UI_EVENT_READY_YES", false));
                }
                break;
            //取消准备
            case "btn_unready":
                {
                    this.setReady(false);
                    console.log("点击取消准备按钮");
                    this.node.dispatchEvent(new cc.Event.EventCustom("UI_EVENT_READY_NO", false));
                }
                break;
            //抢地主
            case "btn_qiang":
                {
                    this.showCallLand(false);
                    console.log("点击抢地主按钮");
                    this.node.dispatchEvent(new cc.Event.EventCustom("UI_EVENT_CALL_YES", false));
                }
                break;
            case "btn_buqiang":
                {
                    this.showCallLand(false);
                    console.log("点击不抢地主按钮");
                    this.node.dispatchEvent(new cc.Event.EventCustom("UI_EVENT_CALL_NO", false));
                }
                break;
            case "btn_dissolve_yes":
                {
                    console.log("点击同意按钮");
                    this.node.dispatchEvent(new cc.Event.EventCustom("UI_EVENT_DISSOLVE_YES", false));
                }
                break;
            case "btn_dissolve_no":
                {
                    console.log("点击拒绝按钮");
                    this.node.dispatchEvent(new cc.Event.EventCustom("UI_EVENT_DISSOLVE_NO", false));
                }
                break;
        }
    };
    /**
     * Alert Protocol Call Back
     * @param btnIdx
     * @param data
     */
    DDZGameUI.prototype.onAlertButtonClicked = function (btnIdx, data) {
        console.log("ALert Clicked:" + btnIdx);
        //点击确认，弹出解散信息
        if (this.alertType === 0 && btnIdx === 1) {
            console.log("点击同意按钮");
            this.node.dispatchEvent(new cc.Event.EventCustom("UI_EVENT_DISSOLVE_YES", false));
        }
    };
    DDZGameUI.prototype.setReady = function (isReady) {
        this.readyButton.node.active = !isReady;
        this.unReadyButton.node.active = isReady;
    };
    /**
     * 定时器更新类型
     */
    DDZGameUI.prototype.updateContent = function () {
        //时间
        var date = new Date();
        var timeStr = date.getHours() + ":" + date.getMinutes();
        this.timeLabel.string = timeStr;
        //电量
        var ele = CrossApi_1.default.getElectric();
        this.electricProgress.progress = ele / 100.;
        var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        //房间号
        var roomId = gameData.getRoomInfo().roomNum;
        if (!Utils_1.isNullStr(roomId)) {
            this.roomNumLabel.string = '' + roomId;
        }
    };
    /**
     * 更新UI状态，定时器更新，没必要每一帧更新
     */
    DDZGameUI.prototype.updateUIState = function () {
        var self = DDZGameUI_1.instance;
        self.updateContent();
    };
    /**
     * 显示出牌操作面板
     * @param isShow 是否
     */
    DDZGameUI.prototype.showOperatePanel = function (isShow) {
        this.hiddenAllPanels();
        this.operatePanel.active = isShow;
    };
    /**
     * 弹出框提示
     * @param msg 消息
     */
    DDZGameUI.prototype.showAlert = function (msg, tag) {
        if (tag === void 0) { tag = -1; }
        this.alertType = tag;
        this.alert.node.active = true;
        this.alert.alert(msg);
    };
    /**
     * 弹出文字提示
     * @param msg
     */
    DDZGameUI.prototype.showPrompt = function (msg) {
        this.prompt.node.active = true;
        this.prompt.prompt(msg);
    };
    /**
     * 显示准备面板
     * @param isShow 是否显示
     */
    DDZGameUI.prototype.showReady = function (isShow, isReady) {
        this.hiddenAllPanels();
        this.readyPanel.active = isShow;
        this.setReady(isReady);
    };
    /**
     * 显示叫地主面板
     * @param isShow
     */
    DDZGameUI.prototype.showCallLand = function (isShow) {
        this.hiddenAllPanels();
        this.callPanel.active = isShow;
    };
    /**
     * 显示游戏结束
     * @param data
     */
    DDZGameUI.prototype.showGameOver = function (data) {
        this.hiddenAllPanels();
        this.gameOver.setupData(data);
        this.gameOver.show(true);
    };
    /**
     * 显示游戏单局结算
     * @param data
     */
    DDZGameUI.prototype.showGameResult = function (data) {
        this.hiddenAllPanels();
        this.gameResult.setupData(data);
        this.gameResult.show(true);
    };
    /**
     * 显示用户信息
     * @param data
     */
    DDZGameUI.prototype.showUserInfo = function (seat) {
        this.hiddenAllPanels();
        this.userInfoPanel.node.active = true;
        this.userInfoPanel.setupData(seat);
    };
    /**
     * 清除UI状态
     */
    DDZGameUI.prototype.reset = function () {
        this.hiddenAllPanels();
    };
    return DDZGameUI;
}(DDZGameUIBinder_1.default));
DDZGameUI = DDZGameUI_1 = __decorate([
    ccclass
], DDZGameUI);
exports.default = DDZGameUI;
var DDZGameUI_1;

cc._RF.pop();
},{"../../lobby/module/Utils":"Utils","../../lobby/module/platform/CrossApi":"CrossApi","./DDZGameDataMgr":"DDZGameDataMgr","./DDZGameUIBinder":"DDZGameUIBinder"}],"DDZGame":[function(require,module,exports){
"use strict";
cc._RF.push(module, '924b64p1dhBVqSZ86eCeA7n', 'DDZGame');
// scripts/games/ddz/DDZGame.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZGameUI_1 = require("./DDZGameUI");
var DDZGameDataMgr_1 = require("./DDZGameDataMgr");
var DDZChat_1 = require("./DDZChat");
var DDZCardMgr_1 = require("./DDZCardMgr");
var DDZGameOver_1 = require("./DDZGameOver");
var DDZGameResult_1 = require("./DDZGameResult");
var DDZRule_1 = require("./DDZRule");
var Adapter_1 = require("../../lobby/Adapter");
var Utils_1 = require("../../lobby/module/Utils");
var DDZTypes_1 = require("./DDZTypes");
var DDZGameAnimator_1 = require("./DDZGameAnimator");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZGame = DDZGame_1 = (function (_super) {
    __extends(DDZGame, _super);
    function DDZGame() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 数据驱动，加载完成回调
     */
    DDZGame.prototype.onLoad = function () {
        DDZGame_1.instance = this;
        this.bindingComponents();
        //this.handelEvents();
        this.monitorEvent();
        this.initDatas();
        this.initView();
    };
    /**
     * 绑定所以组件
     */
    DDZGame.prototype.bindingComponents = function () {
        //Cards Mgr
        this.cardMgr = this.node.addComponent(DDZCardMgr_1.DDZCardMgr);
        //Game Over Mgr
        this.node.addComponent(DDZGameOver_1.default);
        //Game Result Mgr
        this.node.addComponent(DDZGameResult_1.default);
        //Chat
        this.node.addComponent(DDZChat_1.default);
        //Game UI 
        this.gameUI = this.node.addComponent(DDZGameUI_1.default);
        //Animator
        this.animatorMgr = this.node.addComponent(DDZGameAnimator_1.default);
    };
    /**
     * 初始化数据
     */
    DDZGame.prototype.initDatas = function () {
        var gameMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        gameMgr.playerMgr.initPlayers(this.node);
        this.playerMgr = gameMgr.playerMgr;
        gameMgr.gameNetMgr.setDelegate(this);
        //update user info
        this.updateRoomInfo();
        //play bg music
        gameMgr.audioMgr.playBgMusic();
    };
    /**
     * 初始化场景
     */
    DDZGame.prototype.initView = function () {
        Adapter_1.default.adapter(this.node.getComponent(cc.Canvas));
    };
    /**
     * 监听gameUI事件回调
     */
    DDZGame.prototype.monitorEvent = function () {
        this.node.on("UI_EVENT_PLAY_PLAY", this.eventCallBack);
        this.node.on("UI_EVENT_PLAY_PASS", this.eventCallBack);
        this.node.on("UI_EVENT_PLAY_NOTICE", this.eventCallBack);
        this.node.on("UI_EVENT_READY_YES", this.eventCallBack);
        this.node.on("UI_EVENT_READY_NO", this.eventCallBack);
        this.node.on("UI_EVENT_CALL_YES", this.eventCallBack);
        this.node.on("UI_EVENT_CALL_NO", this.eventCallBack);
        this.node.on("UI_EVENT_DISSOLVE_YES", this.eventCallBack);
        this.node.on("UI_EVENT_DISSOLVE_NO", this.eventCallBack);
        this.node.on("UI_EVENT_CHAT", this.eventCallBack);
        this.node.on("UI_EVENT_AVATAR", this.eventCallBack);
        this.node.on("UI_EVENT_EXPLOITE", this.eventCallBack);
    };
    /**
     * 处理gameUI事件回调
     * @param ev 事件
     */
    DDZGame.prototype.eventCallBack = function (event) {
        var self = DDZGame_1.instance;
        console.log("监听事件回掉");
        var data = event.getUserData();
        var name = event.type;
        var gameMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var gameNet = gameMgr.gameNetMgr;
        switch (name) {
            case "UI_EVENT_PLAY_PLAY":
                {
                    //出牌，检查出的牌是否正确
                    self.throwOutCardsToServer();
                }
                break;
            case "UI_EVENT_PLAY_PASS":
                {
                    //不出，检查是否可以不出牌
                    self.throwOutPassToServer();
                }
                break;
            case "UI_EVENT_PLAY_NOTICE":
                {
                    //提示出牌
                    this.tellMeHowToPlay();
                }
                break;
            case "UI_EVENT_READY_YES":
                {
                    //发送准备
                    gameNet.ready(true);
                }
                break;
            case "UI_EVENT_READY_NO":
                {
                    //发送取消准备
                    gameNet.ready(false);
                }
                break;
            case "UI_EVENT_CALL_YES":
                {
                    //抢地主
                    gameNet.grabLandlord(true);
                }
                break;
            case "UI_EVENT_CALL_NO":
                {
                    //不抢地主
                    gameNet.grabLandlord(false);
                }
                break;
            case "UI_EVENT_CHAT":
                {
                    //发送聊天数据
                    gameNet.chat(data.msg, data.type);
                }
                break;
            case "UI_EVENT_DISSOLVE_YES":
                {
                    console.log("发送同意");
                    //发送解散同意
                    gameNet.dissolve(true);
                }
                break;
            case "UI_EVENT_DISSOLVE_NO":
                {
                    console.log("发送拒绝");
                    //发送解散拒绝
                    gameNet.dissolve(false);
                }
                break;
            case "UI_EVENT_AVATAR":
                {
                    //点击头像
                    var seatInfo = data;
                    self.gameUI.showUserInfo(seatInfo);
                }
                break;
            case "UI_EVENT_EXPLOITE":
                {
                    //发送查看战绩
                    gameNet.pullAchievement();
                }
                break;
        }
    };
    /**
     * Game Mgr Component
     */
    DDZGame.prototype.getGameMgr = function () {
        return DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
    };
    /**
     * Game Net Component
     */
    DDZGame.prototype.getGameNet = function () {
        return this.getGameMgr().gameNetMgr;
    };
    /**
     * 处理网络事件
     */
    DDZGame.prototype.handelEvents = function () {
        var self = this;
        var gameMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        //进入房间，发送房间信息
        this.node.on("NET_EVENT_ENTER_ROOM", function () {
            self.onEnterRoomResultCallBack();
        });
        //玩家进入房间
        this.node.on("NET_EVENT_NEW_USER", function () {
            self.onNewPlayerEnterRoomCallBack();
        });
        //准备
        this.node.on("NET_EVENT_USER_READY", function (ev) {
            var seat = ev.getUserData();
            self.onPlayerReadyStateChangedCallBack(seat);
        });
        //发牌
        this.node.on("NET_EVENT_DEAL_CARDS", function (ev) {
            self.onGameStartAndDealCardsCallBack();
        });
        //开始抢地主 显示抢地主框
        this.node.on("NET_EVENT_LORD_START", function (ev) {
            self.onPlayerGrabLandlordStartCallBack();
        });
        //有人抢地主 显示当前玩家抢地主，并且切换到下一个人抢地主
        this.node.on("NET_EVENT_CHANGE_LORD", function () {
            self.onPlayerGrabLandlordChangedCallBack();
        });
        //抢地主结果  1.显示地主身份 2.显示地主三张牌 3.下一个玩家出牌
        this.node.on("NET_EVENT_LORD_RESULT", function (ev) {
            self.onPlayerGrabLandlordResultCallBack();
        });
        //出牌
        this.node.on("NET_EVENT_PLAY_CARDS", function (ev) {
            self.onPlayerPlayedCardsCallBack();
        });
        //单局结算
        this.node.on("NET_EVENT_ROUND_RESULT", function (ev) {
            self.onGameResultCallBack();
        });
        //游戏结束
        this.node.on("NET_EVENT_GAME_OVER", function (ev) {
            self.onGameOverCallBack();
        });
        //聊天消息
        this.node.on("NET_EVENT_CHAT", function (ev) {
            var data = ev.getUserData();
            self.onPlayerChatCallBack(data);
        });
        //解散操作
        this.node.on("NET_EVENT_DISSOLVE_CHANGE", function (ev) {
            self.onDissolveChangedCallBack(ev.getUserData());
        });
        //解散结果
        this.node.on("NET_EVENT_DISSOLVE_RESULT", function (ev) {
            self.onDissolveResultCallBack(ev.getUserData());
        });
    };
    /**
     * 出牌
     */
    DDZGame.prototype.throwOutCardsToServer = function () {
        do {
            var gameMgr = this.getGameMgr();
            var gameNet = gameMgr.gameNetMgr;
            var roomInfo = gameMgr.getRoomInfo();
            var mySeat = roomInfo.getMySeat();
            var prePlayedCards = this.playerMgr.getMyPrePlayedCards();
            var selectedCardsIdArr = this.cardMgr.getSelectedCards();
            var selectedCardsTypeArr = null;
            var selectedCardsType = 0;
            //检查选中牌的数量
            if (0 === selectedCardsIdArr.length) {
                this.gameUI.showPrompt("没有选择牌");
                break;
            }
            //检查牌型是否正确
            selectedCardsTypeArr = DDZRule_1.getCardType(selectedCardsIdArr);
            if (Utils_1.isNull(selectedCardsTypeArr) || selectedCardsTypeArr.length === 0) {
                this.gameUI.showPrompt("选择的牌不符合规则");
                break;
            }
            //如果上一手是自己出的牌，不检查牌是否能打过
            var canPlayAnyCards = prePlayedCards.seatId === mySeat.seatId;
            if (canPlayAnyCards) {
                //从我的手牌中移除选中的牌
                this.cardMgr.removeSelectedCards();
                //TODO: 如果出的牌有2种类型，让用户选择类型
                if (selectedCardsTypeArr.length === 2) {
                }
                //确定选择的牌的类型
                selectedCardsType = selectedCardsTypeArr[0];
            }
            else {
                var canPlay = DDZRule_1.checkCards(prePlayedCards.cards, selectedCardsIdArr, prePlayedCards.type);
                if (!canPlay) {
                    cc.log("牌型不对");
                    this.gameUI.showPrompt("出牌不符合规则");
                    break;
                }
                //移除选中的牌
                this.cardMgr.removeSelectedCards();
                if (selectedCardsTypeArr.length === 1) {
                    selectedCardsType = selectedCardsTypeArr[0];
                }
                else {
                    //TODO 出牌两种牌型，给用户选择
                    selectedCardsType = selectedCardsTypeArr[0];
                }
            }
            //播放动画
            this.animatorMgr.playCardsTypeAnimation(selectedCardsType, mySeat.seatId);
            //发送出牌
            gameNet.playCards(selectedCardsIdArr, selectedCardsType);
            console.log("我出的牌：" + selectedCardsIdArr + "  类型：" + selectedCardsType);
            //播放出牌音效
            gameMgr.audioMgr.playCardsAudioEff(selectedCardsIdArr, selectedCardsType, 0);
            //隐藏出牌面板
            this.gameUI.hiddenAllPanels();
            //玩家切换到常态
            this.playerMgr.changeAllPlayerToIdel();
        } while (false);
    };
    /**
     * 不出
     */
    DDZGame.prototype.throwOutPassToServer = function () {
        var gameMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var roomInfo = gameMgr.roomInfo;
        var mySeat = roomInfo.getMySeat();
        var prePlayedCards = this.playerMgr.getMyPrePlayedCards();
        if (prePlayedCards.seatId === mySeat.seatId) {
            this.gameUI.showPrompt("当前该你出牌，不能过牌");
            return;
        }
        //发送过牌
        gameMgr.gameNetMgr.playCards();
        //播放出牌音效
        gameMgr.audioMgr.playCardsAudioEff(null, 0, 0);
        //播放出牌音效
        gameMgr.audioMgr.playCardsAudioEff(null, 0, 0);
        //隐藏出牌面板
        this.gameUI.hiddenAllPanels();
        //玩家切换到常态
        this.playerMgr.changeAllPlayerToIdel();
    };
    /**
     * 提示出牌
     */
    DDZGame.prototype.tellMeHowToPlay = function () {
        var gameMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var roomInfo = gameMgr.roomInfo;
        var myCards = this.cardMgr.getMycards();
        // let cards = this.cardMgr.noticeMyCards(roomInfo.perPlayCards, roomInfo.perPlayCardsType, myCards);
    };
    /**
     * 显示用户信息
     */
    DDZGame.prototype.showUserInfo = function (data) {
        this.gameUI.showUserInfo(data);
    };
    /**
     * 处理发牌事件
     */
    DDZGame.prototype.dealCards = function (cards) {
        this.cardMgr.setupMyCards(cards);
    };
    /**
     * 更新房间信息
     */
    DDZGame.prototype.updateRoomInfo = function () {
        var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var roomInfo = gameData.roomInfo;
        var self = DDZGame_1.instance;
        var gameUI = self.gameUI;
        //清除房间状态
        this.resetGameState();
        //房间信息
        var roomNum = roomInfo.roomNum;
        gameUI.roomNumLabel.string = '' + roomNum;
        gameUI.inningsLabel.string = '' + roomInfo.currentRound + '/' + roomInfo.maxRound;
        gameUI.multipleLabel.string = '' + roomInfo.maxMultiple;
        //更新玩家座位信息
        self.updateSeatsData();
        //更新我的信息
        self.updateMySeatData();
        var mySeat = roomInfo.getMySeat();
        if (roomInfo.gamestate === DDZTypes_1.RoomStatus.PLAY_CARD || roomInfo.gamestate === DDZTypes_1.RoomStatus.LORD) {
            //开始游戏
            this.playerMgr.changeAllPlayerToStartGame();
            //切换到下一个玩家出牌
            self.playerMgr.changeToPlayerOperation();
        }
        //游戏处于准备状态
        if (roomInfo.gamestate === DDZTypes_1.RoomStatus.READY) {
            this.gameUI.showReady(true, mySeat.ready === 1);
        }
        else if (roomInfo.gamestate === DDZTypes_1.RoomStatus.LORD) {
            //如果该我叫地主，显示叫地主
            if (gameData.isMyTurn()) {
                self.gameUI.showCallLand(true);
            }
        }
        else if (roomInfo.gamestate === DDZTypes_1.RoomStatus.PLAY_CARD) {
            //更新地主
            var lordSeatId = roomInfo.landlorderInfo.lordSeatId;
            var lordCards = roomInfo.landlorderInfo.lordCards;
            if (!Utils_1.isNull(lordSeatId) && !Utils_1.isNull(lordCards) && lordCards.length === 3) {
                //设置地主头部牌
                this.cardMgr.setupTopCards(lordCards);
                //确定地主
                this.playerMgr.electedLandlord(lordSeatId);
            }
            //如果下一个人是自己，自己出牌
            if (gameData.isMyTurn()) {
                self.gameUI.showOperatePanel(true);
            }
        }
    };
    /**
     * 更新座位信息
     */
    DDZGame.prototype.updateSeatsData = function () {
        var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var roomInfo = gameData.roomInfo;
        var seats = roomInfo.getSeats();
        //更新每个用户
        for (var seatId in seats) {
            var seat = roomInfo.getSeat(seatId);
            this.updateUserData(seat);
        }
    };
    //更新我的信息
    DDZGame.prototype.updateMySeatData = function () {
        var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var roomInfo = gameData.roomInfo;
        //更新我的信息
        var mySeat = roomInfo.getMySeat();
        this.gameUI.scoreLabel.string = '' + mySeat.score;
        var mycards = gameData.roomInfo.myCards;
        //如果已经有牌,更新我的牌
        if (mycards && mycards.length > 0) {
            this.cardMgr.setupMyCards(mycards);
        }
    };
    /**
     * 清除游戏状态
     */
    DDZGame.prototype.resetGameState = function () {
        this.gameUI.hiddenAllPanels();
    };
    /**
     * 重新开始，清除游戏记录
     */
    DDZGame.prototype.restartAndCleanGame = function () {
        //头部牌，和我的手牌
        this.cardMgr.cleanAllCards();
        //clean and remove player had played cards
        this.playerMgr.cleanAndRmoveAllPlayedCards();
        //清除游戏数据
        DDZGameDataMgr_1.DDZGameDataMgr.getInstance().cleanPreGameData();
    };
    /**
     * 新用户到达
     * @param data 用户信息
     */
    DDZGame.prototype.updateUserData = function (seat) {
        if (seat.localSeatIdx < 0 || seat.localSeatIdx > 2)
            return;
        var self = DDZGame_1.instance;
        //更新玩家信息
        self.playerMgr.setPlayerSeat(seat, seat.localSeatIdx);
    };
    //###################################IMP INTERFACE################################//
    DDZGame.prototype.onEnterRoomResultCallBack = function (userinfo) {
        //更新房间信息
        this.updateRoomInfo();
    };
    DDZGame.prototype.onNewPlayerEnterRoomCallBack = function (userinfo) {
        //更新用户信息
        var roomInfo = this.getGameMgr().getRoomInfo();
        var seat = roomInfo.getNewSeat();
        this.updateUserData(seat);
    };
    DDZGame.prototype.onPlayerOfflineCallBack = function (userinfo) {
        //更新玩家状态
        throw new Error("Method not implemented.");
    };
    DDZGame.prototype.onPlayerReadyStateChangedCallBack = function (userinfo) {
        var seat = userinfo;
        this.updateUserData(seat);
    };
    DDZGame.prototype.onGameStartAndDealCardsCallBack = function (userinfo) {
        var gameData = this.getGameMgr();
        //重置游戏状态
        this.resetGameState();
        //设置我的牌
        this.cardMgr.setupMyCards(gameData.roomInfo.myCards, true);
        //用户切换到游戏开始状态
        this.playerMgr.changeAllPlayerToStartGame();
    };
    DDZGame.prototype.onPlayerGrabLandlordStartCallBack = function (userinfo) {
        this.gameUI.showCallLand(true);
    };
    DDZGame.prototype.onPlayerGrabLandlordChangedCallBack = function (userinfo) {
        do {
            //清除所有玩家状态
            this.playerMgr.changeAllPlayerToIdel();
            var gameData = this.getGameMgr();
            var roomInfo = gameData.getRoomInfo();
            //抢地主玩家状态+声音
            this.playerMgr.shoutPrePlayerGrablandlord(1 === roomInfo.getLastSeatGrabInfo().isLord);
            //播放抢地主声音
            gameData.audioMgr.playGrabLandlord(1 === roomInfo.getLastSeatGrabInfo().isLord, 0);
            //切换到下一个人
            this.playerMgr.changeToPlayerOperation();
            //当前是否该我抢地主
            if (gameData.isMyTurn()) {
                this.gameUI.showCallLand(true);
            }
        } while (false);
    };
    DDZGame.prototype.onPlayerGrabLandlordResultCallBack = function (userinfo) {
        //重置游戏状态
        this.resetGameState();
        var gameData = this.getGameMgr();
        var roomInfo = gameData.getRoomInfo();
        var lordSeatId = roomInfo.landlorderInfo.lordSeatId;
        var lordCards = roomInfo.landlorderInfo.lordCards;
        //确定地主
        this.playerMgr.electedLandlord(lordSeatId);
        //设置地主顶部地主三张牌
        this.cardMgr.setupTopCards(lordCards);
        //如果我是地主, 地主牌添加到我的手牌
        if (roomInfo.getMySeat().seatId === lordSeatId) {
            this.cardMgr.addLandownerThreeCardsToMyHand(lordCards);
        }
        this.playerMgr.changeToPlayerOperation();
        //如果下一个人操作是我，显示出牌面板
        if (gameData.isMyTurn()) {
            this.gameUI.showOperatePanel(true);
        }
    };
    /**
     * 用户出牌回掉
     */
    DDZGame.prototype.onPlayerPlayedCardsCallBack = function (userinfo) {
        var gameData = this.getGameMgr();
        var roomInfo = gameData.getRoomInfo();
        //出牌玩家出牌
        var cardsInfo = this.playerMgr.showPrePlayerPlayedCards();
        //播放动画
        if (cardsInfo.seatId !== this.playerMgr.getMe().getSeat().seatId) {
            this.animatorMgr.playCardsTypeAnimation(cardsInfo.type, cardsInfo.seatId);
        }
        //播放出牌音效
        gameData.audioMgr.playCardsAudioEff(cardsInfo.cards, cardsInfo.type, 0);
        //切换到下一个人操作
        this.playerMgr.changeToPlayerOperation();
        //如果下一个是我, 显示出牌框
        if (gameData.isMyTurn()) {
            this.gameUI.showOperatePanel(true);
        }
    };
    DDZGame.prototype.onPlayerChatCallBack = function (userinfo) {
        var data = userinfo;
        var type = data.type;
        var msg = data.msg;
        var gameMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        //玩家说话
        this.playerMgr.playerSpeak(msg, type, data.seatId);
        //播放短语
        if (type === 0) {
            var chatMap = gameMgr.getChatMessageById(msg);
            gameMgr.audioMgr.playChatAudio(chatMap.sound);
        }
    };
    //解散
    DDZGame.prototype.onDissolveChangedCallBack = function (userinfo) {
        console.log("收到解散申请");
        if (userinfo === null || userinfo.vote === null)
            return;
        var gameMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        //显示解散面板
        this.gameUI.dissolve.show(gameMgr.getRoomInfo().getSeatsArr());
        var arr = [];
        //更新解散数据
        for (var seatId in userinfo.vote) {
            var agree = userinfo.vote[seatId];
            var sid = parseInt(seatId);
            var player = this.playerMgr.getPlayer(sid);
            var seat = player.getSeat();
            this.gameUI.dissolve.updateItem(seat.nickname, agree, sid);
        }
    };
    //解散结果
    DDZGame.prototype.onDissolveResultCallBack = function (userinfo) {
        this.gameUI.dissolve.hidden();
        if (userinfo.dismiss === 1 || userinfo.dismiss === true) {
            cc.director.loadScene("lobby");
        }
        else {
            this.gameUI.showAlert("由于对方拒绝解散，解散申请被撤回！", -1);
        }
    };
    //重新开始
    DDZGame.prototype.onGameReStartCallBack = function (userinfo) {
        this.restartAndCleanGame();
    };
    DDZGame.prototype.onGameResultCallBack = function (userinfo) {
        this.restartAndCleanGame();
        var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        this.gameUI.hiddenAllPanels();
        this.gameUI.showGameResult(gameData.roomInfo.getLastRoundData());
    };
    DDZGame.prototype.onGameOverCallBack = function (userinfo) {
        var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        this.gameUI.hiddenAllPanels();
        this.gameUI.showGameOver(gameData.roomInfo.gameOverDatas);
    };
    DDZGame.prototype.onAchievementCallBack = function (userinfo) {
        var gameData = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        this.gameUI.hiddenAllPanels();
        this.gameUI.showGameOver(userinfo);
    };
    return DDZGame;
}(cc.Component));
DDZGame = DDZGame_1 = __decorate([
    ccclass
], DDZGame);
exports.default = DDZGame;
var DDZGame_1;

cc._RF.pop();
},{"../../lobby/Adapter":"Adapter","../../lobby/module/Utils":"Utils","./DDZCardMgr":"DDZCardMgr","./DDZChat":"DDZChat","./DDZGameAnimator":"DDZGameAnimator","./DDZGameDataMgr":"DDZGameDataMgr","./DDZGameOver":"DDZGameOver","./DDZGameResult":"DDZGameResult","./DDZGameUI":"DDZGameUI","./DDZRule":"DDZRule","./DDZTypes":"DDZTypes"}],"DDZLogic":[function(require,module,exports){
"use strict";
cc._RF.push(module, '61b2cTx6URHWaifuwFoI8eq', 'DDZLogic');
// scripts/games/ddz/DDZLogic.ts

Object.defineProperty(exports, "__esModule", { value: true });
var SuitType;
(function (SuitType) {
    SuitType[SuitType["SuitSpade"] = 1] = "SuitSpade";
    SuitType[SuitType["SuitHeart"] = 2] = "SuitHeart";
    SuitType[SuitType["SuitClub"] = 3] = "SuitClub";
    SuitType[SuitType["SuitDiamond"] = 4] = "SuitDiamond";
    SuitType[SuitType["SuitSwang"] = 5] = "SuitSwang";
    SuitType[SuitType["SuitBwang"] = 6] = "SuitBwang"; //小王
})(SuitType || (SuitType = {}));
;
var CardType;
(function (CardType) {
    CardType[CardType["DAN_ZHANG"] = 0] = "DAN_ZHANG";
    CardType[CardType["DUI_ZI"] = 1] = "DUI_ZI";
    CardType[CardType["SAN_ZHANG"] = 2] = "SAN_ZHANG";
    CardType[CardType["SAN_DAI_YI"] = 3] = "SAN_DAI_YI";
    CardType[CardType["SAN_DAI_YI_DUI"] = 4] = "SAN_DAI_YI_DUI";
    CardType[CardType["SI_DAI_SHAUNG_DAN"] = 5] = "SI_DAI_SHAUNG_DAN";
    CardType[CardType["SI_DAI_SHUANG_DUI"] = 6] = "SI_DAI_SHUANG_DUI";
    CardType[CardType["FEI_JI"] = 7] = "FEI_JI";
    CardType[CardType["FEI_JI_DAI_DAN"] = 8] = "FEI_JI_DAI_DAN";
    CardType[CardType["FEI_JI_DAI_DUI"] = 9] = "FEI_JI_DAI_DUI";
    CardType[CardType["DAN_SHUN_ZI"] = 10] = "DAN_SHUN_ZI";
    CardType[CardType["LIAN_DUI"] = 11] = "LIAN_DUI";
    CardType[CardType["ZHA_DAN"] = 12] = "ZHA_DAN";
    CardType[CardType["WANG_ZHA"] = 13] = "WANG_ZHA"; //王炸
})(CardType || (CardType = {}));
;
var Map = (function () {
    function Map() {
        this.items = {};
    }
    Map.prototype.has = function (key) {
        return key in this.items;
    };
    Map.prototype.set = function (key, value) {
        this.items[key] = value;
    };
    Map.prototype.remove = function (key) {
        if (this.has(key)) {
            delete this.items[key];
            return true;
        }
        return false;
    };
    Map.prototype.get = function (key) {
        return this.has(key) ? this.items[key] : null;
    };
    Map.prototype.clear = function () {
        this.items = {};
    };
    Map.prototype.getDictionaryItems = function () {
        return this.items;
    };
    return Map;
}());
var Card = (function () {
    function Card() {
    }
    // 约定：
    // 扑克牌54张，分别包含普通牌52张：A、2-10、J、Q、K （以上每种牌4个花色）小王大王：Swang、Bwang
    // 普通牌4种花色：黑桃、梅花、红心、方块，分别对应花色id 0-3，用于手牌花色排序，小王大王的花色是Swang、Bwang
    // id从0-53，按照每张牌4种花色排序，如：黑桃A、梅花A、红心A、方块A、黑桃2....
    // 获取牌的花色 0-3
    Card.prototype.getSuits = function (id) {
        var suits = Math.ceil(id % 4);
        if (id >= 0 && id <= 51) {
            return suits;
        }
        else if (id === 52) {
            return SuitType.SuitSwang;
        }
        else if (id === 53) {
            return SuitType.SuitBwang;
        }
        else {
            throw '牌id不合法';
        }
    };
    // 获取牌权重 1-15
    Card.prototype.getWeight = function (id) {
        if (id >= 0 && id <= 7) {
            return Math.ceil((id + 1) / 4) + 11;
        }
        else if (id >= 8 && id <= 51) {
            return Math.ceil((id + 1) / 4) - 2;
        }
        else if (id == 52) {
            return 14;
        }
        else if (id == 53) {
            return 15;
        }
        else {
            throw '牌id不合法';
        }
    };
    return Card;
}());
var DDZLogic = (function () {
    function DDZLogic() {
        // ================  私有  ==================
        this.cardsArr = new Array();
        this.cardInfo = new Card(); //单张牌对象
        // 扑克牌排序（快速排序）
        this.cardsSort = function (arr) {
            quick(arr, 0, arr.length - 1);
            return arr;
            // 切割数组
            function quick(arrCut, left, right) {
                if (arrCut.length > 1) {
                    var index = partition(arrCut, left, right);
                    if (left < index - 1) {
                        quick(arrCut, left, index - 1);
                    }
                    if (index < right) {
                        quick(arrCut, index, right);
                    }
                }
            }
            // 排序数组
            function partition(arrSort, leftSort, rightSort) {
                var pivot = arrSort[Math.floor((leftSort + rightSort) / 2)];
                while (leftSort <= rightSort) {
                    while (arrSort[leftSort] < pivot) {
                        leftSort++;
                    }
                    while (arrSort[rightSort] > pivot) {
                        rightSort--;
                    }
                    if (leftSort <= rightSort) {
                        var aux = arrSort[leftSort];
                        arrSort[leftSort] = arrSort[rightSort];
                        arrSort[rightSort] = aux;
                        leftSort++;
                        rightSort--;
                    }
                }
                return leftSort;
            }
        };
    }
    // ================  公有  ==================
    // 获取当前的扑克牌id数组
    DDZLogic.prototype.getCards = function () {
        return this.cardsArr;
    };
    // 洗牌算法，返回乱序的扑克id数组
    DDZLogic.prototype.getShuffleCards = function () {
        var i = 1;
        this.cardsArr = [];
        this.cardsArr[0] = 0;
        while (i <= 53) {
            var rnd = Math.floor(Math.random() * (i + 1));
            this.cardsArr[i] = this.cardsArr[rnd];
            this.cardsArr[rnd] = i;
            i++;
        }
        return this.cardsArr;
    };
    // 提示出牌
    DDZLogic.prototype.hintPlayCard = function (prevArr, cards) {
        return null;
    };
    // 快速排序方法
    DDZLogic.prototype.sort = function (arr) {
        if (!arr) {
            return false;
        }
        // 保证数组元素都是非负整数
        arr.forEach(function (value) {
            if (Math.abs(value) !== value) {
                return false;
            }
        });
        return this.cardsSort(arr);
    };
    DDZLogic.prototype.sortCards = function (cards) {
        cards.forEach(function (value, index) {
            if (value <= 43) {
                cards[index] = value + 2 * 4;
            }
            else if (value >= 44 && value <= 51) {
                cards[index] = value - 11 * 4;
            }
        });
        cards = cards.sort(function (a, b) {
            return a - b;
        });
        cards.forEach(function (value, index) {
            if (value <= 43) {
                cards[index] = value + 2 * 4;
            }
            else if (value >= 44 && value <= 51) {
                cards[index] = value - 11 * 4;
            }
        });
        return cards.reverse();
    };
    // 根据牌权重进行排序
    DDZLogic.prototype.weightSort = function (arr) {
        if (!arr) {
            return null;
        }
        // 过滤不符合要求的数组元素，传入数组元素应该为小于54的非负整数，不可重复，否则返回`false`
        var cArr = arr.filter(function (value, index, self) {
            var cNum = Math.abs(value);
            if (cNum !== value || cNum > 53 || self.indexOf(value) !== index) {
                return false;
            }
            else {
                return true;
            }
        });
        if (cArr.length !== arr.length) {
            return null;
        }
        // 区别出A和2，他们比3-K都大
        arr.forEach(function (value, index) {
            if (value <= 7) {
                arr[index] = value + 11 * 4;
            }
            else if (value >= 8 && value <= 51) {
                arr[index] = value - 2 * 4;
            }
        });
        // 排序
        arr = this.cardsSort(arr);
        // 恢复数组
        if (arr) {
            arr.forEach(function (value, index) {
                if (value <= 43) {
                    arr[index] = value + 2 * 4;
                }
                else if (value >= 44 && value <= 51) {
                    arr[index] = value - 11 * 4;
                }
            });
            return arr;
        }
        else {
            return null;
        }
    };
    // 发牌，返回一个对象记录发牌情况，分别是：3组17张的随机牌、1组3张的地主牌
    // 为使牌更加随机，三人轮流发牌，剩下3张为地主牌
    DDZLogic.prototype.dealCards = function () {
        var player1 = new Array();
        var player2 = new Array();
        var player3 = new Array();
        var leaveCards = new Array();
        this.cardsArr.forEach(function (card, index) {
            if (index <= 50) {
                switch (index % 3) {
                    case 0:
                        player1.push(card);
                        break;
                    case 1:
                        player2.push(card);
                        break;
                    default:
                        player3.push(card);
                        break;
                }
            }
            else {
                leaveCards.push(card);
            }
        });
        return {
            'player1': player1,
            'player2': player2,
            'player3': player3,
            'leaveCards': leaveCards
        };
    };
    // 出牌类型判断，接收出牌的id数组
    // 返回一个对象，用来表示：
    // 牌类型（DAN_TIAO, DUI_ZI, SAN_TIAO, SAN_DAI_YI, SAN_DAI_YI_DUI, SI_DAI_SHAUNG_DAN, FEI_JI_DAI_DAN, SI_TIAO_DAI_SHUANG_DUI, FEI_JI_DAI_DUI, DAN_SHUN_ZI, SAN_SHUN_ZI, SHUANG_SHUN_ZI, ZHA_DAN, WANG_ZHA）
    // 牌类型权重（1-3）
    // 当前扑克牌组权重（最小权重为 1）
    DDZLogic.prototype.getCardType = function (arr) {
        // 牌数组长度
        var arrLength = arr.length;
        // 出牌数限制
        if (arrLength <= 0 || arrLength >= 17) {
            return null;
        }
        // 过滤掉重复id、非正整数id、大于53的id
        var arr1 = arr.filter(function (id, index, self) {
            return (self.indexOf(id) === index && Math.abs(id) === id && index <= 53);
        });
        // 过滤完毕，若数组长度有变，则说明数组不合法
        if (arr1.length !== arrLength) {
            throw '牌id不合法';
        }
        // 定义变量
        var dictionary = new Map(), cardType, cardTypeWeight, groupCardsWeight;
        // 将牌数组的id装换成单张牌对应的牌权重，并通过 字典 存储该权重牌的张数
        arr.forEach(function (card, index) {
            var cardWeight = this.cardInfo.getWeight(card);
            arr[index] = cardWeight;
            if (dictionary.has(cardWeight)) {
                dictionary.set(cardWeight, dictionary.get(cardWeight) + 1);
            }
            else {
                dictionary.set(cardWeight, 1);
            }
        }, this);
        // 对牌权重数组进行排序
        this.sort(arr);
        // 字典所存的牌对象
        var dictionaryItems = dictionary.getDictionaryItems();
        // 计算最多牌数最多的同权重牌
        var cardMaxNum = 0, // 同权重牌最多张的有几张
        muchCardWeight; // 最多牌的牌权重数
        for (var card in dictionaryItems) {
            if (dictionaryItems[card] > cardMaxNum) {
                cardMaxNum = dictionaryItems[card];
                muchCardWeight = card;
            }
        }
        switch (cardMaxNum) {
            case 1:
                if (arrLength === 1) {
                    return {
                        cardType: CardType.DAN_ZHANG,
                        cardTypeWeight: 1,
                        groupCardsWeight: arr[0]
                    };
                }
                else if (arr[0] === 14 && arr[1] === 15) {
                    return {
                        cardType: CardType.WANG_ZHA,
                        cardTypeWeight: 3,
                        groupCardsWeight: 1
                    };
                }
                else if (arrLength >= 5 && arrLength <= 12) {
                    // 顺子最大只能到A
                    if (arr[arrLength - 1] <= 12) {
                        // 最大权重减最小权重加1 等于数组长度，则为单顺子
                        if (arr[arrLength - 1] - arr[0] + 1 === arrLength) {
                            return {
                                cardType: CardType.DAN_SHUN_ZI,
                                cardTypeWeight: 1,
                                groupCardsWeight: arr[0]
                            };
                        }
                        return null;
                    }
                    return null;
                }
                else {
                    return null;
                }
            case 2:
                if (arrLength === 2) {
                    return {
                        cardType: CardType.DUI_ZI,
                        cardTypeWeight: 1,
                        groupCardsWeight: arr[0]
                    };
                }
                else if (arrLength >= 6 && arrLength <= 16 && arrLength % 2 === 0) {
                    // 判断数组去重后是否构成顺子（至少3张顺子）
                    var simpleArr = arr.filter(function (value, index, self) {
                        return self.indexOf(value) === index;
                    });
                    if (simpleArr.length * 2 !== arrLength) {
                        return null;
                    }
                    // 顺子最大只能到A
                    if (arr[arrLength - 1] <= 12) {
                        if (simpleArr[simpleArr.length - 1] - simpleArr[0] + 1 === simpleArr.length) {
                            return {
                                cardType: CardType.LIAN_DUI,
                                cardTypeWeight: 1,
                                groupCardsWeight: simpleArr[0]
                            };
                        }
                        return null;
                    }
                    return null;
                }
                return null;
            case 3:
                if (arrLength === 3) {
                    return {
                        cardType: CardType.SAN_ZHANG,
                        cardTypeWeight: 1,
                        groupCardsWeight: arr[0]
                    };
                }
                else if (arrLength === 4) {
                    return {
                        cardType: CardType.SAN_DAI_YI,
                        cardTypeWeight: 1,
                        groupCardsWeight: muchCardWeight
                    };
                }
                else if (arrLength === 5) {
                    // 遍历牌权重信息字典，找出是否存在一个对子
                    for (var card in dictionaryItems) {
                        if (dictionaryItems[card] === 2) {
                            return {
                                cardType: CardType.SAN_DAI_YI_DUI,
                                cardTypeWeight: 1,
                                groupCardsWeight: dictionaryItems[muchCardWeight]
                            };
                        }
                    }
                    return null;
                }
                else if (arrLength >= 6 && arrLength <= 16) {
                    var sanArr = new Array();
                    // 遍历牌权重信息字典，找出所有三条
                    for (var card in dictionaryItems) {
                        if (dictionaryItems[card] === 3) {
                            sanArr.push(card);
                            // 排序
                            this.sort(sanArr);
                        }
                    }
                    // 至少两个三条，且不含三条不能大于A
                    if (sanArr.length >= 2 && sanArr[sanArr.length - 1] <= 12) {
                        // 判断去重后是否构成顺子（至少2张顺子）
                        if (sanArr[sanArr.length - 1] - sanArr[0] + 1 === sanArr.length) {
                            if (sanArr.length * 3 === arrLength) {
                                return {
                                    cardType: CardType.FEI_JI,
                                    cardTypeWeight: 1,
                                    groupCardsWeight: sanArr[0]
                                };
                            }
                            else if (arrLength - sanArr.length * 3 === sanArr.length) {
                                return {
                                    cardType: CardType.FEI_JI_DAI_DAN,
                                    cardTypeWeight: 1,
                                    groupCardsWeight: sanArr[0]
                                };
                            }
                            else if (arrLength - sanArr.length * 3 === sanArr.length * 2) {
                                // 遍历牌权重信息字典，若是飞机带双，则除了3对，其他都为对子
                                for (var card in dictionaryItems) {
                                    if (dictionaryItems[card] !== 3 && dictionaryItems[card] !== 2) {
                                        return null;
                                    }
                                }
                                return {
                                    cardType: CardType.FEI_JI_DAI_DUI,
                                    cardTypeWeight: 1,
                                    groupCardsWeight: sanArr[0]
                                };
                            }
                            return null;
                        }
                        return null;
                    }
                    return null;
                }
            case 4:
                if (arrLength === 4) {
                    return {
                        cardType: CardType.ZHA_DAN,
                        cardTypeWeight: 2,
                        groupCardsWeight: arr[0]
                    };
                }
                else if (arrLength === 6) {
                    return {
                        cardType: CardType.SI_DAI_SHAUNG_DAN,
                        cardTypeWeight: 1,
                        groupCardsWeight: muchCardWeight
                    };
                }
                else if (arrLength === 8) {
                    // 四条带双对 则只存在4条和对
                    for (var card in dictionaryItems) {
                        if (dictionaryItems[card] !== 4 && dictionaryItems[card] !== 2) {
                            return null;
                        }
                    }
                    return {
                        cardType: CardType.SI_DAI_SHUANG_DUI,
                        cardTypeWeight: 1,
                        groupCardsWeight: muchCardWeight
                    };
                }
                return null;
            default:
                return null;
        }
    };
    // 压牌，判断是否能够进行压牌
    // 返回布尔值
    DDZLogic.prototype.beat = function (prevArr, nextArr) {
        var prevArrType = this.getCardType(prevArr);
        var nextArrType = this.getCardType(nextArr);
        // 保证牌都是合法的
        if (prevArrType && nextArrType) {
            // 如果牌类型权重一致
            if (prevArrType.cardTypeWeight === nextArrType.cardTypeWeight) {
                // 如果牌组合类型、长度一致
                if (prevArr.length === nextArr.length && prevArrType.cardType === nextArrType.cardType) {
                    // 判断牌组合权重
                    return prevArrType.groupCardsWeight < nextArrType.groupCardsWeight;
                }
            }
            else if (prevArrType.cardTypeWeight < nextArrType.cardTypeWeight) {
                return true;
            }
        }
        return false;
    };
    return DDZLogic;
}());
exports.default = DDZLogic;

cc._RF.pop();
},{}],"DDZNetInterface":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'c3561nus8dKHY2hMZWowudT', 'DDZNetInterface');
// scripts/games/ddz/DDZNetInterface.ts

Object.defineProperty(exports, "__esModule", { value: true });

cc._RF.pop();
},{}],"DDZPlayerFSM":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'fe8584X5htOaJlhWAt+nU8g', 'DDZPlayerFSM');
// scripts/games/ddz/DDZPlayerFSM.ts

Object.defineProperty(exports, "__esModule", { value: true });
var PlayerState;
(function (PlayerState) {
    PlayerState[PlayerState["StateSeatDown"] = 1] = "StateSeatDown";
    PlayerState[PlayerState["StateOnline"] = 2] = "StateOnline";
    PlayerState[PlayerState["StateOffline"] = 4] = "StateOffline";
    PlayerState[PlayerState["StateSitUp"] = 8] = "StateSitUp";
    PlayerState[PlayerState["StateReady"] = 16] = "StateReady";
    PlayerState[PlayerState["StateUnReady"] = 32] = "StateUnReady";
    PlayerState[PlayerState["StateGameStart"] = 64] = "StateGameStart";
    PlayerState[PlayerState["StateCallLand"] = 128] = "StateCallLand";
    PlayerState[PlayerState["StatePlayCard"] = 256] = "StatePlayCard";
    PlayerState[PlayerState["StateOperation"] = 384] = "StateOperation";
    PlayerState[PlayerState["StateIdel"] = 512] = "StateIdel";
})(PlayerState = exports.PlayerState || (exports.PlayerState = {}));
var FSM = (function (_super) {
    __extends(FSM, _super);
    function FSM() {
        var _this = _super.call(this) || this;
        _this.state = PlayerState.StateSitUp;
        return _this;
    }
    /**
     * Log states
     */
    FSM.prototype.logStates = function () {
        var map = ["坐下状态", "在线状态", "离线状态", "站起状态", "准备状态", "未准备状态", "游戏开始状态", "叫地主状态", "出牌状态", "操作状态", "平常状态"];
        console.log("================================================================");
        for (var i = 0; i < 10; i++) {
            if ((this.state & (1 << i)) > 0) {
                console.log(map[i]);
            }
        }
        console.log("================================================================");
    };
    /**
     * Get State
     */
    FSM.prototype.getState = function () {
        return this.state;
    };
    /**
     * 添加状态
     * @param state 状态
     */
    FSM.prototype.addState = function (state) {
        if (!this.existState(state))
            this.state |= state;
    };
    /**
     * 移除状态
     * @param state 状态
     */
    FSM.prototype.removeState = function (state) {
        if (this.existState(state)) {
            this.state ^= state;
        }
    };
    /**
     * 是否存在状态
     */
    FSM.prototype.existState = function (state) {
        return (this.state & state) > 0;
    };
    /**
     * 初始化状态
     */
    FSM.prototype.resetStateTo = function (state) {
        this.state = state;
    };
    /**
     * 切换状态
     * @param fromState
     * @param toState
     */
    FSM.prototype.switchState = function (fromState, toState) {
        this.removeState(fromState);
        this.addState(toState);
    };
    /**
     * 切换到坐下状态
     * @param isSeatDown
     */
    FSM.prototype.changeToSeatDown = function (isSeatDown) {
        if (isSeatDown === true)
            this.switchState(PlayerState.StateSitUp, PlayerState.StateSeatDown);
        else
            this.switchState(PlayerState.StateSeatDown, PlayerState.StateSitUp);
    };
    /**
     * 切换到准备装态
     */
    FSM.prototype.changeStateToReady = function () {
        this.switchState(PlayerState.StateUnReady, PlayerState.StateReady);
    };
    /**
     * 切换到未准备状态
     */
    FSM.prototype.changeToUnReady = function () {
        this.switchState(PlayerState.StateReady, PlayerState.StateUnReady);
    };
    /**
     * 切换到在线状态
     * @param online
     */
    FSM.prototype.changeToOnline = function (online) {
        if (online)
            this.switchState(PlayerState.StateOffline, PlayerState.StateOnline);
        else
            this.switchState(PlayerState.StateOnline, PlayerState.StateOffline);
    };
    /**
     * 切换到平常状态
     */
    FSM.prototype.changeToIdel = function () {
        this.removeState(PlayerState.StateOperation);
        this.addState(PlayerState.StateIdel);
    };
    /**
     * 切换到操作状态
     */
    FSM.prototype.changeToOperation = function () {
        this.changeToIdel();
        this.switchState(PlayerState.StateIdel, PlayerState.StateOperation);
    };
    //切换到开始状态
    FSM.prototype.changeToStart = function () {
        this.changeToIdel();
        this.switchState(PlayerState.StateIdel, PlayerState.StateGameStart);
    };
    return FSM;
}(cc.Component));
exports.FSM = FSM;

cc._RF.pop();
},{}],"DDZPlayersMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, '032d3ldq9dBepu43llIwMzU', 'DDZPlayersMgr');
// scripts/games/ddz/DDZPlayersMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZPlayers_1 = require("./DDZPlayers");
var DDZGameDataMgr_1 = require("./DDZGameDataMgr");
var DDZTypes_1 = require("./DDZTypes");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZPlayersMgr = (function () {
    function DDZPlayersMgr() {
        this.players = {};
        this.seats = null;
        this.nextOperationSeatId = null;
        this.nextOperationPlayer = null;
    }
    /**
     * Componet Loaded
     */
    DDZPlayersMgr.prototype.onLoad = function () {
    };
    /**
     * 初始化所以玩家
     */
    DDZPlayersMgr.prototype.initPlayers = function (rootNode) {
        var names = ["mine", "right", "left"];
        for (var i = 0; i < names.length; i++) {
            var node = rootNode.getChildByName(names[i]);
            var player = new DDZPlayers_1.DDZPlayers();
            player.initPlayer(node, i);
            this.players[i] = player;
        }
    };
    /**
     * 设置所有玩家数据
     * @param datas
     */
    DDZPlayersMgr.prototype.setPlayersSeats = function (seats) {
        this.seats = seats;
        for (var i = 0; i < 3; i++) {
            var seat = seats[i];
            this.setPlayerSeat(seat, i);
        }
    };
    /**
     * 设置单个玩家数据
     * @param seat 座位信息
     * @param localIdx 本地位子
     */
    DDZPlayersMgr.prototype.setPlayerSeat = function (seat, localIdx) {
        var player = this.getPlayer(localIdx);
        player.setSeat(seat);
    };
    /**
     * 获取所有用户
     */
    DDZPlayersMgr.prototype.getPlayers = function () {
        return this.players;
    };
    /**
     * 获取玩家数组
     */
    DDZPlayersMgr.prototype.getPlayersArray = function () {
        var players = this.getPlayers();
        var arr = [];
        for (var key in players) {
            var player = players[key];
            arr.push(player);
        }
        return arr;
    };
    /**
     * 获取我自己
     */
    DDZPlayersMgr.prototype.getMe = function () {
        return this.getPlayer(DDZTypes_1.Direction.Down);
    };
    /**
     * 获取玩家
     * @param localIdx 本地位子
     */
    DDZPlayersMgr.prototype.getPlayer = function (localIdx) {
        return this.getPlayers()[localIdx];
    };
    /**
     * 获取玩家通过实际位子
     * @param seatId 座位ID
     */
    DDZPlayersMgr.prototype.getPlayerBySeat = function (seatId) {
        var localIdx = DDZGameDataMgr_1.DDZGameDataMgr.getInstance().getLocalIndex(seatId);
        return this.getPlayer(localIdx);
    };
    /**
     * 清除所有用户状态
     */
    DDZPlayersMgr.prototype.changeAllPlayerToIdel = function () {
        var players = this.getPlayers();
        for (var key in players) {
            var player = players[key];
            player.changeToIdel();
        }
    };
    /**
     * 确定地主
     * @param landlorderSeatId
     */
    DDZPlayersMgr.prototype.electedLandlord = function (landlorderSeatId) {
        var gameMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var landlorderPlayer = this.getPlayerBySeat(landlorderSeatId);
        landlorderPlayer.setRule(DDZTypes_1.Rule.RuleLandlord);
        var players = this.getPlayers();
        for (var key in players) {
            var player = players[key];
            if (player !== landlorderPlayer) {
                player.setRule(DDZTypes_1.Rule.RuleFarmer);
            }
        }
    };
    /**
     * 用户说话
     * @param msgId 消息ID
     * @param type 类型
     * @param localIdx 本地位子
     */
    DDZPlayersMgr.prototype.playerSpeak = function (msg, type, seatId) {
        var player = this.getPlayerBySeat(seatId);
        player.chat(msg, type);
    };
    /**
     * 切换玩家到开始游戏状态
     */
    DDZPlayersMgr.prototype.changeAllPlayerToStartGame = function () {
        var players = this.getPlayers();
        for (var key in players) {
            var player = players[key];
            player.changeToStartGame();
        }
    };
    /**
     * 开始时间钟等待操作
     */
    DDZPlayersMgr.prototype.changePlayerToOperate = function (seatId) {
        this.changeAllPlayerToIdel();
        var player = this.getPlayerBySeat(seatId);
        player.changeToOperation();
    };
    /**
     * 设置下一个要操作的用户
     * @param seatId
     */
    DDZPlayersMgr.prototype.setNextOperationSeatId = function (seatId) {
        this.nextOperationSeatId = seatId;
    };
    /**
     * 切换到下一个
     * @param nextSeatId 位子ID
     */
    DDZPlayersMgr.prototype.changeToPlayerOperation = function (nextSeatId) {
        if (nextSeatId === void 0) { nextSeatId = null; }
        if (!nextSeatId)
            nextSeatId = this.nextOperationSeatId;
        this.setNextOperationSeatId(nextSeatId);
        //所以用户切换到无操作状态
        this.changeAllPlayerToIdel();
        //下一个用户切换到操作状态
        this.nextOperationPlayer = this.getPlayerBySeat(nextSeatId);
        this.nextOperationPlayer.changeToOperation();
    };
    /**
     * 切换下一个用户
     */
    DDZPlayersMgr.prototype.changeToNextPlayerOperation = function () {
        var gameMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var nextSeatId = gameMgr.getNextSeatId(this.nextOperationSeatId);
        //切换下一个用户操作
        this.changeToPlayerOperation(nextSeatId);
    };
    DDZPlayersMgr.prototype.getPrePlayer = function () {
        var gameMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var preSeatId = gameMgr.getPreSeatIdByCurrent(this.nextOperationSeatId);
        return this.getPlayerBySeat(preSeatId);
    };
    /**
     * 显示上一个玩家出的牌
     */
    DDZPlayersMgr.prototype.showPrePlayerPlayedCards = function () {
        var cardsInfo = this.getPrePlayerPlayedCardsInfo();
        this.playCards(cardsInfo.seatId, cardsInfo.cards, cardsInfo.type);
        return cardsInfo;
    };
    /**
     * 上一个玩家喊叫地主
     */
    DDZPlayersMgr.prototype.shoutPrePlayerGrablandlord = function (isLord) {
        //抢地主玩家状态+声音
        var player = this.getPrePlayer();
        player.shoutGrablandlord(isLord);
    };
    /**
     * 玩家出牌
     * @param seatId
     * @param cards
     * @param type
     */
    DDZPlayersMgr.prototype.playCards = function (seatId, cards, type) {
        var player = this.getPlayerBySeat(seatId);
        if (!player)
            return;
        player.playCards(cards, type);
    };
    /**
     * 获取上一个玩家出的牌
     */
    DDZPlayersMgr.prototype.getPrePlayerPlayedCardsInfo = function () {
        var gameMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var player = this.getMe();
        var nextSeatId = this.nextOperationSeatId;
        var preSeatId = gameMgr.getPreSeatIdByCurrent(nextSeatId);
        var preSeat = this.getPlayerBySeat(preSeatId).getSeat();
        return { cards: preSeat.playedCards, type: preSeat.playedCardsType, seatId: preSeatId };
    };
    /**
     * 获取我的上一首没有打空的牌
     */
    DDZPlayersMgr.prototype.getMyPrePlayedCards = function () {
        var gameMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var cards = null;
        var type = null;
        var seatId = null;
        var startSeatId = this.nextOperationSeatId;
        for (var i = 0; i < 3; i++) {
            startSeatId = gameMgr.getPreSeatIdByCurrent(startSeatId);
            var seat = this.getPlayerBySeat(startSeatId).getSeat();
            if (seat.playedCards !== null && seat.playedCards !== undefined && seat.playedCards.length !== 0) {
                seatId = startSeatId;
                cards = seat.playedCards;
                type = seat.playedCardsType;
                break;
            }
        }
        return { cards: cards, type: type, seatId: seatId };
    };
    /**
     * 移除玩家打出去的所有牌，重置玩家状态
     */
    DDZPlayersMgr.prototype.cleanAndRmoveAllPlayedCards = function () {
        var players = this.getPlayers();
        for (var key in players) {
            var player = players[key];
            player.cleanupAndReset();
        }
    };
    return DDZPlayersMgr;
}());
DDZPlayersMgr = __decorate([
    ccclass
], DDZPlayersMgr);
exports.default = DDZPlayersMgr;

cc._RF.pop();
},{"./DDZGameDataMgr":"DDZGameDataMgr","./DDZPlayers":"DDZPlayers","./DDZTypes":"DDZTypes"}],"DDZPlayersUIBinder":[function(require,module,exports){
"use strict";
cc._RF.push(module, '4541alOZhNPCJtCUHLC+nuB', 'DDZPlayersUIBinder');
// scripts/games/ddz/DDZPlayersUIBinder.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZCardPanel_1 = require("./DDZCardPanel");
var Utils_1 = require("../../lobby/module/Utils");
var ImgLoader_1 = require("../../lobby/components/ImgLoader");
var DDZGameDataMgr_1 = require("./DDZGameDataMgr");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZPlayersUIBinder = (function (_super) {
    __extends(DDZPlayersUIBinder, _super);
    function DDZPlayersUIBinder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Component Loaded
     */
    DDZPlayersUIBinder.prototype.onLoad = function () {
        this.bindingWidget();
    };
    /**
     * 绑定控件
     */
    DDZPlayersUIBinder.prototype.bindingWidget = function () {
        var seatNode = this.node.getChildByName("seat");
        seatNode.active = true;
        var playpanel = this.node.getChildByName("playpanel");
        playpanel.getComponent(cc.Sprite).spriteFrame = null;
        playpanel.active = true;
        this.playCardsPanel = playpanel.addComponent(DDZCardPanel_1.default);
        var handcard = this.node.getChildByName("handcard");
        var infoNode = seatNode.getChildByName("info");
        if (handcard) {
            handcard.active = false;
            this.scoreLabel = infoNode.getChildByName("score").getComponent(cc.Label);
            this.surplusCardsNumLabel = handcard.getChildByName("cardnum").getComponent(cc.Label);
        }
        this.animationPlayer = this.node.getChildByName("play_efx").getComponent(cc.Animation);
        this.chatBubble = seatNode.getChildByName("chatbox");
        this.chatBubble.active = false;
        this.emojiAnimationPlayer = seatNode.getChildByName("emoji").getComponent(cc.Animation);
        this.emojiAnimationPlayer.node.active = false;
        this.nickLabel = infoNode.getChildByName("name").getComponent(cc.Label);
        this.avatarNode = seatNode.getChildByName("avatar");
        Utils_1.default.addClickEvent(this.avatarNode, this.node, "DDZPlayers", "onAvatarClicked");
        this.avatarLoader = this.avatarNode.getChildByName("mask").getChildByName("img").getComponent(ImgLoader_1.default);
        this.offlineFlag = seatNode.getChildByName("offline");
        this.offlineFlag.active = false;
        this.landownerFlag = seatNode.getChildByName("dizhu");
        this.landownerFlag.active = false;
        this.barrageSprite = seatNode.getChildByName("texteff").getComponent(cc.Sprite);
        this.barrageSprite.node.active = false;
        //准备
        this.readyFlag = seatNode.getChildByName("ready");
        this.readyFlag.active = false;
        //时间钟
        this.clockTimerLabel = seatNode.getChildByName("clock").getChildByName("text").getComponent(cc.Label);
        this.clockTimerLabel.node.parent.active = false;
    };
    /**
     * 设置昵称
     * @param nick 昵称
     */
    DDZPlayersUIBinder.prototype.setNick = function (nick) {
        this.nickLabel.string = nick;
    };
    /**
     * 设置分数
     * @param score 设置分数
     */
    DDZPlayersUIBinder.prototype.setScore = function (score) {
        if (this.scoreLabel) {
            this.scoreLabel.string = '' + score;
        }
    };
    /**
     * 设置头像
     * @param avatarUrl 头像Url
     */
    DDZPlayersUIBinder.prototype.setAvatar = function (avatarUrl) {
        if (!avatarUrl)
            this.avatarLoader.setupSpriteFrame(null);
        else
            this.avatarLoader.setupWithUrl(avatarUrl);
    };
    /**
     * 清除打出的牌
     */
    DDZPlayersUIBinder.prototype.cleanPlayedCards = function () {
        this.playCardsPanel.cleanCards();
    };
    /**
     * 设置效果提示
     * @param filename 图片名称
     */
    DDZPlayersUIBinder.prototype.shoutTextEffects = function (filename) {
        if (filename === void 0) { filename = null; }
        if (!filename) {
            this.barrageSprite.node.active = false;
            return;
        }
        this.barrageSprite.node.active = true;
        var self = this;
        cc.loader.loadRes("games/ddz/texture/" + filename, cc.SpriteFrame, function (err, res) {
            if (err) {
                cc.error(err);
                return;
            }
            self.barrageSprite.spriteFrame = res;
        });
    };
    /**
     * 显示准备
     * @param isShow 是否显示
     */
    DDZPlayersUIBinder.prototype.showReady = function (isShow) {
        this.readyFlag.active = isShow;
    };
    /**
     * 显示过牌
     */
    DDZPlayersUIBinder.prototype.showPass = function () {
        this.shoutTextEffects("word_buchu");
    };
    /**
     * 叫地主
     * @param isCall 是否叫地主
     */
    DDZPlayersUIBinder.prototype.showGrablandlord = function (isCall) {
        if (isCall)
            this.shoutTextEffects("word_jiaodizhu");
        else
            this.shoutTextEffects("word_bujiao");
    };
    /**
     * 显示聊天气泡
     * @param msg 信息
     */
    DDZPlayersUIBinder.prototype.showChatBox = function (msg) {
        var self = this;
        if (!msg || msg.length === 0)
            return;
        var chatLabel = this.chatBubble.getComponent(cc.Label);
        chatLabel.string = msg;
        chatLabel = this.chatBubble.getChildByName("content").getComponent(cc.Label);
        chatLabel.string = msg;
        this.chatBubble.active = true;
        setTimeout(function () { self.chatBubble.active = false; }, 3 * 1000);
    };
    /**
     * 播放表情特效
     */
    DDZPlayersUIBinder.prototype.playEmojiEffact = function (eff) {
        var _this = this;
        var dataMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var self = this;
        var playAnimationCallBack = function (animationClip) {
            if (animationClip) {
                _this.emojiAnimationPlayer.node.active = true;
                _this.emojiAnimationPlayer.addClip(animationClip, eff);
                _this.emojiAnimationPlayer.play(eff);
            }
            setTimeout(function () { _this.emojiAnimationPlayer.node.active = false; }, 3 * 1000);
        };
        dataMgr.assetsMgr.getEmijoAnimationClip(eff, playAnimationCallBack);
    };
    /**
     * 显示离线
     * @param isShow
     */
    DDZPlayersUIBinder.prototype.showOffline = function (isShow) {
        this.offlineFlag.active = isShow;
    };
    /**
     * 显示表情
     */
    DDZPlayersUIBinder.prototype.showExpression = function (expName) {
        this.playEmojiEffact(expName);
    };
    /**
     * 显示剩余牌
     */
    DDZPlayersUIBinder.prototype.showSurplusInfo = function (show) {
        if (!this.surplusCardsNumLabel)
            return;
        //清除用户牌面
        this.surplusCardsNumLabel.node.parent.active = show;
    };
    /**
     * 设置剩余牌数量
     * @param num
     */
    DDZPlayersUIBinder.prototype.setCardNum = function (num) {
        if (num === null || num === undefined)
            return;
        if (!this.surplusCardsNumLabel)
            return;
        this.showSurplusInfo(true);
        this.surplusCardsNumLabel.string = "" + num;
    };
    /**
     *  设置秒表
     * @param second
     * @param active
     */
    DDZPlayersUIBinder.prototype.setClockSecond = function (second, active) {
        if (second === void 0) { second = 60; }
        this.clockTimerLabel.node.parent.active = active;
        this.clockTimerLabel.string = '' + second;
    };
    /**
     * 获取出牌面板
     */
    DDZPlayersUIBinder.prototype.getPlayCardsPanel = function () {
        return this.playCardsPanel;
    };
    /**
     * 设置出牌框的牌的缩放
     */
    DDZPlayersUIBinder.prototype.setPlayCardsPanelCardScale = function (scale) {
        this.playCardsPanel.cardScale = scale;
    };
    /**
     * 显示牌
     * @param cards
     */
    DDZPlayersUIBinder.prototype.showCards = function (cards) {
        this.playCardsPanel.showCards(cards);
    };
    /**
     * 显示地主标示
     * @param isShow
     */
    DDZPlayersUIBinder.prototype.showLandlordFlag = function (isShow) {
        this.landownerFlag.active = isShow;
    };
    DDZPlayersUIBinder.prototype.showChatBundle = function (isShow) {
        this.chatBubble.active = isShow;
        this.emojiAnimationPlayer.node.active = false;
        this.emojiAnimationPlayer.stop();
    };
    /**
     * 重置UI状态
     */
    DDZPlayersUIBinder.prototype.resetUIState = function () {
        //清除打出去的牌
        this.cleanPlayedCards();
        //隐藏时间钟
        this.clockTimerLabel.node.parent.active = false;
        //隐藏地主标示
        this.landownerFlag.active = false;
        //隐藏离线标示
        this.offlineFlag.active = false;
        //清除文字
        this.shoutTextEffects(null);
        //清除动画特效
        this.animationPlayer.stop();
        //清除聊天弹出
        this.chatBubble.active = false;
    };
    /**
     * 点击头像回调
     */
    DDZPlayersUIBinder.prototype.onAvatarClicked = function () {
        console.log("点击头像");
    };
    return DDZPlayersUIBinder;
}(cc.Component));
DDZPlayersUIBinder = __decorate([
    ccclass
], DDZPlayersUIBinder);
exports.default = DDZPlayersUIBinder;

cc._RF.pop();
},{"../../lobby/components/ImgLoader":"ImgLoader","../../lobby/module/Utils":"Utils","./DDZCardPanel":"DDZCardPanel","./DDZGameDataMgr":"DDZGameDataMgr"}],"DDZPlayers":[function(require,module,exports){
"use strict";
cc._RF.push(module, '942ddrxLZRIMJIB2NDawNyT', 'DDZPlayers');
// scripts/games/ddz/DDZPlayers.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZGameDataMgr_1 = require("./DDZGameDataMgr");
var Utils_1 = require("../../lobby/module/Utils");
var DDZPlayerFSM_1 = require("./DDZPlayerFSM");
var DDZTypes_1 = require("./DDZTypes");
var DDZPlayersUIBinder_1 = require("./DDZPlayersUIBinder");
var DDZPlayers = (function () {
    function DDZPlayers() {
        //本地坐标
        this.localSeatIndex = DDZTypes_1.Direction.Down;
        //定时器
        this.clockTimer = -1;
        //定时器时间
        this.clockTimeSeconds = 60;
        //牌数
        this.surplusCardsNum = 17;
        //座位信息
        this.seatInfo = null;
        //角色
        this.rule = DDZTypes_1.Rule.RuleFarmer;
        //玩家状态管理
        this.fsm = new DDZPlayerFSM_1.FSM();
    }
    /**
     * Init Player
     */
    DDZPlayers.prototype.initPlayer = function (playerNode, idx) {
        if (!playerNode)
            throw new Error("playerNode is undefine");
        if (this.playerBinder)
            return;
        this.setPlayerBinder(playerNode.addComponent(DDZPlayersUIBinder_1.default));
        this.setLocalSeatIndex(idx);
        this.setup();
    };
    /**
     * 设置
     */
    DDZPlayers.prototype.setup = function () {
        //cleanup ui state 
        this.cleanupAndReset();
        var self = this;
        //start second timer
        setInterval(function () { self.updateSecond.apply(self); }, 1 * 1000);
        //pre frame update
        setInterval(function () { self.update.apply(self); }, 60.0 / (1 * 1000));
        if (this.localSeatIndex == DDZTypes_1.Direction.Down)
            this.playerBinder.setPlayCardsPanelCardScale(1);
        else
            this.playerBinder.setPlayCardsPanelCardScale(0.6);
    };
    /**
     * 获取玩家节点
     */
    DDZPlayers.prototype.getPlayerBinder = function () {
        return this.playerBinder;
    };
    /**
     * 设置玩家节点
     * @param node
     */
    DDZPlayers.prototype.setPlayerBinder = function (node) {
        this.playerBinder = node;
    };
    /**
     * Get FSM
     */
    DDZPlayers.prototype.getFSM = function () {
        return this.fsm;
    };
    /**
     * Get SeatInfo
     */
    DDZPlayers.prototype.getSeat = function () {
        return this.seatInfo;
    };
    /**
     * Set Seat
     * @param seat
     */
    DDZPlayers.prototype.setSeat = function (seat) {
        this.seatInfo = seat;
        this.setupWithSeat(seat);
    };
    /**
     * 清除
     */
    DDZPlayers.prototype.cleanupAndReset = function () {
        //清除用户状态
        this.changeToIdel();
        //重置UI状态
        this.playerBinder.resetUIState();
        //清除定时器
        clearInterval(this.clockTimer);
        //清除打出去的牌
        this.playerBinder.cleanPlayedCards();
        //清除用户牌面
        this.playerBinder.showSurplusInfo(false);
        this.playerBinder.setCardNum(17);
    };
    /**
     * 设置本地位置
     * @param idx
     */
    DDZPlayers.prototype.setLocalSeatIndex = function (idx) {
        this.localSeatIndex = idx;
    };
    /**
     * 设置准备
     * @param ready 准备
     */
    DDZPlayers.prototype.setReady = function (ready) {
        if (Utils_1.isNull(ready))
            return;
        if (ready)
            this.fsm.changeStateToReady();
        else
            this.fsm.changeToUnReady();
    };
    /**
     * 设置在线
     * @param online
     */
    DDZPlayers.prototype.setOnline = function (online) {
        if (Utils_1.isNull(online))
            return;
        this.fsm.changeToOnline(online);
    };
    /**
     * 叫地主
     */
    DDZPlayers.prototype.shoutGrablandlord = function (isCall) {
        this.playerBinder.showGrablandlord(isCall);
    };
    /**
     * 设置玩家信息
     * @param seat 座位信息
     */
    DDZPlayers.prototype.setupWithSeat = function (seat) {
        do {
            if (Utils_1.isNull(seat))
                break;
            //坐下
            this.fsm.changeToSeatDown(true);
            this.setOnline(1 === seat.online);
            this.setReady(1 === seat.ready);
            this.playerBinder.setAvatar(seat.avatar);
            this.playerBinder.setScore(seat.score);
            this.playerBinder.setNick(seat.nickname);
            this.playerBinder.setCardNum(seat.cardsNum);
            if (Utils_1.isNull(seat.playedCards))
                break;
            if (Utils_1.isNull(seat.playedCardsType))
                break;
            this.setPlayedCards(seat.playedCards, seat.playedCardsType);
        } while (false);
    };
    /**
     * 设置已经打出去的牌
     * @param cards
     * @param type
     */
    DDZPlayers.prototype.setPlayedCards = function (cards, type) {
        if (!Utils_1.isNull(cards) && cards.length === 0) {
            this.playCards();
        }
        else {
            this.playCards(cards, type);
        }
    };
    /**
     * 显示聊天
     * @param msg 消息
     * @param type 类型
     */
    DDZPlayers.prototype.chat = function (msg, type) {
        if (Utils_1.isNull(msg))
            return;
        if (Utils_1.isNull(type))
            return;
        //短语
        if (0 === type) {
            var msgId = parseInt(msg);
            var msgMap = DDZGameDataMgr_1.DDZGameDataMgr.getInstance().getChatMessageById(msgId);
            this.playerBinder.showChatBox(msgMap.content);
        }
        else if (1 === type) {
            this.playerBinder.showExpression(msg);
        }
        else if (2 === type) {
            this.playerBinder.showChatBox(msg);
        }
    };
    /**
     * 等待操作
     * @param second 秒
     */
    DDZPlayers.prototype.updateClock = function () {
        //setup clock
        this.playerBinder.setClockSecond(this.clockTimeSeconds, true);
        if (this.clockTimeSeconds > 0)
            this.clockTimeSeconds--;
    };
    /**
     * 设置用户角色
     * @param rule
     */
    DDZPlayers.prototype.setRule = function (rule) {
        this.rule = rule;
        if (DDZTypes_1.Rule.RuleLandlord === rule)
            this.setCardNum(20);
        else
            this.setCardNum(17);
    };
    /**
     * 设置牌数
     * @param num
     */
    DDZPlayers.prototype.setCardNum = function (num) {
        this.surplusCardsNum = num;
        this.playerBinder.setCardNum(num);
    };
    /**
     * 是否是我自己
     */
    DDZPlayers.prototype.isMySelf = function () {
        return this.localSeatIndex === DDZTypes_1.Direction.Down;
    };
    /**
     * 玩家出牌
     * @param cards 牌
     * @param type 类型
     */
    DDZPlayers.prototype.playCards = function (cards, type) {
        if (cards === void 0) { cards = null; }
        if (type === void 0) { type = 0; }
        if (Utils_1.isNull(cards) || cards.length === 0 || Utils_1.isNull(type) || type === 0) {
            this.playerBinder.showPass();
            return;
        }
        //出牌
        this.playerBinder.showCards(cards);
        //更新牌的数量
        this.setCardNum(this.surplusCardsNum - 1);
    };
    /**
     * Frame Update
     * @param dt
     */
    DDZPlayers.prototype.update = function () {
        //更新状态
        this.updateState();
    };
    /**
     * 设置玩家状态
     * @param state 状态
     */
    DDZPlayers.prototype.updateState = function () {
        var state = this.fsm.getState();
        //站起状态
        if (this.fsm.existState(DDZPlayerFSM_1.PlayerState.StateSitUp)) {
            this.playerBinder.node.active = false;
        }
        //坐下状态
        if (this.fsm.existState(DDZPlayerFSM_1.PlayerState.StateSeatDown)) {
            this.playerBinder.node.active = true;
        }
        //在线状态
        if (this.fsm.existState(DDZPlayerFSM_1.PlayerState.StateOnline)) {
            this.playerBinder.showOffline(false);
        }
        //离线状态
        if (this.fsm.existState(DDZPlayerFSM_1.PlayerState.StateOffline)) {
            this.playerBinder.showOffline(true);
        }
        //准备状态 （显示准备提示）
        if (this.fsm.existState(DDZPlayerFSM_1.PlayerState.StateReady)) {
            this.playerBinder.showReady(true);
        }
        //未准备状态 （隐藏准备提示）
        if (this.fsm.existState(DDZPlayerFSM_1.PlayerState.StateUnReady)) {
            this.playerBinder.showReady(false);
        }
        //开始状态
        if (this.fsm.existState(DDZPlayerFSM_1.PlayerState.StateGameStart)) {
            this.playerBinder.showReady(false);
            //显示牌面
            if (!this.isMySelf()) {
                //清除用户牌面
                this.playerBinder.showSurplusInfo(true);
            }
        }
        //隐藏斗地主
        this.playerBinder.showLandlordFlag(this.rule === DDZTypes_1.Rule.RuleLandlord);
    };
    /**
     * 更新状态
     * @param this
     */
    DDZPlayers.prototype.updateSecond = function () {
        var state = this.fsm.getState();
        //出牌或抢地主状态
        if (this.fsm.existState(DDZPlayerFSM_1.PlayerState.StateOperation)) {
            //清除打出的牌
            this.playerBinder.cleanPlayedCards();
            //清除弹幕信息
            this.playerBinder.shoutTextEffects(null);
            this.updateClock();
        }
        //平常状态
        if (this.fsm.existState(DDZPlayerFSM_1.PlayerState.StateIdel)) {
            this.playerBinder.setClockSecond(60, false);
        }
        // //叫地主状态 （显示时间等待）
        // if ( (state & PlayerState.StateCallLand) > 0 ){
        //     this.updateClock();
        //     console.log("叫地主状态");
        // }
        // this.fsm.logStates();
    };
    /**
     * 切换状态到操作状态
     */
    DDZPlayers.prototype.changeToOperation = function () {
        this.fsm.changeToOperation();
        this.clockTimeSeconds = 60;
    };
    /**
     * 切换状态到平常状态
     */
    DDZPlayers.prototype.changeToIdel = function () {
        this.fsm.changeToIdel();
    };
    /**
     * 切换到游戏开始
     */
    DDZPlayers.prototype.changeToStartGame = function () {
        this.fsm.changeToStart();
    };
    /**
     * 头像点击回调
     */
    DDZPlayers.prototype.onAvatarClicked = function () {
        // let event = new cc.Event.EventCustom( "UI_EVENT_AVATAR", false );
        // event.setUserData( this.seatInfo );
        // this.node.dispatchEvent( event );
        // cc.log("点击用户头像");
    };
    return DDZPlayers;
}());
exports.DDZPlayers = DDZPlayers;

cc._RF.pop();
},{"../../lobby/module/Utils":"Utils","./DDZGameDataMgr":"DDZGameDataMgr","./DDZPlayerFSM":"DDZPlayerFSM","./DDZPlayersUIBinder":"DDZPlayersUIBinder","./DDZTypes":"DDZTypes"}],"DDZReplayMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, '2e878eoU9NOl6O1OBstNCBa', 'DDZReplayMgr');
// scripts/games/ddz/DDZReplayMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZReplayMgr = (function (_super) {
    __extends(DDZReplayMgr, _super);
    function DDZReplayMgr() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DDZReplayMgr.prototype.onLoad = function () {
    };
    return DDZReplayMgr;
}(cc.Component));
DDZReplayMgr = __decorate([
    ccclass
], DDZReplayMgr);
exports.default = DDZReplayMgr;

cc._RF.pop();
},{}],"DDZRoomInfo":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'c75a8oFiZZH3onK+5Bi4sKA', 'DDZRoomInfo');
// scripts/games/ddz/DDZRoomInfo.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZSeat_1 = require("./DDZSeat");
var DDZTypes_1 = require("./DDZTypes");
var DDZRoomInfo = (function () {
    function DDZRoomInfo() {
        //房间号
        this.roomNum = "";
        //座位信息
        this.seatsData = {};
        //最大局数
        this.maxRound = 0;
        //当前局数
        this.currentRound = 0;
        //最大倍数
        this.maxMultiple = 0;
        //当前倍数
        this.curMultiple = 0;
        //基础分
        this.baseScore = 0;
        //地主信息
        this.landlorderInfo = { lordSeatId: null, lordCards: null };
        //抢地主信息
        this.grabLanlord = [];
        //单局结算信息
        this.gameRoundDatas = [];
        this.grabLanlord = [];
        this.gameRoundDatas = [];
    }
    /**
     * 清除一局的信息
     */
    DDZRoomInfo.prototype.cleanRoundGameData = function () {
        this.landlorderInfo = { lordSeatId: null, lordCards: null };
        this.grabLanlord = [];
        this.gamestate = DDZTypes_1.RoomStatus.READY;
        this.myCards = null;
        var seats = this.getSeats();
        for (var key in seats) {
            var seat = seats[key];
            seat.cleanGameData();
        }
    };
    DDZRoomInfo.prototype.getSeatsArr = function () {
        var arr = [];
        var seats = this.getSeats();
        for (var key in seats) {
            var seat = seats[key];
            arr.push(seat);
        }
        return arr;
    };
    DDZRoomInfo.prototype.getSeats = function () {
        return this.seatsData;
    };
    DDZRoomInfo.prototype.setSeat = function (seatId, seatData) {
        var sid = parseInt(seatId);
        this.seatsData[sid] = seatData;
        this.newSeat = seatData;
    };
    DDZRoomInfo.prototype.getSeat = function (seatId) {
        var sid = parseInt(seatId);
        return this.seatsData[sid];
    };
    DDZRoomInfo.prototype.setMySeat = function (seat) {
        this.mySeat = seat;
    };
    DDZRoomInfo.prototype.getMySeat = function () {
        return this.mySeat;
    };
    /**
     * 更新或插入玩家
     * @param newSeat
     */
    DDZRoomInfo.prototype.updateOrInsertSeat = function (newSeatData) {
        if (!newSeatData || !newSeatData.seatId)
            return;
        var oldSeat = this.getSeat(newSeatData.seatId);
        //玩家已经在房间了，只更新状态
        if (oldSeat) {
            oldSeat.ready = newSeatData.ready;
            oldSeat.online = newSeatData.online;
        }
        else {
            var seat = new DDZSeat_1.default(newSeatData);
            this.setSeat(seat.seatId, seat);
        }
    };
    DDZRoomInfo.prototype.getNewSeat = function () {
        return this.newSeat;
    };
    /**
     * 获取最后一个人抢地主信息
     */
    DDZRoomInfo.prototype.getLastSeatGrabInfo = function () {
        if (!this.grabLanlord || this.grabLanlord.length === 0)
            return null;
        return this.grabLanlord[this.grabLanlord.length - 1];
    };
    /**
     * 获取最后一局数据
     */
    DDZRoomInfo.prototype.getLastRoundData = function () {
        return this.gameRoundDatas[this.gameRoundDatas.length - 1];
    };
    return DDZRoomInfo;
}());
exports.default = DDZRoomInfo;

cc._RF.pop();
},{"./DDZSeat":"DDZSeat","./DDZTypes":"DDZTypes"}],"DDZRule":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'cd3ad/O4ypJYL9rE/Mj8CGA', 'DDZRule');
// scripts/games/ddz/DDZRule.js

"use strict";

var _ = require("./lodash");
//环境变量，决定是否打印调试信息：development打印，production不打印
var env = 'production';

// 一副牌，斗地主算法

/*
*   数据结构
*
*   54张牌，id范围1 ~ 54，其中：
*   1 ~  13，黑桃
*   14 ~ 26，红桃
*   27 ~ 39，梅花
*   40 ~ 52，方块
*   53，54   小王，大王
* */

//牌型
var card_type = {
    dan: 1, //单张
    duizi: 2, //对子
    wangzha: 3, //王炸
    zhadan: 4, //炸弹
    shunzi: 5, //顺子
    liandui: 6, //连对
    san: 7, //三张（不带）
    sandaiyi: 8, //三带一
    sandaidui: 9, //三带一对
    feiji: 10, //飞机（不带）
    feijidaidan: 11, //飞机（单带）
    feijidaidui: 12, //飞机（带对子）
    sidaier: 13, //四带二
    sidaierdui: 14 };

//权级
function getGrade(id) {
    var grade = 0;
    if (id === 54) {
        grade = 17; //大王
    } else if (id === 53) {
        grade = 16; //小王
    } else {
        var r = id % 13;
        if (r === 2) {
            grade = 15; //2
        } else if (r === 1) {
            grade = 14; //A
        } else if (r === 0) {
            grade = 13; //K
        } else {
            grade = r; //3 ~ Q
        }
    }

    return grade;
}

//以下为花色、牌面信息，供前端调用不是本算法必须的
//牌面
var card_display = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "Kinglet", "King"];

//获取牌面信息
function getDisplay(id) {
    var cardDisplayMap = ["3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A", "2", "Kinglet", "King"];
    var grade = getGrade(id);

    return cardDisplayMap[grade - 3];
}
// console.log( getDisplay(54) );
// console.log( getDisplay(53) );
// console.log( getDisplay(20) );
// console.log( getDisplay(39) );

//花色
var suit_type = {
    "spade": 1, //黑桃
    "heart": 2, //红桃
    "club": 3, //梅花
    "diamond": 4, //方块
    "joker": 5 };

//花色
function getSuit(id) {
    if (id >= 1 && id <= 13) {
        return suit_type.spade;
    } else if (id >= 14 && id <= 26) {
        return suit_type.heart;
    } else if (id >= 27 && id <= 39) {
        return suit_type.club;
    } else if (id >= 40 && id <= 52) {
        return suit_type.diamond;
    } else {
        return suit_type.joker;
    }
}
//以上为花色、牌面信息，供前端调用不是本算法必须的

/*
*   工具
*
* */
//快速获取牌的权级(表驱动法)
var AllCards = _.range(1, 54);
for (var i = 1; i <= 54; i++) {
    AllCards[i] = {
        id: i,
        grade: getGrade(i)
    };
}

//按照扑克规则，从大到小排序
function sortCards(cards) {
    return _.reverse(_.sortBy(cards, function (id) {
        return AllCards[id].grade;
    }));
}

//获取牌的权级，并计数
function getGrades(cards) {
    var t = {};
    _.each(cards, function (id) {
        var grade = AllCards[id].grade;
        if (t[grade]) {
            t[grade]++;
        } else {
            t[grade] = 1;
        }
    });

    return t;
}

//todo: 这里使用了一个比较直观的算法，工作完成后，需要对比效率
/*
*
*   接收一个牌组，将权级相同的牌放在一个桶里(抽屉原理)
*
*   返回 [筒的数量，出现次数最多的牌(同样多取牌值最大)，最大的出现次数, 出现次数最少的牌，最少的出现次数]
*
* */
function bucketInfo(cards) {
    var buckets = [];
    //权级做key，同权级牌出现的次数做value
    var map = {};
    _.each(cards, function (card) {
        var grade = AllCards[card].grade;
        if (!_.includes(buckets, grade)) {
            buckets.push(grade);
            map[grade] = 1;
        } else {
            map[grade]++;
        }
    });

    //找出出现次数最多的牌，出现次数同样多，取最大值
    var max_num = 0;
    var most_grade = null;
    //找出出现次数最少的牌
    var min_num = 5;
    var least_grade = null;

    _.each(map, function (num, grade) {
        num = parseInt(num, 10);
        grade = parseInt(grade, 10);

        //出现次数最多
        if (num > max_num) {
            max_num = num;
            most_grade = grade;
        }
        //出现次数同样多，取最大值
        if (num === max_num) {
            if (grade > most_grade) {
                most_grade = grade;
            }
        }

        //出现次数最少的牌
        if (num < min_num) {
            min_num = num;
            least_grade = grade;
        }
    });

    return { "bucket_num": buckets.length, "most_grade": most_grade, "most_grade_num": max_num, "least_grade": least_grade, "least_grade_num": min_num };
}
// console.log( bucketInfo([1,1,3,3, 3, 3, 5, 5,5 ]) );
// console.log( bucketInfo([3,16,29,42,10,23,36,49]) );

//判断一个牌型，是否连续
function isLianxu(cards) {
    cards = sortCards(cards);

    //最大的牌，不能超过A
    if (AllCards[cards[0]].grade > 14) {
        return false;
    }
    var count = cards.length - 1;
    for (var i = 0; i < count; i++) {
        if (AllCards[cards[i]].grade !== AllCards[cards[i + 1]].grade + 1) {
            return false;
        }
    }

    return true;
}
// console.log( isLianxu([12, 11, 10]) );
// console.log( getGrades([4,17,30,5,18]) ); // 4 4 4 5 5

//指定牌型，获取牌组的关键牌值
function getKeyGradeByType(cards, type) {
    if (type === card_type.sidaierdui) {
        //获取桶信息
        var bucket_info = bucketInfo(cards);
        var bucket_num = bucket_info.bucket_num;
        var most_grade = bucket_info.most_grade;
        var most_grade_num = bucket_info.most_grade_num;

        return parseInt(most_grade, 10);
    }

    if (type === card_type.feijidaidan) {
        //飞机带单
        var grades = getGrades(cards);
        var t = [];
        for (var grade in grades) {
            var num = grades[grade];
            if (num >= 3) {
                t.push(parseInt(grade, 10));
            }
        }

        //一副牌最多带5张单牌，t的数量最多+1
        t = _.reverse(_.sortBy(t));
        if (t.length === cards.length / 4) {
            return parseInt(t[0], 10);
        } else {
            t.pop();

            if (isLianxu(t)) {
                return parseInt(t[0], 10);
            } else {
                return parseInt(t[1], 10);
            }
        }
    }
}

//针对只有一种牌型的牌组，返回关键牌值
//三带一，三带对，飞机带单，飞机带对，四带二，四带对
function getKeyGrade(cards) {
    //唯一牌型
    var ct_ar = getCardType(cards);
    var ct = ct_ar[0];

    //三带一，三带对，四带二, 四带对
    if (_.includes([card_type.sandaidui, card_type.sandaiyi, card_type.sidaier, card_type.sidaierdui], ct)) {
        //获取桶信息
        var bucket_info = bucketInfo(cards);
        var bucket_num = bucket_info.bucket_num;
        var most_grade = bucket_info.most_grade;
        var most_grade_num = bucket_info.most_grade_nums;

        return parseInt(most_grade, 10);
    }

    //飞机带对
    if (ct === card_type.feijidaidui) {
        var buckets = [];
        //牌值做key，同牌值的牌，出现的次数做value
        var map = {};
        _.each(cards, function (card) {
            var grade = AllCards[card].grade;
            if (!_.includes(buckets, grade)) {
                buckets.push(grade);
                map[grade] = 1;
            } else {
                map[grade]++;
            }
        });

        //出现次数为3的牌中，最大牌值
        //飞机带对，关键牌值肯定比3大
        var max_grade = 3;
        _.each(map, function (num, grade) {
            num = parseInt(num, 10);
            grade = parseInt(grade, 10);

            if (num === 3 && grade > max_grade) {
                max_grade = grade;
            }
        });

        return parseInt(max_grade, 10);
    }

    //飞机带单
    if (ct === card_type.feijidaidan) {
        var grades = getGrades(cards);
        var t = [];
        for (var grade in grades) {
            var num = grades[grade];
            if (num >= 3) {
                t.push(parseInt(grade, 10));
            }
        }

        //一副牌最多带5张单牌，t的数量最多+1
        t = _.reverse(_.sortBy(t));
        if (t.length === cards.length / 4) {
            return t[0];
        } else {
            t.pop();
            if (isLianxu(t)) {
                return t[0];
            } else {
                return t[1];
            }
        }
    }
}

function trace(string) {
    if (env === "development") {
        console.log(string);
    }
}

/*
*   牌型判断
*
* */
//单张
function isDan(cards) {
    return cards.length === 1;
}

//对子
function isDuizi(cards) {
    return cards.length === 2 && AllCards[cards[0]].grade === AllCards[cards[1]].grade;
}

//大小王炸弹
function isDuiwang(cards) {
    return cards.length === 2 && cards[0] + cards[1] === 107;
}

//三张
function isSan(cards) {
    if (cards.length !== 3) {
        return false;
    }

    if (AllCards[cards[0]].grade === AllCards[cards[1]].grade && AllCards[cards[0]].grade === AllCards[cards[2]].grade) {
        return true;
    } else {
        return false;
    }
}

//三带一，炸弹不算三带一
function isSandaiyi(cards) {
    if (cards.length !== 4) {
        return false;
    }
    cards = sortCards(cards);
    if (AllCards[cards[0]].grade !== AllCards[cards[1]].grade) {
        cards.push(cards.shift());
    }

    if (AllCards[cards[0]].grade === AllCards[cards[1]].grade) {
        if (AllCards[cards[0]].grade === AllCards[cards[2]].grade && AllCards[cards[0]].grade !== AllCards[cards[3]].grade) {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
}

//三带一对
function isSandaidui(cards) {
    if (cards.length !== 5) {
        return false;
    }
    var bucket_info = bucketInfo(cards);
    var bucket_num = bucket_info.bucket_num;
    var most_grade = bucket_info.most_grade;
    var most_grade_num = bucket_info.most_grade_num;

    if (bucket_num === 2 && most_grade_num === 3) {
        return true;
    } else {
        return false;
    }
}
//炸弹
function isSi(cards) {
    if (cards.length !== 4) {
        return false;
    }
    var bucket_info = bucketInfo(cards);
    var bucket_num = bucket_info.bucket_num;
    var most_grade = bucket_info.most_grade;
    var most_grade_num = bucket_info.most_grade_num;
    if (bucket_num === 1 && most_grade_num === 4) {
        return true;
    } else {
        return false;
    }
}
//四带二
function isSidaier(cards) {
    if (cards.length !== 6) {
        return false;
    }
    var bucket_info = bucketInfo(cards);
    var bucket_num = bucket_info.bucket_num;
    var most_grade = bucket_info.most_grade;
    var most_grade_num = bucket_info.most_grade_num;
    if (most_grade_num === 4) {
        return true;
    } else {
        return false;
    }
}

//四带两对
function isSidaierdui(cards) {
    if (cards.length !== 8) {
        return false;
    }
    var bucket_info = bucketInfo(cards);
    var bucket_num = bucket_info.bucket_num;
    var most_grade = bucket_info.most_grade;
    var most_grade_num = bucket_info.most_grade_num;
    var least_grade = bucket_info.least_grade;
    var least_grade_num = bucket_info.least_grade_num;

    if (most_grade_num === 4 && (least_grade_num === 2 || least_grade_num === 4)) {
        return true;
    } else {
        return false;
    }
}
//顺子
function isShunzi(cards) {
    if (cards.length < 5) {
        return false;
    }

    return isLianxu(cards);
}
//连对
function isLiandui(cards) {
    if (cards.length < 6 || cards.length % 2 === 1) {
        return false;
    }
    cards = sortCards(cards);
    //最大的牌，不能超过A
    if (AllCards[cards[0]].grade > 14) {
        return false;
    }
    var count = cards.length / 2;
    for (var i = 0; i < count; i++) {
        if (AllCards[cards[i * 2]].grade !== AllCards[cards[i * 2 + 1]].grade) {
            return false;
        }
        if (i < count - 1 && AllCards[cards[i * 2]].grade !== AllCards[cards[(i + 1) * 2]].grade + 1) {
            return false;
        }
    }

    return true;
}
//飞机
function isFeiji(cards) {
    if (cards.length % 3 !== 0) {
        return false;
    }

    var grades = getGrades(cards);
    var t = [];
    for (var grade in grades) {
        var num = grades[grade];
        if (num !== 3) {
            return false;
        }

        t.push(parseInt(grade, 10));
    }

    return isLianxu(t);
}

//飞机带单张
function isFeijidaidan(cards) {
    if (cards.length % 4 !== 0) {
        return false;
    }

    var grades = getGrades(cards);
    var t = [];
    for (var grade in grades) {
        var num = grades[grade];
        if (num >= 3) {
            t.push(parseInt(grade, 10));
        }
    }

    if (t.length < cards.length / 4) {
        return false;
    } else if (t.length === cards.length / 4) {
        return isLianxu(t);
    } else {
        t = _.reverse(_.sortBy(t));
        var t2 = _.clone(t);
        t.shift();
        t2.pop();

        return isLianxu(t) || isLianxu(t2);
    }
}

//飞机带对
function isFeijidaidui(cards) {
    if (cards.length % 5 !== 0) {
        return false;
    }

    var grades = getGrades(cards);
    var t = [];
    for (var grade in grades) {
        var num = grades[grade];
        if (num === 3) {
            t.push(parseInt(grade, 10));
        } else if (num % 2 !== 0) {
            return false;
        }
    }

    if (t.length !== cards.length / 5) {
        return false;
    }

    return isLianxu(t);
}

//获取牌型
function getCardType(cards) {
    var c = cards.length;
    var types = [];
    if (c === 1) {
        //单张
        types.push(card_type.dan);
    } else if (c === 2) {
        //王炸 or 一对
        if (isDuiwang(cards)) {
            types.push(card_type.wangzha);
        } else if (isDuizi(cards)) {
            types.push(card_type.duizi);
        }
    } else if (c === 3) {
        //三
        if (isSan(cards)) {
            types.push(card_type.san);
        }
    } else if (c === 4) {
        //三带一 or 炸弹
        if (isSi(cards)) {
            types.push(card_type.zhadan);
        } else if (isSandaiyi(cards)) {
            types.push(card_type.sandaiyi);
        }
    } else if (c === 5) {
        if (isShunzi(cards)) {
            //顺子
            types.push(card_type.shunzi);
        }

        if (isSandaidui(cards)) {
            //三代二
            types.push(card_type.sandaidui);
        }
    } else if (c > 5) {
        if (isShunzi(cards)) {
            //顺子
            types.push(card_type.shunzi);
        }

        if (isLiandui(cards)) {
            //连对
            types.push(card_type.liandui);
        }

        if (isFeiji(cards)) {
            types.push(card_type.feiji); //飞机
        }

        if (isFeijidaidan(cards)) {
            //飞机带单
            types.push(card_type.feijidaidan);
        }

        if (isFeijidaidui(cards)) {
            //飞机带对
            types.push(card_type.feijidaidui);
        }

        if (isSidaier(cards)) {
            //四带二
            types.push(card_type.sidaier);
        }

        if (isSidaierdui(cards)) {
            //四带二对
            types.push(card_type.sidaierdui);
        }
    }

    if (types.length === 0) {
        return null;
    } else {
        return types;
    }
}

//检查当前组合能否出牌
function checkCards(pre_cards, cur_cards, pre_cards_type) {
    var ct_ar = getCardType(cur_cards);
    //不成牌型，不能出
    if (ct_ar === null) {
        trace(1);
        return false;
    }

    //当前玩家先出
    if (!_.isArray(pre_cards) || pre_cards.length === 0) {
        trace(2);
        return true;
    }

    var pre_ct_ar = getCardType(pre_cards);
    //当前牌组，都只有一种牌型的情况
    if (pre_ct_ar.length === 1 && ct_ar.length === 1) {
        var ct = ct_ar[0];
        var pre_ct = pre_ct_ar[0];

        if (ct === card_type.wangzha) {
            trace(3);
            return true;
        } else if (ct === card_type.zhadan) {
            if (pre_ct === card_type.wangzha) {
                //不可能比王炸大
                trace(4);
                return false;
            } else if (pre_ct === card_type.zhadan) {
                if (AllCards[pre_cards[0]].grade < AllCards[cur_cards[0]].grade) {
                    trace(5);
                    return true;
                } else {
                    //炸弹不如上家大
                    trace(6);
                    return false;
                }
            } else {
                trace(7);
                return true;
            }
        } else if (pre_ct !== ct) {
            //牌型和上家不一样
            trace(8);
            return false;
        } else if (pre_cards.length !== cur_cards.length) {
            //牌型相同，牌数不同，不能出牌。
            trace(9);
            return false;
        } else {
            //牌型相同，数量相同，比较大小
            //单纯牌型：单张，对子，顺子，连对，三张，飞机不带
            if (_.includes([card_type.dan, card_type.duizi, card_type.shunzi, card_type.liandui, card_type.san, card_type.feiji], ct)) {
                pre_cards = sortCards(pre_cards);
                cur_cards = sortCards(cur_cards);

                if (AllCards[pre_cards[0]].grade < AllCards[cur_cards[0]].grade) {
                    trace(10);
                    return true;
                } else {
                    trace(11);
                    return false;
                }
            } else {
                //混合牌型：三带一，三带对，飞机带单，飞机带对，四带二，四带对
                var pre_key_grade = getKeyGrade(pre_cards);
                var cur_key_grade = getKeyGrade(cur_cards);

                trace(12);
                return cur_key_grade > pre_key_grade;
            }
        }
    } else {
        //todo: 想办法验证以下说法
        //如果牌组不止一种牌型，只可能是四种情况：四飞不带，三飞带一; 四带二对，双飞带一

        var pre_ct = pre_cards_type;
        //当前牌型，不包含上一手牌的牌型
        if (!_.includes(ct_ar, pre_ct)) {
            trace(13);
            return false;
        }

        var ct = pre_ct;
        //牌型相同，牌的数量不同
        if (pre_cards.length !== cur_cards.length) {
            trace(14);
            return false;
        }

        //枚举牌型，判断大小
        if (ct === card_type.feiji) {
            pre_cards = sortCards(pre_cards);
            cur_cards = sortCards(cur_cards);

            trace(15);
            return AllCards[pre_cards[0]].grade < AllCards[cur_cards[0]].grade;
        } else if (ct === card_type.sidaierdui || ct === card_type.feijidaidan) {
            var pre_key_grade = getKeyGradeByType(pre_cards, ct);
            var cur_key_grade = getKeyGradeByType(cur_cards, ct);

            trace(16);
            return cur_key_grade > pre_key_grade;
        } else {
            trace("震惊！有两种牌型的新牌组！");
            trace(cur_cards);
        }
    }
}

exports.autoSelectShunzi = function (cards) {};

/**
 * 提示出牌
 */
exports.noticePlay = function (preCards, preType, cards, hadNoticeCards) {
    //     dan: 1, 			    //单张
    // duizi: 2,			    //对子
    // wangzha: 3,		    //王炸
    // zhadan: 4,			    //炸弹
    // shunzi: 5, 		    //顺子
    // liandui: 6,		    //连对
    // san: 7, 			    //三张（不带）
    // sandaiyi: 8,		    //三带一
    // sandaidui: 9, 		    //三带一对
    // feiji: 10, 		    //飞机（不带）
    // feijidaidan: 11, 		//飞机（单带）
    // feijidaidui: 12, 		//飞机（带对子）
    // sidaier: 13, 		    //四带二
    // sidaierdui: 14, 	    //四带两对

    var cards = sortCards(cards);
    var cardsArr = cards;
    //王炸弹，打不过
    if (preType === 3) {
        return null;
    }

    //单张
    else if (1 === preType && preCards.length === 1) {

            if (!hadNoticeCards) {
                cardsArr = cardsArr.filter(function (value, index, self) {

                    var cNum = Math.abs(value);
                    if (hadNoticeCards.indexOf(value) !== -1) {
                        return false;
                    } else {
                        return true;
                    }
                });
            }

            for (var i = 0; i < cardsArr.length; i++) {
                var value = cardsArr[i];

                var preGrade = getGrade(preCards[0]);
                var grade = getGrade(value);

                if (grade > preGrade) {
                    return grade;
                }
            }
        }

        //一对
        else if (preType === 2) {

                cardsArr = cardsArr.filter(function (value, index, self) {

                    var cNum = Math.abs(value);
                    if (hadNoticeCards.indexOf(value) !== -1) {
                        return false;
                    } else {
                        return true;
                    }
                });

                var cardGrade = getGrade(preCards[0]);
            }
};

//对外暴露方法，兼容已有代码
exports.card_type = card_type;
exports.getCardType = getCardType;
exports.checkCards = checkCards;
exports.sortCards = sortCards;

cc._RF.pop();
},{"./lodash":"lodash"}],"DDZSeat":[function(require,module,exports){
"use strict";
cc._RF.push(module, '5fd67NJxDlOn6ci/Q75IfF3', 'DDZSeat');
// scripts/games/ddz/DDZSeat.ts

Object.defineProperty(exports, "__esModule", { value: true });
var DDZSeat = (function () {
    function DDZSeat(data) {
        this.localSeatIdx = 0;
        this.nickname = "";
        this.avatar = null;
        this.score = 0;
        this.uid = 0;
        this.ready = 0;
        this.ip = "";
        this.seatId = 0;
        this.cardsNum = 0;
        this.online = 0;
        this.playedCards = null;
        this.playedCardsType = 0;
        this.localSeatIdx = 0;
        this.seatId = data.seatId;
        this.nickname = data.nickname;
        this.avatar = data.avatar;
        this.score = data.score;
        this.uid = data.uid;
        if (null !== data.ready && undefined !== data.ready)
            this.ready = data.ready;
        this.ready = data.ready;
        this.ip = data.ip;
        this.cardsNum = data.cardsNum;
        if (null !== data.online && undefined !== data.online)
            this.online = data.online;
        this.playedCards = data.playedCards;
        this.playedCardsType = data.playedCardType;
    }
    DDZSeat.prototype.cleanGameData = function () {
        this.playedCards = null;
        this.playedCardsType = 0;
        this.cardsNum = 17;
    };
    return DDZSeat;
}());
exports.default = DDZSeat;

cc._RF.pop();
},{}],"DDZTypes":[function(require,module,exports){
"use strict";
cc._RF.push(module, '3f39fx/P8VFS50oUvAflVLk', 'DDZTypes');
// scripts/games/ddz/DDZTypes.ts

Object.defineProperty(exports, "__esModule", { value: true });
var Rule;
(function (Rule) {
    Rule[Rule["RuleFarmer"] = 0] = "RuleFarmer";
    Rule[Rule["RuleLandlord"] = 1] = "RuleLandlord";
})(Rule = exports.Rule || (exports.Rule = {}));
var Direction;
(function (Direction) {
    Direction[Direction["Down"] = 0] = "Down";
    Direction[Direction["Right"] = 1] = "Right";
    Direction[Direction["Left"] = 2] = "Left";
})(Direction = exports.Direction || (exports.Direction = {}));
var RoomStatus;
(function (RoomStatus) {
    RoomStatus[RoomStatus["READY"] = 0] = "READY";
    RoomStatus[RoomStatus["LORD"] = 1] = "LORD";
    RoomStatus[RoomStatus["PLAY_CARD"] = 2] = "PLAY_CARD";
    RoomStatus[RoomStatus["ACCOUNT"] = 3] = "ACCOUNT"; // 结算
})(RoomStatus = exports.RoomStatus || (exports.RoomStatus = {}));
var CardType;
(function (CardType) {
    CardType[CardType["DAN"] = 1] = "DAN";
    CardType[CardType["DUIZI"] = 2] = "DUIZI";
    CardType[CardType["WANGZHA"] = 3] = "WANGZHA";
    CardType[CardType["ZHADAN"] = 4] = "ZHADAN";
    CardType[CardType["SHUNZI"] = 5] = "SHUNZI";
    CardType[CardType["LIANDUI"] = 6] = "LIANDUI";
    CardType[CardType["SAN"] = 7] = "SAN";
    CardType[CardType["SANDAIYI"] = 8] = "SANDAIYI";
    CardType[CardType["SANDAIDUI"] = 9] = "SANDAIDUI";
    CardType[CardType["FEIJI"] = 10] = "FEIJI";
    CardType[CardType["FEIJIDAIDAN"] = 11] = "FEIJIDAIDAN";
    CardType[CardType["FEIJIDAIDUI"] = 12] = "FEIJIDAIDUI";
    CardType[CardType["SIDAIER"] = 13] = "SIDAIER";
    CardType[CardType["SIDAILIANGDUI"] = 14] = "SIDAILIANGDUI";
})(CardType = exports.CardType || (exports.CardType = {}));
function getCardPoint(cardId) {
    var point = 0;
    if (cardId === 53) {
        point = 14;
    }
    else if (cardId === 54) {
        point = 15;
    }
    else {
        cardId--;
        point = Math.ceil(cardId % 13);
        point++;
    }
    return point;
}
exports.getCardPoint = getCardPoint;

cc._RF.pop();
},{}],"DDZUserInfoUI":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'ce5c5Htdl1Mn52r3hhDyeJ9', 'DDZUserInfoUI');
// scripts/games/ddz/DDZUserInfoUI.ts

Object.defineProperty(exports, "__esModule", { value: true });
var ImgLoader_1 = require("../../lobby/components/ImgLoader");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZUserInfoUI = (function (_super) {
    __extends(DDZUserInfoUI, _super);
    function DDZUserInfoUI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DDZUserInfoUI.prototype.onLoad = function () {
    };
    DDZUserInfoUI.prototype.setupData = function (seat) {
        this.avatarLoader.setupWithUrl(seat.avatar);
        this.nameLabel.string = "" + seat.nickname;
        this.idLabel.string = "" + seat.uid;
        this.scoreLabel.string = "" + seat.score;
    };
    return DDZUserInfoUI;
}(cc.Component));
__decorate([
    property(ImgLoader_1.default)
], DDZUserInfoUI.prototype, "avatarLoader", void 0);
__decorate([
    property(cc.Label)
], DDZUserInfoUI.prototype, "nameLabel", void 0);
__decorate([
    property(cc.Label)
], DDZUserInfoUI.prototype, "idLabel", void 0);
__decorate([
    property(cc.Label)
], DDZUserInfoUI.prototype, "scoreLabel", void 0);
DDZUserInfoUI = __decorate([
    ccclass
], DDZUserInfoUI);
exports.default = DDZUserInfoUI;

cc._RF.pop();
},{"../../lobby/components/ImgLoader":"ImgLoader"}],"DDZVideoChat":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'afc552vsfFJn4bZ3msdBtk1', 'DDZVideoChat');
// scripts/games/ddz/DDZVideoChat.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var DDZVideoChat = (function (_super) {
    __extends(DDZVideoChat, _super);
    function DDZVideoChat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DDZVideoChat.prototype.onLoad = function () {
    };
    return DDZVideoChat;
}(cc.Component));
DDZVideoChat = __decorate([
    ccclass
], DDZVideoChat);
exports.default = DDZVideoChat;

cc._RF.pop();
},{}],"DataMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'ab453ptABlJEZh6AZGh/9Ek', 'DataMgr');
// scripts/lobby/DataMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var UserMgr_1 = require("./UserMgr");
var HttpClient_1 = require("./module/HttpClient");
var DataMgr = (function () {
    function DataMgr() {
        this.signTimes = 0;
    }
    DataMgr.getInstance = function () {
        if (null == this.instance)
            this.instance = new DataMgr();
        return this.instance;
    };
    DataMgr.prototype.getServerConf = function (callback) {
        var self = this;
        var token = UserMgr_1.default.getInstance().makeToken();
        HttpClient_1.HttpClient.post(cc.fy.configs.ServerUrl, "/lobby/const_map", null, function (res) {
            if (res && res.status == 0) {
                var data = res.const_list;
                self.serverConf = data;
                callback(true);
            }
            else
                callback(false);
        }, token);
    };
    DataMgr.prototype.getGameList = function (callback) {
        var self = this;
        var token = UserMgr_1.default.getInstance().makeToken();
        HttpClient_1.HttpClient.post(cc.fy.configs.ServerUrl, "/lobby/game_list", null, function (res) {
            if (res && res.status == 0) {
                var data = res.game_list;
                self.gameList = data;
                callback(true);
            }
            else
                callback(false);
        }, token);
    };
    DataMgr.prototype.getAdList = function (callback) {
        var self = this;
        var token = UserMgr_1.default.getInstance().makeToken();
        HttpClient_1.HttpClient.post(cc.fy.configs.ServerUrl, "/lobby/ad_list", null, function (res) {
            if (res && res.status == 0) {
                var data = res.ad_list;
                self.adList = data;
                callback(true);
            }
            else
                callback(false);
        }, token);
    };
    DataMgr.prototype.getNotice = function (callback) {
        var self = this;
        var token = UserMgr_1.default.getInstance().makeToken();
        HttpClient_1.HttpClient.post(cc.fy.configs.ServerUrl, "/lobby/notice_list", null, function (res) {
            if (res && res.status == 0) {
                self.noticeList = res.notice_list;
                self.newsList = res.home_popup;
                self.messageList = res.marquee;
                callback(true);
            }
            else
                callback(false);
        }, token);
    };
    DataMgr.prototype.getGoods = function (callback) {
        var self = this;
        var token = UserMgr_1.default.getInstance().makeToken();
        HttpClient_1.HttpClient.post(cc.fy.configs.ServerUrl, "/lobby/goods_list", p, function (res) {
            if (res && res.status == 0) {
                var data = res.goods_list;
                self.goodsList = data;
                callback(true);
            }
            else
                callback(false);
        }, token);
    };
    DataMgr.prototype.getSiginConf = function (callback) {
        var self = this;
        var token = UserMgr_1.default.getInstance().makeToken();
        HttpClient_1.HttpClient.post(cc.fy.configs.ServerUrl, "/lobby/sign_in_prize_info", null, function (res) {
            if (res && res.status == 0) {
                self.signConf = res.sign_in_prize;
                self.signTimes = res.sign_in_times;
                callback(true);
            }
            else
                callback(false);
        }, token);
    };
    DataMgr.prototype.getGameRecoder = function (callback) {
        var self = this;
        var token = UserMgr_1.default.getInstance().makeToken();
        HttpClient_1.HttpClient.post(cc.fy.configs.ServerUrl, "/lobby/game_record_list", p, function (res) {
            if (res && res.status == 0) {
                self.gameRecoderList = res.record;
                callback(true);
            }
            else
                callback(false);
        }, token);
    };
    return DataMgr;
}());
DataMgr.instance = null;
exports.DataMgr = DataMgr;

cc._RF.pop();
},{"./UserMgr":"UserMgr","./module/HttpClient":"HttpClient"}],"Deserialize":[function(require,module,exports){
"use strict";
cc._RF.push(module, '1bcfbTdTK9ChqY5yDXrRq2X', 'Deserialize');
// scripts/lobby/module/Deserialize.ts

Object.defineProperty(exports, "__esModule", { value: true });
function deserialize(json, instance) {
    for (var prop in json) {
        if (!json.hasOwnProperty(prop))
            continue;
        if (typeof json[prop] === 'object')
            deserialize(json[prop], instance[prop]);
        else
            instance[prop] = json[prop];
    }
}
var Deserialize = (function () {
    function Deserialize(json) {
        deserialize(json, this);
    }
    Deserialize.prototype.setPropertysWithJSON = function (json) {
        var jsonObj = JSON.parse(json);
        for (var propName in jsonObj) {
            this[propName] = jsonObj[propName];
        }
    };
    return Deserialize;
}());
exports.default = Deserialize;

cc._RF.pop();
},{}],"EnterRoom":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'ff394fG5MNBRKuatQsyyQCl', 'EnterRoom');
// scripts/lobby/components/EnterRoom.ts

Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = require("../module/Utils");
var Lobby_1 = require("./Lobby");
var UserMgr_1 = require("../UserMgr");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var EnterRoom = (function (_super) {
    __extends(EnterRoom, _super);
    function EnterRoom() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.inputIndex = 0;
        return _this;
    }
    EnterRoom.prototype.onLoad = function () {
        var btns = this.node.getChildByName("bg")
            .getChildByName("btns");
        for (var i = 0; i < btns.childrenCount; i++) {
            Utils_1.default.addClickEvent(btns.children[i], this.node, "EnterRoom", "onKeyBoardBtnClicked");
        }
        this.alert = this.node.parent.getComponent(Lobby_1.default).alert;
        this.hud = this.node.parent.getComponent(Lobby_1.default).hud;
    };
    EnterRoom.prototype.onEnable = function () {
        this.reset();
    };
    EnterRoom.prototype.onInputFinished = function (roomId) {
        var _this = this;
        var self = this;
        this.hud.active = true;
        UserMgr_1.default.getInstance().getRoomInfo(roomId, function (res) {
            self.hud.active = false;
            console.log("输入完毕，获取房间信息");
            if (!Utils_1.isNull(res)) {
                if (0 === res.status) {
                    _this.node.active = false;
                    var ev = new cc.Event.EventCustom("event_created", false);
                    ev.detail = res;
                    self.node.parent.dispatchEvent(ev);
                }
                else {
                    // var content = "请求错误, 未知错误, 请联系客服人员";
                    // if(res.status == 102){
                    //     content = "房间["+ roomId +"]不存在，请重新输入!";
                    // }
                    // else if ( res.status==104 ){
                    //     content = "房间["+ roomId + "]已满!";
                    // }
                    // self.alert.alert(res.msg);
                    // self.reset();
                    self.alert.alert(res.msg);
                }
            }
            else {
                self.alert.alert("请求错误, 请稍后再试");
            }
            self.reset();
        });
    };
    EnterRoom.prototype.onInput = function (num) {
        if (this.inputIndex >= this.nums.length) {
            return;
        }
        this.nums[this.inputIndex].string = '' + num;
        this.inputIndex += 1;
        if (this.inputIndex == this.nums.length) {
            var roomId = this.parseRoomID();
            console.log("ok:" + roomId);
            this.onInputFinished('' + roomId);
        }
    };
    EnterRoom.prototype.onKeyBoardBtnClicked = function (event) {
        var nodeName = event.target.name;
        if (nodeName === "btclean") {
            this.reset();
        }
        else if (nodeName === "btdel") {
            if (this.inputIndex > 0) {
                this.inputIndex -= 1;
                this.nums[this.inputIndex].string = "";
            }
        }
        else {
            var last = nodeName.substr(-1);
            var num = parseInt(last);
            this.onInput(num);
        }
    };
    EnterRoom.prototype.reset = function () {
        for (var i = 0; i < this.nums.length; ++i) {
            this.nums[i].string = "";
        }
        this.inputIndex = 0;
    };
    EnterRoom.prototype.parseRoomID = function () {
        var str = "";
        for (var i = 0; i < this.nums.length; ++i) {
            str += this.nums[i].string;
        }
        return parseInt(str);
    };
    return EnterRoom;
}(cc.Component));
__decorate([
    property([cc.Label])
], EnterRoom.prototype, "nums", void 0);
EnterRoom = __decorate([
    ccclass
], EnterRoom);
exports.default = EnterRoom;

cc._RF.pop();
},{"../UserMgr":"UserMgr","../module/Utils":"Utils","./Lobby":"Lobby"}],"Fy.d":[function(require,module,exports){
"use strict";
cc._RF.push(module, '442a6b63hJEua1WAr8lw6KR', 'Fy.d');
// scripts/lobby/Fy.d.ts



cc._RF.pop();
},{}],"GameMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, '803baPhntBKYL23YVrXP52B', 'GameMgr');
// scripts/lobby/GameMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var GameMgr = (function () {
    function GameMgr() {
    }
    return GameMgr;
}());
exports.default = GameMgr;

cc._RF.pop();
},{}],"HashMap":[function(require,module,exports){
"use strict";
cc._RF.push(module, '8f70aK7zPRKwJgj9WTxp5mq', 'HashMap');
// scripts/lobby/module/HashMap.ts

Object.defineProperty(exports, "__esModule", { value: true });
var HashMap = (function () {
    function HashMap() {
        this.length = 0;
        this.obj = {};
    }
    /**
    * 判断Map是否为空
    */
    HashMap.prototype.isEmpty = function () {
        return length == 0;
    };
    /**
    * 判断对象中是否包含给定Key
    */
    HashMap.prototype.containsKey = function (key) {
        return (key in this.obj);
    };
    /**
    * 判断对象中是否包含给定的Value
    */
    HashMap.prototype.containsValue = function (value) {
        for (var key in this.obj) {
            if (this.obj[key] == value) {
                return true;
            }
        }
        return false;
    };
    /**
    *向map中添加数据
    */
    HashMap.prototype.put = function (key, value) {
        if (!this.containsKey(key)) {
            this.length++;
        }
        this.obj[key] = value;
    };
    /**
    * 根据给定的Key获得Value
    */
    HashMap.prototype.get = function (key) {
        return this.containsKey(key) ? this.obj[key] : null;
    };
    /**
    * 根据给定的Key删除一个值
    */
    HashMap.prototype.remove = function (key) {
        if (this.containsKey(key) && (delete this.obj[key])) {
            this.length--;
        }
    };
    /**
    * 获得Map中的所有Value
    */
    HashMap.prototype.values = function () {
        var _values = new Array();
        for (var key in this.obj) {
            _values.push(this.obj[key]);
        }
        return _values;
    };
    /**
    * 获得Map中的所有Key
    */
    HashMap.prototype.keySet = function () {
        var _keys = new Array();
        for (var key in this.obj) {
            _keys.push(key);
        }
        return _keys;
    };
    /**
    * 获得Map的长度
    */
    HashMap.prototype.size = function () {
        return this.length;
    };
    /**
    * 清空Map
    */
    HashMap.prototype.clear = function () {
        this.length = 0;
        this.obj = {};
    };
    return HashMap;
}());
exports.default = HashMap;

cc._RF.pop();
},{}],"HotUpdate":[function(require,module,exports){
"use strict";
cc._RF.push(module, '538bcIPMGdGcq4cUvt3bQcT', 'HotUpdate');
// scripts/lobby/module/HotUpdate.ts

Object.defineProperty(exports, "__esModule", { value: true });
var HotUpdate = (function () {
    function HotUpdate() {
        //是否正在更新
        this.updating = false;
        //是否可以重试
        this.canRetry = false;
        //本地存储路径
        this.storagePath = "";
        //协议
        this.delegate = null;
    }
    /**
     * 检查是否有更新回调
     * @param event
     */
    HotUpdate.prototype.checkCb = function (event) {
        cc.log('Code: ' + event.getEventCode());
        switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
                cc.log("No local manifest file found, hot update skipped.");
                if (this.delegate) {
                    var err = { name: "ERROR_NO_LOCAL_MANIFEST", message: "No local manifest file found, hot update skipped." };
                    this.delegate.onCheckUpdateCallBack(err, false);
                }
                break;
            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
                cc.log("Fail to download manifest file, hot update skipped.");
                if (this.delegate) {
                    var err = { name: "ERROR_DOWNLOAD_MANIFEST", message: "Fail to download manifest file, hot update skipped." };
                    this.delegate.onCheckUpdateCallBack(err, false);
                }
                break;
            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
                cc.log("Already up to date with the latest remote version.");
                if (this.delegate) {
                    var err = { name: "ALREADY_UP_TO_DATE", message: "Already up to date with the latest remote version." };
                    this.delegate.onCheckUpdateCallBack(err, false);
                }
                break;
            case jsb.EventAssetsManager.NEW_VERSION_FOUND:
                cc.log('New version found, please try to update.');
                if (this.delegate) {
                    this.delegate.onCheckUpdateCallBack(null, true);
                }
                break;
            default:
                return;
        }
        cc.eventManager.removeListener(this.checkListener);
        this.checkListener = null;
        this.updating = false;
    };
    /**
     * 更新回调
     * @param event
     */
    HotUpdate.prototype.updateCb = function (event) {
        var needRestart = false;
        var failed = false;
        switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
                if (this.delegate) {
                    var err = { name: "ERROR_NO_LOCAL_MANIFEST", message: 'No local manifest file found, hot update skipped.' };
                    this.delegate.onUpdateFailed(err);
                }
                failed = true;
                break;
            case jsb.EventAssetsManager.UPDATE_PROGRESSION:
                var byteProgress = event.getPercent();
                var fileProgress = event.getPercentByFile();
                var downloadedFiles = event.getDownloadedFiles();
                var totalFiles = event.getTotalFiles();
                var downloadedBytes = event.getDownloadedBytes();
                var totalBytes = event.getTotalBytes();
                var msg = event.getMessage();
                console.log("Updated file: " + msg + " , progress : " + event.getPercent() / 100 + "%, ");
                if (this.delegate) {
                    this.delegate.onUpdateProgress(event.getTotalFiles(), event.getDownloadedFiles(), event.getPercent() / 100);
                }
                break;
            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
                if (this.delegate) {
                    var err = { name: "ERROR_DOWNLOAD_MANIFEST", message: 'Fail to download manifest file, hot update skipped.' };
                    this.delegate.onUpdateFailed(err);
                }
                failed = true;
                break;
            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
                if (this.delegate) {
                    this.delegate.onUpdateFailed({ name: "ALREADY_UP_TO_DATE", message: 'Already up to date with the latest remote version.' });
                }
                failed = true;
                break;
            case jsb.EventAssetsManager.UPDATE_FINISHED:
                console.log('Update finished. ' + event.getMessage());
                if (this.delegate) {
                    this.delegate.onUpdateFinished();
                }
                needRestart = true;
                break;
            case jsb.EventAssetsManager.UPDATE_FAILED:
                this.updating = false;
                this.canRetry = true;
                console.log('Update failed. ' + event.getMessage());
                if (this.delegate) {
                    this.delegate.onUpdateFailed({ name: "UPDATE_FAILED", message: 'Update failed' });
                }
                break;
            case jsb.EventAssetsManager.ERROR_UPDATING:
                console.log('Asset update error: ' + event.getAssetId() + ', ' + event.getMessage());
                if (this.delegate) {
                    this.delegate.onUpdateFailed({ name: "ERROR_UPDATING", message: 'Asset update error' });
                }
                break;
            case jsb.EventAssetsManager.ERROR_DECOMPRESS:
                console.log('ERROR_DECOMPRESS: ' + event.getMessage());
                if (this.delegate) {
                    this.delegate.onUpdateFailed({ name: "ERROR_DECOMPRESS", message: event.getMessage() });
                }
                break;
            default:
                break;
        }
        cc.eventManager.removeListener(this.updateListener);
        this.updateListener = null;
        this.updating = false;
        if (failed) {
        }
        if (needRestart) {
            // Prepend the manifest's search path
            var searchPaths = jsb.fileUtils.getSearchPaths();
            var newPaths = this.assetsMgr.getLocalManifest().getSearchPaths();
            console.log(JSON.stringify(newPaths));
            Array.prototype.unshift(searchPaths, newPaths);
            // This value will be retrieved and appended to the default search path during game startup,
            // please refer to samples/js-tests/main.js for detailed usage.
            // !!! Re-add the search paths in main.js is very important, otherwise, new scripts won't take effect.
            cc.sys.localStorage.setItem('HotUpdateSearchPaths', JSON.stringify(searchPaths));
            jsb.fileUtils.setSearchPaths(searchPaths);
            cc.audioEngine.stopAll();
            cc.game.restart();
        }
    };
    /**
     * 加载自定义Manifest
     * @param customManifestStr
     */
    HotUpdate.prototype.loadCustomManifest = function (customManifestStr) {
        if (this.assetsMgr.getState() === jsb.AssetsManager.State.UNINITED) {
            var manifest = new jsb.Manifest(customManifestStr, this.storagePath);
            this.assetsMgr.loadLocalManifest(manifest, this.storagePath);
            console.log('Using custom manifest');
        }
    };
    /**
     * 重试
     */
    HotUpdate.prototype.retry = function () {
        if (!this.updating && this.canRetry) {
            cc.log('Retry failed Assets...');
            this.canRetry = false;
            this.assetsMgr.downloadFailedAssets();
        }
    };
    /**
     * 检查更新
     */
    HotUpdate.prototype.checkUpdate = function () {
        do {
            if (this.updating) {
                cc.log('Checking or updating ...');
                break;
            }
            if (this.assetsMgr.getState() === jsb.AssetsManager.State.UNINITED) {
                this.assetsMgr.loadLocalManifest(this.manifestUrl);
            }
            if (!this.assetsMgr.getLocalManifest() || !this.assetsMgr.getLocalManifest().isLoaded()) {
                cc.log('Failed to load local manifest ...');
                break;
            }
            this.checkListener = new jsb.EventListenerAssetsManager(this.assetsMgr, this.checkCb.bind(this));
            cc.eventManager.addListener(this.checkListener, 1);
            //检查更新
            this.assetsMgr.checkUpdate();
            this.updating = true;
        } while (false);
    };
    /**
     * 热更新
     */
    HotUpdate.prototype.hotUpdate = function () {
        do {
            if (!this.assetsMgr || this.updating)
                break;
            this.updateListener = new jsb.EventListenerAssetsManager(this.assetsMgr, this.updateCb.bind(this));
            cc.eventManager.addListener(this.updateListener, 1);
            if (this.assetsMgr.getState() === jsb.AssetsManager.State.UNINITED) {
                this.assetsMgr.loadLocalManifest(this.manifestUrl);
            }
            this.failCount = 0;
            //开始更新
            this.assetsMgr.update();
            this.updating = true;
        } while (false);
    };
    /**
     * Init
     */
    HotUpdate.prototype.init = function () {
        //非原生平台
        if (!cc.sys.isNative)
            return;
        //本地路径
        this.storagePath = ((jsb.fileUtils ? jsb.fileUtils.getWritablePath() : '/') + 'yjgame-remote-asset');
        cc.log('Storage path for remote asset : ' + this.storagePath);
        // Setup your own version compare handler, versionA and B is versions in string
        // if the return value greater than 0, versionA is greater than B,
        // if the return value equals 0, versionA equals to B,
        // if the return value smaller than 0, versionA is smaller than B.
        var versionCompareHandle = function (versionA, versionB) {
            cc.log("JS Custom Version Compare: version A is " + versionA + ', version B is ' + versionB);
            var vA = versionA.split('.');
            var vB = versionB.split('.');
            for (var i = 0; i < vA.length; ++i) {
                var a = parseInt(vA[i]);
                var b = parseInt(vB[i] || 0);
                if (a === b) {
                    continue;
                }
                else {
                    return a - b;
                }
            }
            if (vB.length > vA.length) {
                return -1;
            }
            else {
                return 0;
            }
        };
        // Init with empty manifest url for testing custom manifest
        this.assetsMgr = new jsb.AssetsManager('', this.storagePath, versionCompareHandle);
        if (!cc.sys.ENABLE_GC_FOR_NATIVE_OBJECTS) {
            this.assetsMgr.retain();
        }
        // var panel = this.panel;
        // Setup the verification callback, but we don't have md5 check function yet, so only print some message
        // Return true if the verification passed, otherwise return false
        this.assetsMgr.setVerifyCallback(function (path, asset) {
            // When asset is compressed, we don't need to check its md5, because zip file have been deleted.
            var compressed = asset.compressed;
            // Retrieve the correct md5 value.
            var expectedMD5 = asset.md5;
            // asset.path is relative path and path is absolute.
            var relativePath = asset.path;
            // The size of asset file, but this value could be absent.
            var size = asset.size;
            if (compressed) {
                console.log("Verification passed : " + relativePath);
                return true;
            }
            else {
                console.log("Verification passed : " + relativePath + ' (' + expectedMD5 + ')');
                return true;
            }
        });
        console.log('Hot update is ready, please check or directly update.');
        if (cc.sys.os === cc.sys.OS_ANDROID) {
            // Some Android device may slow down the download process when concurrent tasks is too much.
            // The value may not be accurate, please do more test and find what's most suitable for your game.
            this.assetsMgr.setMaxConcurrentTask(2);
            console.log("Max concurrent tasks count have been limited to 2");
        }
    };
    /**
     * 销毁
     */
    HotUpdate.prototype.destroy = function () {
        if (this.updateListener) {
            cc.eventManager.removeListener(this.updateListener);
            this.updateListener = null;
            this.updating = false;
        }
        if (this.assetsMgr && !cc.sys.ENABLE_GC_FOR_NATIVE_OBJECTS) {
            this.assetsMgr.release();
        }
    };
    return HotUpdate;
}());
exports.HotUpdate = HotUpdate;

cc._RF.pop();
},{}],"HttpClient":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'e4ac5MQjItD0YTunZrBpXzT', 'HttpClient');
// scripts/lobby/module/HttpClient.ts

Object.defineProperty(exports, "__esModule", { value: true });
var HttpClient = (function () {
    function HttpClient() {
    }
    HttpClient.sendRequest = function (url, path, data, handler, method, header) {
        if (method === void 0) { method = 'GET'; }
        if (!method)
            method = 'GET';
        var xhr = new XMLHttpRequest();
        xhr.timeout = 5000;
        var requestURL = url + path;
        if (method == 'GET') {
            requestURL = this.makeUrl(requestURL, data);
        }
        xhr.open(method, requestURL, true);
        if (header)
            this.setHeader(xhr, header);
        var postData = null;
        if (method == 'POST') {
            postData = this.makeParam(data);
            this.setHeader(xhr, { "Content-Type": "application/x-www-form-urlencoded;charset=UTF-8" });
        }
        //timeout handle
        xhr.ontimeout = function (e) {
            handler(null);
        };
        console.log("http req(" + requestURL + ")");
        console.log("Header:" + JSON.stringify(header));
        //state changed call back
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {
                console.log("http res(" + xhr.responseText.length + "):" + xhr.responseText);
                try {
                    var json = JSON.parse(xhr.responseText);
                    if (handler)
                        handler(json);
                }
                catch (e) {
                    console.log("err:" + e);
                    handler(null);
                }
            }
        };
        //send req
        if (postData) {
            xhr.send(postData);
        }
        else {
            xhr.send();
        }
        return xhr;
    };
    HttpClient.get = function (url, path, data, handler, header) {
        this.sendRequest(url, path, data, handler, 'GET', header);
    };
    HttpClient.post = function (url, path, data, handler, header) {
        this.sendRequest(url, path, data, handler, 'POST', header);
    };
    HttpClient.setHeader = function (xhr, headerMap) {
        for (var key in headerMap) {
            xhr.setRequestHeader(key, headerMap[key]);
        }
    };
    HttpClient.makeUrl = function (url, param) {
        if (!param)
            return url;
        return url + '?' + encodeURI(this.makeParam(param));
    };
    HttpClient.makeParam = function (param) {
        var str = '';
        for (var k in param) {
            if (str != '')
                str += "&";
            str += k + "=" + param[k];
        }
        return str;
    };
    return HttpClient;
}());
exports.HttpClient = HttpClient;

cc._RF.pop();
},{}],"Hud":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'b60b7TdoO5A46NxAfmvmmlx', 'Hud');
// scripts/lobby/components/Hud.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Hud = (function (_super) {
    __extends(Hud, _super);
    function Hud() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Hud.prototype.onLoad = function () {
        this.node.active = true;
        this._hudNode = this.node.getChildByName("hud");
    };
    Hud.prototype.update = function (dt) {
        if (this.node.active) {
            if (this._hudNode.rotation >= 360) {
                this._hudNode.rotation = 0;
            }
            this._hudNode.rotation += 3;
        }
    };
    return Hud;
}(cc.Component));
Hud = __decorate([
    ccclass
], Hud);
exports.default = Hud;

cc._RF.pop();
},{}],"Iap":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'be4c7oO2rxGcLJIGLL+I3r2', 'Iap');
// scripts/lobby/module/Iap.ts

Object.defineProperty(exports, "__esModule", { value: true });
var Iap = (function () {
    function Iap() {
    }
    Iap.pay = function (pid) {
        var self = this;
        if (cc.sys.os == cc.sys.OS_IOS) {
            jsb.reflection.callStaticMethod(self.IOS_CLASS_PATH, "iap", pid);
        }
    };
    Iap.onPayResp = function () {
    };
    return Iap;
}());
Iap.IOS_CLASS_PATH = "Api";
exports.default = Iap;

cc._RF.pop();
},{}],"ImgLoader":[function(require,module,exports){
"use strict";
cc._RF.push(module, '235b8/6lldG8aPnm/89YUXw', 'ImgLoader');
// scripts/lobby/components/ImgLoader.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var ImgLoader = (function (_super) {
    __extends(ImgLoader, _super);
    function ImgLoader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImgLoader.prototype.loadImage = function (url, complete) {
        cc.loader.load(url, function (err, texture) {
            if (err) {
                cc.error(err);
                return;
            }
            if (texture) {
                var spriteFrame = new cc.SpriteFrame(texture, cc.rect(0, 0, texture.width, texture.height));
                complete(spriteFrame);
            }
        });
    };
    /**
     * 设置URL
     * @param url
     */
    ImgLoader.prototype.setupWithUrl = function (url) {
        var self = this;
        if (url === null || url === undefined || url === '')
            return;
        this.loadImage(url, function (spriteFrame) {
            self.setupSpriteFrame(spriteFrame);
        });
    };
    /**
     * 设置
     * @param frame
     */
    ImgLoader.prototype.setupSpriteFrame = function (frame) {
        var spr = this.node.getComponent(cc.Sprite);
        if (spr) {
            spr.spriteFrame = frame;
        }
    };
    return ImgLoader;
}(cc.Component));
ImgLoader = __decorate([
    ccclass
], ImgLoader);
exports.default = ImgLoader;

cc._RF.pop();
},{}],"InitializeApp":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'e4ba7Ch5z5MgZx9UoMm83ks', 'InitializeApp');
// scripts/lobby/components/InitializeApp.ts

Object.defineProperty(exports, "__esModule", { value: true });
var Initiator_1 = require("../Initiator");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var InitializeApp = (function (_super) {
    __extends(InitializeApp, _super);
    function InitializeApp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InitializeApp.prototype.onLoad = function () {
        this.init();
    };
    InitializeApp.prototype.init = function () {
        console.log("GAME RUNING...");
        Initiator_1.Initiator.trigger();
    };
    return InitializeApp;
}(cc.Component));
InitializeApp = __decorate([
    ccclass
], InitializeApp);
exports.default = InitializeApp;

cc._RF.pop();
},{"../Initiator":"Initiator"}],"Initiator":[function(require,module,exports){
"use strict";
cc._RF.push(module, '6495ex2lBBEjIpr/z2T/iA/', 'Initiator');
// scripts/lobby/Initiator.ts

Object.defineProperty(exports, "__esModule", { value: true });
var Agora_1 = require("./module/platform/Agora");
var Wechat_1 = require("./module/platform/Wechat");
var Configs_1 = require("./Configs");
var Iap_1 = require("./module/platform/ios/Iap");
var Initiator = (function () {
    function Initiator() {
    }
    Initiator.trigger = function () {
        var cocos = cc;
        cocos.fy = cocos.fy || {};
        cc.fy.configs = Configs_1.Configs;
        //IOS && Android Support
        if (cc.sys.os == cc.sys.OS_IOS || cc.sys.os == cc.sys.OS_ANDROID) {
            cc.fy.wechat = new Wechat_1.Wechat();
            cc.fy.agora = new Agora_1.Agora();
        }
        //Iap Support
        if (cc.sys.os == cc.sys.OS_IOS) {
            cc.fy.iap = new Iap_1.default();
        }
    };
    return Initiator;
}());
exports.Initiator = Initiator;

cc._RF.pop();
},{"./Configs":"Configs","./module/platform/Agora":"Agora","./module/platform/Wechat":"Wechat","./module/platform/ios/Iap":"Iap"}],"Loading":[function(require,module,exports){
"use strict";
cc._RF.push(module, '60d36NDrmtFIYv+BKG/ZKic', 'Loading');
// scripts/lobby/components/Loading.ts

Object.defineProperty(exports, "__esModule", { value: true });
var UserMgr_1 = require("../UserMgr");
var DataMgr_1 = require("../DataMgr");
var Adapter_1 = require("../Adapter");
var Alert_1 = require("./Alert");
var HotUpdate_1 = require("../module/HotUpdate");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Loading = (function (_super) {
    __extends(Loading, _super);
    function Loading() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.progress = 0;
        _this.loaderFinish = false;
        _this.hotUpdate = null;
        return _this;
    }
    Loading.prototype.onLoad = function () {
        Adapter_1.default.adapter(this.node.getComponent(cc.Canvas));
        this.initData();
    };
    /**
     * 初始化数据
     */
    Loading.prototype.initData = function () {
        this.hideAllPanel();
        //如果是原生环境，先检查热跟新
        if (cc.sys.isNative && false) {
            this.startCheckUpdate();
        }
        else {
            this.startLoadAssets();
        }
    };
    /**
     * 开始检查更新
     */
    Loading.prototype.startCheckUpdate = function () {
        //重置加载器
        this.resetProgress();
        this.updateMessage("正在检查版本更新...");
        //开始加载
        this.loaderPanel.active = true;
        this.hotUpdate = new HotUpdate_1.HotUpdate();
        this.hotUpdate.init();
        this.hotUpdate.checkUpdate();
    };
    /**
     * 开始加载数据和场景
     */
    Loading.prototype.startLoadAssets = function () {
        //重置加载器
        this.resetProgress();
        this.updateMessage("正在加载资源，不会消耗流量...");
        var self = this;
        //1.预加载大厅场景
        cc.director.preloadScene('lobby', function () {
            cc.log('scene lobby load finished');
            self.progress += 0.2;
        });
        //2.加载用户信息
        if (UserMgr_1.default.getInstance().logined()) {
            //获取用户信息
            this.requestUserInfo();
            this.updateMessage("正在获取用户信息");
            //开始加载
            this.loaderPanel.active = true;
        }
        else {
            this.loginPanel.active = true;
        }
    };
    /**
     * 更新加载消息
     * @param msg
     */
    Loading.prototype.updateMessage = function (msg) {
        this.messageLabel.string = msg;
    };
    /**
     * 更新加载起
     * @param progress
     */
    Loading.prototype.updateProgress = function (progress) {
        this.progress = progress;
        this.progressBar.progress = progress;
        this.progressLabel.node.active = progress < 1 && progress > 0;
        this.progressLabel.string = progress + "%";
    };
    /**
     * 重置Progress Bar
     */
    Loading.prototype.resetProgress = function () {
        this.updateProgress(0);
        this.updateMessage("");
    };
    /**
     * Btn Event Call Back
     * @param event
     */
    Loading.prototype.onBtnClicked = function (event) {
        var self = this;
        if (event.target.name == "btn_wexin") {
            //微信登录
            UserMgr_1.default.getInstance().wxAuth(function (errcode, code) {
                if (code)
                    self.requestLoginWithCode(code);
            });
        }
        else if (event.target.name == "btn_protocol") {
            this.agreementPanel.active = true;
        }
    };
    /**
     * 登录
     * @param code 微信Code
     */
    Loading.prototype.requestLoginWithCode = function (code) {
        var self = this;
        self.hud.active = true;
        UserMgr_1.default.getInstance().login(code, function (res) {
            if (res && 0 == res.status) {
                self.hud.active = false;
                self.requestUserInfo();
            }
        });
    };
    /**
     * 获取用户信息
     */
    Loading.prototype.requestUserInfo = function () {
        this.loginPanel.active = false;
        this.loaderPanel.active = true;
        var self = this;
        UserMgr_1.default.getInstance().getUserInfo(function (res) {
            if (res && 0 == res.status) {
                self.progress += 0.2;
                self.loadDatas();
            }
        });
    };
    /**
     * 隐藏所有面板
     */
    Loading.prototype.hideAllPanel = function () {
        this.loginPanel.active = false;
        this.loaderPanel.active = false;
    };
    /**
     * 加载所以数据
     */
    Loading.prototype.loadDatas = function () {
        var self = this;
        //1.获取配置
        DataMgr_1.DataMgr.getInstance().getServerConf(function (success) {
            self.progress += 0.2;
        });
        //2.获取广告
        DataMgr_1.DataMgr.getInstance().getAdList(function (success) {
            self.progress += 0.2;
        });
        //3.获取游戏列表
        DataMgr_1.DataMgr.getInstance().getGameList(function (success) {
            self.progress += 0.2;
        });
    };
    Loading.prototype.loadResource = function () {
        //预加载场景和资源
    };
    /**
     * Update
     */
    Loading.prototype.update = function () {
        if (this.loaderPanel.active && !this.loaderFinish)
            this.progressBar.progress = this.progress;
        if (this.progress >= 1) {
            this.loaderFinish = true;
            this.progress = 0;
            //run lobby scene
            cc.director.loadScene("lobby");
        }
    };
    //#############################IMP UPDATE PROTOCOL###################################
    Loading.prototype.onCheckUpdateCallBack = function (err, hasNewVersion) {
        //如果有新版本,热更新
        if (hasNewVersion) {
            //开始热更新
            this.hotUpdate.hotUpdate();
        }
        else {
            //没有更新，直接开始加载资源
            this.startLoadAssets();
        }
    };
    Loading.prototype.onStateChanged = function () {
    };
    Loading.prototype.onUpdateProgress = function (total, current, progress) {
        this.updateProgress(progress);
        this.updateMessage("\u4E0B\u8F7D\u8D44\u6E90\u4E2D..." + current + "/" + total);
    };
    Loading.prototype.onUpdateFinished = function () {
        //没有更新，直接开始加载资源
        this.startLoadAssets();
    };
    Loading.prototype.onUpdateFailed = function (err) {
    };
    Loading.prototype.onDestroy = function () {
        if (cc.sys.isNative) {
            if (this.hotUpdate)
                this.hotUpdate.destroy();
        }
    };
    return Loading;
}(cc.Component));
__decorate([
    property(cc.Node)
], Loading.prototype, "loaderPanel", void 0);
__decorate([
    property(cc.Node)
], Loading.prototype, "loginPanel", void 0);
__decorate([
    property(cc.ProgressBar)
], Loading.prototype, "progressBar", void 0);
__decorate([
    property(cc.Label)
], Loading.prototype, "progressLabel", void 0);
__decorate([
    property(cc.Label)
], Loading.prototype, "messageLabel", void 0);
__decorate([
    property(cc.Node)
], Loading.prototype, "hud", void 0);
__decorate([
    property(Alert_1.default)
], Loading.prototype, "alert", void 0);
__decorate([
    property(cc.Node)
], Loading.prototype, "agreementPanel", void 0);
Loading = __decorate([
    ccclass
], Loading);
exports.default = Loading;

cc._RF.pop();
},{"../Adapter":"Adapter","../DataMgr":"DataMgr","../UserMgr":"UserMgr","../module/HotUpdate":"HotUpdate","./Alert":"Alert"}],"Lobby":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'dd573CfZwVCe4qZ3kqFw+/W', 'Lobby');
// scripts/lobby/components/Lobby.ts

Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = require("../module/Utils");
var Alert_1 = require("./Alert");
var UserMgr_1 = require("../UserMgr");
var ImgLoader_1 = require("./ImgLoader");
var DDZGameDataMgr_1 = require("../../games/ddz/DDZGameDataMgr");
var Adapter_1 = require("../Adapter");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Lobby = Lobby_1 = (function (_super) {
    __extends(Lobby, _super);
    function Lobby() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Lobby.getInstance = function () {
        return this.instance;
    };
    Lobby.prototype.onLoad = function () {
        if (!cc.fy) {
            cc.director.loadScene("loading");
            return;
        }
        Adapter_1.default.adapter(this.node.getComponent(cc.Canvas));
        Lobby_1.instance = this;
        this.initView();
        this.bindingWidget();
        this.bindingEvent();
        this.updateContent();
        this.getRoomInfoAndEnter(true);
    };
    Lobby.prototype.onStart = function () {
    };
    Lobby.prototype.initView = function () {
        this.btnBack.active = false;
        this.btnExit.active = true;
    };
    Lobby.prototype.bindingEvent = function () {
        var list = this._gamelist.getChildByName("list");
        for (var i = 0; i < list.childrenCount; i++) {
            var itemNode = list.children[i];
            Utils_1.default.addClickEvent(itemNode, this.node, "Lobby", "onGameItemClicked");
        }
        this.node.on("event_created", this.onEventCreateRoomCallBack);
    };
    Lobby.prototype.bindingWidget = function () {
        var main = this.node.getChildByName("main");
        this._top = main.getChildByName("top");
        this._center = main.getChildByName("center");
        this._bottom = main.getChildByName("bottom");
        this._gamelist = this._center.getChildByName("gamelist");
        this._gameroom = this._center.getChildByName("gameroom");
        this.alert = this.node.getChildByName("alert").getComponent(Alert_1.default);
        this.alert.node.active = true;
        var topBg = this._top.getChildByName("top_bg");
        this.nickLabel = topBg.getChildByName("nick_bg").getChildByName("name_bg").getChildByName("nick").getComponent(cc.Label);
        this.vipFlag = topBg.getChildByName("nick_bg").getChildByName("vip_bg");
        this.avatarImgLoader = topBg.getChildByName("avatar").getComponentInChildren(ImgLoader_1.default);
        this.diamondLabel = topBg.getChildByName("diamond_bg").getChildByName("diamond").getComponent(cc.Label);
        this.goldLabel = topBg.getChildByName("gold_bg").getChildByName("gold").getComponent(cc.Label);
    };
    //call back
    Lobby.prototype.onEventCreateRoomCallBack = function (event) {
        console.log("onEventCreateRoomCallBack");
        var res = event.detail;
        var room = res.data;
        var self = Lobby_1.getInstance();
        if (room && !Utils_1.isNullStr(room.room_number)) {
            var user = UserMgr_1.default.getInstance().getUser();
            user.setRoomId(room.room_number);
            self.enterRoom(res);
        }
    };
    Lobby.prototype.updateContent = function () {
        var user = UserMgr_1.default.getInstance().getUser();
        //avatar
        this.avatarImgLoader.setupWithUrl(user.getAvatarUrl());
        this.vipFlag.active = user.isVip();
        this.nickLabel.string = user.getNick();
        this.goldLabel.string = '' + user.getGold();
        this.diamondLabel.string = '' + user.getDiamond();
    };
    Lobby.prototype.onGameItemClicked = function (event) {
        this.showGameRoom();
    };
    Lobby.prototype.aniShow = function (showNode, hideNode) {
        if (showNode.active)
            return;
        showNode.active = true;
        showNode.opacity = 0;
        var fi_act = cc.fadeIn(0.5);
        var fo_fin = cc.callFunc(function () {
            console.log("ani finish");
        });
        var fi_seq = cc.sequence(fi_act, fo_fin);
        var fo_act = cc.fadeOut(0.5);
        var fo_fin = cc.callFunc(function () {
            hideNode.active = false;
            showNode.runAction(fi_seq);
        });
        var fo_seq = cc.sequence(fo_act, fo_fin);
        if (hideNode.active)
            hideNode.runAction(fo_seq);
        else
            showNode.runAction(fi_seq);
    };
    Lobby.prototype.showGameRoom = function () {
        var self = this;
        this.aniShow(this._gameroom, this._gamelist);
        var act = cc.moveBy(0.5, cc.p(0, 150));
        var call = cc.callFunc(function () {
            self.btnExit.active = false;
            self.btnBack.active = true;
        });
        var time = cc.delayTime(0.1);
        var act2 = cc.moveBy(0.5, cc.p(0, -150));
        var seq1 = cc.sequence(act, call, time, act2);
        var seq2 = cc.sequence(act2, call, time, act);
        this._top.runAction(seq1);
        this._bottom.runAction(seq2);
    };
    Lobby.prototype.showGameList = function () {
        var self = this;
        this.aniShow(this._gamelist, this._gameroom);
        var act = cc.moveBy(0.5, cc.p(0, 150));
        var call = cc.callFunc(function () {
            self.btnExit.active = true;
            self.btnBack.active = false;
        });
        var time = cc.delayTime(0.1);
        var act2 = cc.moveBy(0.5, cc.p(0, -150));
        var seq1 = cc.sequence(act, call, time, act2);
        var seq2 = cc.sequence(act2, call, time, act);
        this._top.runAction(seq1);
        this._bottom.runAction(seq2);
    };
    Lobby.prototype.switchRechargeType = function (type) {
        // switch(type) {
        //     case "gold": 
        //     this.togDiamond.isChecked = false;
        //     this.togGold.isChecked = true;
        //     break;
        //     case "diamond":
        //     this.togGold.isChecked = false;
        //     this.togDiamond.isChecked = true;
        //     break;
        // }
    };
    /**
     * Clicked Call Back
     * @param event
     */
    Lobby.prototype.onBtnClicked = function (event) {
        switch (event.target.name) {
            case "btn_info":
                this.achievement.active = false;
                this.achievementInfo.active = true;
                break;
            case "gold_bg":
                this.recharge.active = true;
                this.switchRechargeType("gold");
                break;
            case "diamond_bg":
                this.recharge.active = true;
                this.switchRechargeType("diamond");
                break;
            case "btn_recharge":
                this.recharge.active = true;
                break;
            case "vip":
                this.userinfo.active = false;
                this.recharge.active = true;
                break;
            case "btn_checkin":
                this.checkin.active = true;
                break;
            case "avatar":
                this.userinfo.active = true;
                break;
            case "btn_setting":
                this.setting.active = true;
                break;
            case "btn_message":
                this.setting.active = true;
                break;
            case "quick":
                this.showGameList();
                break;
            case "btn_create":
                this.creatroom.active = true;
                break;
            case "btn_join":
                this.joinroom.active = true;
                break;
            case "btn_enter":
                cc.director.loadScene("ddzgame");
                break;
            //Bottom buttons
            case "btn_activity":
                this.activity.active = true;
                break;
            case "btn_share":
                this.share.active = true;
                break;
            case "btn_achievement":
                this.achievement.active = true;
                break;
            case "btn_bak":
                this.showGameList();
                break;
            case "btn_exit":
                this.alert.alert("推出成功");
                break;
            case "wechat_friend":
                cc.fy.wechat.share(cc.fy.configs.WXShareUrl, "姚记棋牌", "来一起玩姚记棋牌", 0);
                break;
            case "wechat_scope":
                cc.fy.wechat.share(cc.fy.configs.WXShareUrl, "姚记棋牌", "来一起玩姚记棋牌", 1);
                break;
            default:
        }
    };
    Lobby.prototype.update = function (dt) {
        var x = this.lblNotice.x;
        x -= dt * 100;
        if (x + this.lblNotice.width < -1000) {
            x = 500;
        }
        this.lblNotice.x = x;
    };
    /**
     * 获取房间信息，然后进入房间
     */
    Lobby.prototype.getRoomInfoAndEnter = function (checkIsInRoom) {
        if (checkIsInRoom === void 0) { checkIsInRoom = false; }
        console.log("getRoomInfoAndEnter");
        var self = this;
        var userMgr = UserMgr_1.default.getInstance();
        var user = userMgr.getUser();
        var getInfoAndEnter = function () {
            self.hud.active = true;
            userMgr.getRoomInfo(user.getRoomId(), function (res) {
                self.hud.active = false;
                console.log("self.enterRoom( roomData );");
                self.enterRoom(res);
            });
        };
        if (checkIsInRoom) {
            if (userMgr.isInRoom()) {
                getInfoAndEnter();
            }
        }
        else {
            getInfoAndEnter();
        }
    };
    /**
     * 进入房间
     * @param roomData
     */
    Lobby.prototype.enterRoom = function (roomData) {
        console.log("开始进入房间");
        var user = UserMgr_1.default.getInstance().getUser();
        if (roomData) {
            if (roomData.status === 0) {
                this.tranToDDZGame(roomData, user.getToken());
            }
            else {
                this.alert.alert(roomData.msg);
            }
        }
        else {
            this.alert.alert("请求错误，请稍后再试！");
        }
    };
    Lobby.prototype.tranToDDZGame = function (roomData, token) {
        console.log("tranToDDZGame");
        var dataMgr = DDZGameDataMgr_1.DDZGameDataMgr.getInstance();
        var user = UserMgr_1.default.getInstance().getUser();
        dataMgr.connectGameServer(roomData.data, token, user.getNick(), user.getAvatarUrl());
    };
    return Lobby;
}(cc.Component));
__decorate([
    property(cc.Node)
], Lobby.prototype, "setting", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "share", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "activity", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "message", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "userinfo", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "signin", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "recharge", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "achievement", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "hud", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "creatroom", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "joinroom", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "lblNotice", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "btnExit", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "btnBack", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "checkin", void 0);
__decorate([
    property(cc.Node)
], Lobby.prototype, "achievementInfo", void 0);
Lobby = Lobby_1 = __decorate([
    ccclass
], Lobby);
exports.default = Lobby;
var Lobby_1;

cc._RF.pop();
},{"../../games/ddz/DDZGameDataMgr":"DDZGameDataMgr","../Adapter":"Adapter","../UserMgr":"UserMgr","../module/Utils":"Utils","./Alert":"Alert","./ImgLoader":"ImgLoader"}],"Native":[function(require,module,exports){
"use strict";
cc._RF.push(module, '5fb9dUWdJNBRrXjhFSeeI9D', 'Native');
// scripts/lobby/module/Native.ts

/*
Native Caller
bool/string/number/string/function
调用
    andrid -> org.cocos2dx.javascript.Native.SayHello(String helloString, String cbName);
    ios    -> Native.SayHello : (NSString*) helloString
                         arg1 : (NSString*) cbName;
写法
native.call("SayHello", "hello world", (ok) => { })
native.callClz("Native", "SayHello", "hello world", (ok) => { })
*/
Object.defineProperty(exports, "__esModule", { value: true });
var Native = (function () {
    function Native() {
        this.cbs = {};
        this.cbIdx = 0;
        var self = this;
        window.js_native_cb = function (cbID) {
            var func = self.cbs[cbID];
            if (func) {
                delete self.cbs[cbID];
                var args = Array.prototype.slice.call(arguments);
                args.splice(0, 1);
                func.apply(null, args);
            }
            else {
                cc.log("no func ", cbID);
            }
        };
    }
    Native.prototype._newCB = function (f) {
        this.cbIdx++;
        var cbID = "" + this.cbIdx;
        this.cbs[cbID] = f;
        return cbID;
    };
    Native.prototype.call = function () {
        var args = Array.prototype.slice.call(arguments);
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            args.splice(0, 0, "Native");
        }
        else if (cc.sys.os == cc.sys.OS_IOS) {
            args.splice(0, 0, "Native");
        }
        else {
            return;
        }
        this.callClz.apply(this, args);
    };
    Native.prototype.callClz = function (clz, funcName) {
        var _this = this;
        var args = Array.prototype.slice.call(arguments);
        args.splice(0, 2);
        var real_args = [clz, funcName];
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            real_args[0] = "org/cocos2dx/javascript/" + clz;
            real_args[2] = "()V";
            if (args.length > 0) {
                var sig_1 = "";
                args.forEach(function (v) {
                    switch (typeof v) {
                        case 'boolean':
                            sig_1 += "Z";
                            real_args.push(v);
                            break;
                        case 'string':
                            sig_1 += "Ljava/lang/String;";
                            real_args.push(v);
                            break;
                        case 'number':
                            sig_1 += "D";
                            real_args.push(v);
                            break;
                        case 'function':
                            sig_1 += "Ljava/lang/String;";
                            real_args.push(_this._newCB(v));
                            break;
                    }
                });
                real_args[2] = "(" + sig_1 + ")V";
            }
        }
        else if (cc.sys.os == cc.sys.OS_IOS) {
            if (args.length > 0) {
                for (var i = 0; i < args.length; i++) {
                    var v = args[i];
                    if (typeof v == "function") {
                        real_args.push(this._newCB(v));
                    }
                    else {
                        real_args.push(v);
                    }
                    if (i == 0) {
                        funcName += ":";
                    }
                    else {
                        funcName += "arg" + i + ":";
                    }
                }
                real_args[1] = funcName;
            }
        }
        else {
            return;
        }
        return jsb.reflection.callStaticMethod.apply(jsb.reflection, real_args);
    };
    return Native;
}());
exports.Native = Native;

cc._RF.pop();
},{}],"Net":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'abe8drd+UVJzbYhk0SK+Wgt', 'Net');
// scripts/lobby/module/Net.ts

Object.defineProperty(exports, "__esModule", { value: true });
if (window.io == null) {
    window.io = require("Socket-io");
}
var wsocket = window.io;
var Net = (function () {
    function Net() {
        this.handlers = {};
        this.isConnected = false;
        this.needAutoRec = false;
        this.timer = -1;
        this.lastRecTime = -1;
    }
    Net.getInstance = function () {
        if (null === this.instance)
            this.instance = new Net();
        return this.instance;
    };
    Net.prototype.setDisconnectCb = function (cb) {
        if (typeof (cb) == "function")
            this.onDisconnect = cb;
    };
    Net.prototype.setConnectCb = function (cb) {
        if (typeof (cb) == "function")
            this.onConnect = cb;
    };
    Net.prototype.addHandler = function (ev, cb) {
        if (this.handlers[ev])
            return;
        var onHandel = function (data) {
            if (typeof (data) == 'string')
                data = JSON.parse(data);
            cb(data);
        };
        this.handlers[ev] = onHandel;
        if (this.sio)
            this.sio.on(ev, onHandel);
    };
    Net.prototype.connect = function (ip, cb) {
        this.ip = ip;
        if (cb)
            this.setConnectCb(cb);
        this.initSio(ip);
    };
    Net.prototype.reconnect = function () {
        this.initSio(this.ip);
    };
    Net.prototype.initSio = function (ip) {
        var opts = { "reconnection": false, "force new connection": true, "transports": ['websocket', 'polling'] };
        this.sio = wsocket.connect(this.ip, opts);
        this.handelEvents();
    };
    Net.prototype.handelEvents = function () {
        var self = this;
        this.sio.on("connect", function (data) {
            console.log("\n连接成功");
            // self.needAutoRec = true;
            self.sio.connected = true;
            if (self.onConnect)
                self.onConnect(true);
            self.startHearbeat();
        });
        this.sio.on("connect_timeout", function () {
            console.log("\n连接超时，重试...");
            if (self.onConnect)
                self.onConnect(false);
        });
        this.sio.on("connect_error", function () {
            console.log("\n连接错误，重试...");
            if (self.onConnect)
                self.onConnect(false);
        });
        //2.网络问题断开 3.客户端退出，网络不好断开
        this.sio.on("disconnect", function (reason) {
            console.log("\n断开连接");
            //1.被服务端断开，解散房间，退出，游戏结束---返回大厅
            if (reason == 'io server disconnect') {
                self.needAutoRec = false;
            }
            if (self.onDisconnect) {
                self.onDisconnect(self.needAutoRec);
            }
            self.stopHearbeat();
            if (self.needAutoRec)
                self.autoReconnect();
        });
        for (var k in this.handlers) {
            var v = this.handlers[k];
            if (typeof (v) == "function")
                this.sio.on(k, v);
        }
    };
    Net.prototype.disConnect = function () {
        if (!this.sio)
            return;
        this.needAutoRec = false;
        this.isConnected = false;
        this.sio.connected = false;
        this.sio.disconnect();
        this.sio = null;
    };
    //自动重连
    Net.prototype.autoReconnect = function () {
        this.disConnect();
        console.log("\n断线重连...");
        this.reconnect();
    };
    Net.prototype.send = function (event, data) {
        if (data === void 0) { data = null; }
        if (!this.sio || !this.sio.connected)
            return;
        if (data != null && typeof (data) == "object") {
            data = JSON.stringify(data);
        }
        this.sio.emit(event, data);
    };
    Net.prototype.sendPing = function () {
        this.send("game_ping");
    };
    Net.prototype.stopHearbeat = function () {
        clearInterval(this.timer);
    };
    Net.prototype.startHearbeat = function () {
        var self = this;
        this.sio.on('game_pong', function () {
            console.log('\npong');
            self.lastRecTime = Date.now();
        });
        var timeUpdate = function () {
            if (!self.sio)
                return;
            if (Date.now() - self.lastRecTime > 15000) {
                console.log("\n超时断线");
                clearInterval(self.timer);
                //断开连接
                self.sio.disconnect();
            }
            else
                self.sendPing();
        };
        clearInterval(this.timer);
        this.lastRecTime = Date.now();
        this.timer = setInterval(timeUpdate, 6000);
    };
    return Net;
}());
Net.instance = null;
exports.default = Net;

cc._RF.pop();
},{"Socket-io":"Socket-io"}],"Prompt":[function(require,module,exports){
"use strict";
cc._RF.push(module, '4f1c9i2F/JFkpMqBTewuctk', 'Prompt');
// scripts/lobby/components/Prompt.js

"use strict";

var _Utils = require("../module/Utils");

cc.Class({
    extends: cc.Component,

    properties: {
        _alert: null,
        _btnOK: null,
        _btnCancel: null,
        _title: null,
        _content: null,
        _onok: null
    },

    onLoad: function onLoad() {
        if (cc.fy == null) {
            return;
        }
        this._alert = cc.find("Canvas/alert");
        this._title = cc.find("Canvas/alert/title").getComponent(cc.Label);
        this._content = cc.find("Canvas/alert/content").getComponent(cc.Label);

        this._btnOK = cc.find("Canvas/alert/btn_ok");
        this._btnCancel = cc.find("Canvas/alert/btn_cancel");

        (0, _Utils.addClickEvent)(this._btnOK, this.node, "Alert", "onBtnClicked");
        (0, _Utils.addClickEvent)(this._btnCancel, this.node, "Alert", "onBtnClicked");

        this._alert.active = false;
        cc.fy.alert = this;
    },

    onBtnClicked: function onBtnClicked(event) {
        if (event.target.name == "btn_ok") {
            if (this._onok) {
                this._onok();
            }
        }
        this._alert.active = false;
        this._onok = null;
    },

    show: function show(title, content, onok, needcancel) {
        this._alert.active = true;
        this._onok = onok;
        this._title.string = title;
        this._content.string = content;
        if (needcancel) {
            this._btnCancel.active = true;
            this._btnOK.x = -150;
            this._btnCancel.x = 150;
        } else {
            this._btnCancel.active = false;
            this._btnOK.x = 0;
        }
    },

    onDestory: function onDestory() {
        if (cc.fy) {
            cc.fy.alert = null;
        }
    }
});

cc._RF.pop();
},{"../module/Utils":"Utils"}],"Setting":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'd5725RMEbZHjKZLZvtwmWYi', 'Setting');
// scripts/lobby/components/Setting.ts

Object.defineProperty(exports, "__esModule", { value: true });
var AudioMgr_1 = require("../module/AudioMgr");
var Checkbox_1 = require("./Checkbox");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Setting = (function (_super) {
    __extends(Setting, _super);
    function Setting() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Setting.prototype.onLoad = function () {
        this.refreshVolume();
    };
    Setting.prototype.refreshVolume = function () {
        this.effectCheckbox.setChecked(AudioMgr_1.default.getInstance().sfxVolume > 0);
        this.musicCheckbox.setChecked(AudioMgr_1.default.getInstance().bgmVolume > 0);
    };
    Setting.prototype.onCheckboxChanged = function (checkbox) {
        if (checkbox === this.musicCheckbox) {
            AudioMgr_1.default.getInstance().bgmVolume = 1;
            this.refreshVolume();
        }
        else if (checkbox === this.effectCheckbox) {
            AudioMgr_1.default.getInstance().sfxVolume = 1;
            this.refreshVolume();
        }
        else if (checkbox === this.shakeCheckbox) {
            AudioMgr_1.default.getInstance().switchShake(checkbox.checked);
        }
    };
    Setting.prototype.onBtnClicked = function (event) {
        if (event.target.name === "btn4") {
            console.log("切换账号");
        }
        else if (event.target.name === "btn5") {
            console.log("关于");
        }
    };
    return Setting;
}(cc.Component));
__decorate([
    property(Checkbox_1.Checkbox)
], Setting.prototype, "musicCheckbox", void 0);
__decorate([
    property(Checkbox_1.Checkbox)
], Setting.prototype, "effectCheckbox", void 0);
__decorate([
    property(Checkbox_1.Checkbox)
], Setting.prototype, "shakeCheckbox", void 0);
Setting = __decorate([
    ccclass
], Setting);
exports.default = Setting;

cc._RF.pop();
},{"../module/AudioMgr":"AudioMgr","./Checkbox":"Checkbox"}],"Socket-io":[function(require,module,exports){
(function (global){
"use strict";
cc._RF.push(module, 'b6112O+YoFHjbEATEgcuftv', 'Socket-io');
// scripts/lobby/module/Socket-io.js

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if (!CC_JSB && !cc.sys.isNative) {
	(function (f) {
		if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object" && typeof module !== "undefined") {
			module.exports = f();
		} else if (typeof define === "function" && define.amd) {
			define([], f);
		} else {
			var g;if (typeof window !== "undefined") {
				g = window;
			} else if (typeof global !== "undefined") {
				g = global;
			} else if (typeof self !== "undefined") {
				g = self;
			} else {
				g = this;
			}g.io = f();
		}
	})(function () {
		var define, module, exports;return function e(t, n, r) {
			function s(o, u) {
				if (!n[o]) {
					if (!t[o]) {
						var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
					}var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
						var n = t[o][1][e];return s(n ? n : e);
					}, l, l.exports, e, t, n, r);
				}return n[o].exports;
			}var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) {
				s(r[o]);
			}return s;
		}({ 1: [function (_dereq_, module, exports) {

				module.exports = _dereq_('./lib/');
			}, { "./lib/": 2 }], 2: [function (_dereq_, module, exports) {

				module.exports = _dereq_('./socket');

				/**
     * Exports parser
     *
     * @api public
     *
     */
				module.exports.parser = _dereq_('engine.io-parser');
			}, { "./socket": 3, "engine.io-parser": 19 }], 3: [function (_dereq_, module, exports) {
				(function (global) {
					/**
      * Module dependencies.
      */

					var transports = _dereq_('./transports');
					var Emitter = _dereq_('component-emitter');
					var debug = _dereq_('debug')('engine.io-client:socket');
					var index = _dereq_('indexof');
					var parser = _dereq_('engine.io-parser');
					var parseuri = _dereq_('parseuri');
					var parsejson = _dereq_('parsejson');
					var parseqs = _dereq_('parseqs');

					/**
      * Module exports.
      */

					module.exports = Socket;

					/**
      * Noop function.
      *
      * @api private
      */

					function noop() {}

					/**
      * Socket constructor.
      *
      * @param {String|Object} uri or options
      * @param {Object} options
      * @api public
      */

					function Socket(uri, opts) {
						if (!(this instanceof Socket)) return new Socket(uri, opts);

						opts = opts || {};

						if (uri && 'object' == (typeof uri === "undefined" ? "undefined" : _typeof(uri))) {
							opts = uri;
							uri = null;
						}

						if (uri) {
							uri = parseuri(uri);
							opts.hostname = uri.host;
							opts.secure = uri.protocol == 'https' || uri.protocol == 'wss';
							opts.port = uri.port;
							if (uri.query) opts.query = uri.query;
						} else if (opts.host) {
							opts.hostname = parseuri(opts.host).host;
						}

						this.secure = null != opts.secure ? opts.secure : global.location && 'https:' == location.protocol;

						if (opts.hostname && !opts.port) {
							// if no port is specified manually, use the protocol default
							opts.port = this.secure ? '443' : '80';
						}

						this.agent = opts.agent || false;
						this.hostname = opts.hostname || (global.location ? location.hostname : 'localhost');
						this.port = opts.port || (global.location && location.port ? location.port : this.secure ? 443 : 80);
						this.query = opts.query || {};
						if ('string' == typeof this.query) this.query = parseqs.decode(this.query);
						this.upgrade = false !== opts.upgrade;
						this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
						this.forceJSONP = !!opts.forceJSONP;
						this.jsonp = false !== opts.jsonp;
						this.forceBase64 = !!opts.forceBase64;
						this.enablesXDR = !!opts.enablesXDR;
						this.timestampParam = opts.timestampParam || 't';
						this.timestampRequests = opts.timestampRequests;
						this.transports = opts.transports || ['polling', 'websocket'];
						this.readyState = '';
						this.writeBuffer = [];
						this.policyPort = opts.policyPort || 843;
						this.rememberUpgrade = opts.rememberUpgrade || false;
						this.binaryType = null;
						this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
						this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;

						if (true === this.perMessageDeflate) this.perMessageDeflate = {};
						if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
							this.perMessageDeflate.threshold = 1024;
						}

						// SSL options for Node.js client
						this.pfx = opts.pfx || null;
						this.key = opts.key || null;
						this.passphrase = opts.passphrase || null;
						this.cert = opts.cert || null;
						this.ca = opts.ca || null;
						this.ciphers = opts.ciphers || null;
						this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;

						// other options for Node.js client
						var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global;
						if (freeGlobal.global === freeGlobal) {
							if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
								this.extraHeaders = opts.extraHeaders;
							}
						}

						this.open();
					}

					Socket.priorWebsocketSuccess = false;

					/**
      * Mix in `Emitter`.
      */

					Emitter(Socket.prototype);

					/**
      * Protocol version.
      *
      * @api public
      */

					Socket.protocol = parser.protocol; // this is an int

					/**
      * Expose deps for legacy compatibility
      * and standalone browser access.
      */

					Socket.Socket = Socket;
					Socket.Transport = _dereq_('./transport');
					Socket.transports = _dereq_('./transports');
					Socket.parser = _dereq_('engine.io-parser');

					/**
      * Creates transport of the given type.
      *
      * @param {String} transport name
      * @return {Transport}
      * @api private
      */

					Socket.prototype.createTransport = function (name) {
						debug('creating transport "%s"', name);
						var query = clone(this.query);

						// append engine.io protocol identifier
						query.EIO = parser.protocol;

						// transport name
						query.transport = name;

						// session id if we already have one
						if (this.id) query.sid = this.id;

						var transport = new transports[name]({
							agent: this.agent,
							hostname: this.hostname,
							port: this.port,
							secure: this.secure,
							path: this.path,
							query: query,
							forceJSONP: this.forceJSONP,
							jsonp: this.jsonp,
							forceBase64: this.forceBase64,
							enablesXDR: this.enablesXDR,
							timestampRequests: this.timestampRequests,
							timestampParam: this.timestampParam,
							policyPort: this.policyPort,
							socket: this,
							pfx: this.pfx,
							key: this.key,
							passphrase: this.passphrase,
							cert: this.cert,
							ca: this.ca,
							ciphers: this.ciphers,
							rejectUnauthorized: this.rejectUnauthorized,
							perMessageDeflate: this.perMessageDeflate,
							extraHeaders: this.extraHeaders
						});

						return transport;
					};

					function clone(obj) {
						var o = {};
						for (var i in obj) {
							if (obj.hasOwnProperty(i)) {
								o[i] = obj[i];
							}
						}
						return o;
					}

					/**
      * Initializes transport to use and starts probe.
      *
      * @api private
      */
					Socket.prototype.open = function () {
						var transport;
						if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') != -1) {
							transport = 'websocket';
						} else if (0 === this.transports.length) {
							// Emit error on next tick so it can be listened to
							var self = this;
							setTimeout(function () {
								self.emit('error', 'No transports available');
							}, 0);
							return;
						} else {
							transport = this.transports[0];
						}
						this.readyState = 'opening';

						// Retry with the next transport if the transport is disabled (jsonp: false)
						try {
							transport = this.createTransport(transport);
						} catch (e) {
							this.transports.shift();
							this.open();
							return;
						}

						transport.open();
						this.setTransport(transport);
					};

					/**
      * Sets the current transport. Disables the existing one (if any).
      *
      * @api private
      */

					Socket.prototype.setTransport = function (transport) {
						debug('setting transport %s', transport.name);
						var self = this;

						if (this.transport) {
							debug('clearing existing transport %s', this.transport.name);
							this.transport.removeAllListeners();
						}

						// set up transport
						this.transport = transport;

						// set up transport listeners
						transport.on('drain', function () {
							self.onDrain();
						}).on('packet', function (packet) {
							self.onPacket(packet);
						}).on('error', function (e) {
							self.onError(e);
						}).on('close', function () {
							self.onClose('transport close');
						});
					};

					/**
      * Probes a transport.
      *
      * @param {String} transport name
      * @api private
      */

					Socket.prototype.probe = function (name) {
						debug('probing transport "%s"', name);
						var transport = this.createTransport(name, { probe: 1 }),
						    failed = false,
						    self = this;

						Socket.priorWebsocketSuccess = false;

						function onTransportOpen() {
							if (self.onlyBinaryUpgrades) {
								var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
								failed = failed || upgradeLosesBinary;
							}
							if (failed) return;

							debug('probe transport "%s" opened', name);
							transport.send([{ type: 'ping', data: 'probe' }]);
							transport.once('packet', function (msg) {
								if (failed) return;
								if ('pong' == msg.type && 'probe' == msg.data) {
									debug('probe transport "%s" pong', name);
									self.upgrading = true;
									self.emit('upgrading', transport);
									if (!transport) return;
									Socket.priorWebsocketSuccess = 'websocket' == transport.name;

									debug('pausing current transport "%s"', self.transport.name);
									self.transport.pause(function () {
										if (failed) return;
										if ('closed' == self.readyState) return;
										debug('changing transport and sending upgrade packet');

										cleanup();

										self.setTransport(transport);
										transport.send([{ type: 'upgrade' }]);
										self.emit('upgrade', transport);
										transport = null;
										self.upgrading = false;
										self.flush();
									});
								} else {
									debug('probe transport "%s" failed', name);
									var err = new Error('probe error');
									err.transport = transport.name;
									self.emit('upgradeError', err);
								}
							});
						}

						function freezeTransport() {
							if (failed) return;

							// Any callback called by transport should be ignored since now
							failed = true;

							cleanup();

							transport.close();
							transport = null;
						}

						//Handle any error that happens while probing
						function onerror(err) {
							var error = new Error('probe error: ' + err);
							error.transport = transport.name;

							freezeTransport();

							debug('probe transport "%s" failed because of error: %s', name, err);

							self.emit('upgradeError', error);
						}

						function onTransportClose() {
							onerror("transport closed");
						}

						//When the socket is closed while we're probing
						function onclose() {
							onerror("socket closed");
						}

						//When the socket is upgraded while we're probing
						function onupgrade(to) {
							if (transport && to.name != transport.name) {
								debug('"%s" works - aborting "%s"', to.name, transport.name);
								freezeTransport();
							}
						}

						//Remove all listeners on the transport and on self
						function cleanup() {
							transport.removeListener('open', onTransportOpen);
							transport.removeListener('error', onerror);
							transport.removeListener('close', onTransportClose);
							self.removeListener('close', onclose);
							self.removeListener('upgrading', onupgrade);
						}

						transport.once('open', onTransportOpen);
						transport.once('error', onerror);
						transport.once('close', onTransportClose);

						this.once('close', onclose);
						this.once('upgrading', onupgrade);

						transport.open();
					};

					/**
      * Called when connection is deemed open.
      *
      * @api public
      */

					Socket.prototype.onOpen = function () {
						debug('socket open');
						this.readyState = 'open';
						Socket.priorWebsocketSuccess = 'websocket' == this.transport.name;
						this.emit('open');
						this.flush();

						// we check for `readyState` in case an `open`
						// listener already closed the socket
						if ('open' == this.readyState && this.upgrade && this.transport.pause) {
							debug('starting upgrade probes');
							for (var i = 0, l = this.upgrades.length; i < l; i++) {
								this.probe(this.upgrades[i]);
							}
						}
					};

					/**
      * Handles a packet.
      *
      * @api private
      */

					Socket.prototype.onPacket = function (packet) {
						if ('opening' == this.readyState || 'open' == this.readyState) {
							debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

							this.emit('packet', packet);

							// Socket is live - any packet counts
							this.emit('heartbeat');

							switch (packet.type) {
								case 'open':
									this.onHandshake(parsejson(packet.data));
									break;

								case 'pong':
									this.setPing();
									this.emit('pong');
									break;

								case 'error':
									var err = new Error('server error');
									err.code = packet.data;
									this.onError(err);
									break;

								case 'message':
									this.emit('data', packet.data);
									this.emit('message', packet.data);
									break;
							}
						} else {
							debug('packet received with socket readyState "%s"', this.readyState);
						}
					};

					/**
      * Called upon handshake completion.
      *
      * @param {Object} handshake obj
      * @api private
      */

					Socket.prototype.onHandshake = function (data) {
						this.emit('handshake', data);
						this.id = data.sid;
						this.transport.query.sid = data.sid;
						this.upgrades = this.filterUpgrades(data.upgrades);
						this.pingInterval = data.pingInterval;
						this.pingTimeout = data.pingTimeout;
						this.onOpen();
						// In case open handler closes socket
						if ('closed' == this.readyState) return;
						this.setPing();

						// Prolong liveness of socket on heartbeat
						this.removeListener('heartbeat', this.onHeartbeat);
						this.on('heartbeat', this.onHeartbeat);
					};

					/**
      * Resets ping timeout.
      *
      * @api private
      */

					Socket.prototype.onHeartbeat = function (timeout) {
						clearTimeout(this.pingTimeoutTimer);
						var self = this;
						self.pingTimeoutTimer = setTimeout(function () {
							if ('closed' == self.readyState) return;
							self.onClose('ping timeout');
						}, timeout || self.pingInterval + self.pingTimeout);
					};

					/**
      * Pings server every `this.pingInterval` and expects response
      * within `this.pingTimeout` or closes connection.
      *
      * @api private
      */

					Socket.prototype.setPing = function () {
						var self = this;
						clearTimeout(self.pingIntervalTimer);
						self.pingIntervalTimer = setTimeout(function () {
							debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
							self.ping();
							self.onHeartbeat(self.pingTimeout);
						}, self.pingInterval);
					};

					/**
     * Sends a ping packet.
     *
     * @api private
     */

					Socket.prototype.ping = function () {
						var self = this;
						this.sendPacket('ping', function () {
							self.emit('ping');
						});
					};

					/**
      * Called on `drain` event
      *
      * @api private
      */

					Socket.prototype.onDrain = function () {
						this.writeBuffer.splice(0, this.prevBufferLen);

						// setting prevBufferLen = 0 is very important
						// for example, when upgrading, upgrade packet is sent over,
						// and a nonzero prevBufferLen could cause problems on `drain`
						this.prevBufferLen = 0;

						if (0 === this.writeBuffer.length) {
							this.emit('drain');
						} else {
							this.flush();
						}
					};

					/**
      * Flush write buffers.
      *
      * @api private
      */

					Socket.prototype.flush = function () {
						if ('closed' != this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
							debug('flushing %d packets in socket', this.writeBuffer.length);
							this.transport.send(this.writeBuffer);
							// keep track of current length of writeBuffer
							// splice writeBuffer and callbackBuffer on `drain`
							this.prevBufferLen = this.writeBuffer.length;
							this.emit('flush');
						}
					};

					/**
      * Sends a message.
      *
      * @param {String} message.
      * @param {Function} callback function.
      * @param {Object} options.
      * @return {Socket} for chaining.
      * @api public
      */

					Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {
						this.sendPacket('message', msg, options, fn);
						return this;
					};

					/**
      * Sends a packet.
      *
      * @param {String} packet type.
      * @param {String} data.
      * @param {Object} options.
      * @param {Function} callback function.
      * @api private
      */

					Socket.prototype.sendPacket = function (type, data, options, fn) {
						if ('function' == typeof data) {
							fn = data;
							data = undefined;
						}

						if ('function' == typeof options) {
							fn = options;
							options = null;
						}

						if ('closing' == this.readyState || 'closed' == this.readyState) {
							return;
						}

						options = options || {};
						options.compress = false !== options.compress;

						var packet = {
							type: type,
							data: data,
							options: options
						};
						this.emit('packetCreate', packet);
						this.writeBuffer.push(packet);
						if (fn) this.once('flush', fn);
						this.flush();
					};

					/**
      * Closes the connection.
      *
      * @api private
      */

					Socket.prototype.close = function () {
						if ('opening' == this.readyState || 'open' == this.readyState) {
							this.readyState = 'closing';

							var self = this;

							if (this.writeBuffer.length) {
								this.once('drain', function () {
									if (this.upgrading) {
										waitForUpgrade();
									} else {
										close();
									}
								});
							} else if (this.upgrading) {
								waitForUpgrade();
							} else {
								close();
							}
						}

						function close() {
							self.onClose('forced close');
							debug('socket closing - telling transport to close');
							self.transport.close();
						}

						function cleanupAndClose() {
							self.removeListener('upgrade', cleanupAndClose);
							self.removeListener('upgradeError', cleanupAndClose);
							close();
						}

						function waitForUpgrade() {
							// wait for upgrade to finish since we can't send packets while pausing a transport
							self.once('upgrade', cleanupAndClose);
							self.once('upgradeError', cleanupAndClose);
						}

						return this;
					};

					/**
      * Called upon transport error
      *
      * @api private
      */

					Socket.prototype.onError = function (err) {
						debug('socket error %j', err);
						Socket.priorWebsocketSuccess = false;
						this.emit('error', err);
						this.onClose('transport error', err);
					};

					/**
      * Called upon transport close.
      *
      * @api private
      */

					Socket.prototype.onClose = function (reason, desc) {
						if ('opening' == this.readyState || 'open' == this.readyState || 'closing' == this.readyState) {
							debug('socket close with reason: "%s"', reason);
							var self = this;

							// clear timers
							clearTimeout(this.pingIntervalTimer);
							clearTimeout(this.pingTimeoutTimer);

							// stop event from firing again for transport
							this.transport.removeAllListeners('close');

							// ensure transport won't stay open
							this.transport.close();

							// ignore further transport communication
							this.transport.removeAllListeners();

							// set ready state
							this.readyState = 'closed';

							// clear session id
							this.id = null;

							// emit close event
							this.emit('close', reason, desc);

							// clean buffers after, so users can still
							// grab the buffers on `close` event
							self.writeBuffer = [];
							self.prevBufferLen = 0;
						}
					};

					/**
      * Filters upgrades, returning only those matching client transports.
      *
      * @param {Array} server upgrades
      * @api private
      *
      */

					Socket.prototype.filterUpgrades = function (upgrades) {
						var filteredUpgrades = [];
						for (var i = 0, j = upgrades.length; i < j; i++) {
							if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
						}
						return filteredUpgrades;
					};
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, { "./transport": 4, "./transports": 5, "component-emitter": 15, "debug": 17, "engine.io-parser": 19, "indexof": 23, "parsejson": 26, "parseqs": 27, "parseuri": 28 }], 4: [function (_dereq_, module, exports) {
				/**
     * Module dependencies.
     */

				var parser = _dereq_('engine.io-parser');
				var Emitter = _dereq_('component-emitter');

				/**
     * Module exports.
     */

				module.exports = Transport;

				/**
     * Transport abstract constructor.
     *
     * @param {Object} options.
     * @api private
     */

				function Transport(opts) {
					this.path = opts.path;
					this.hostname = opts.hostname;
					this.port = opts.port;
					this.secure = opts.secure;
					this.query = opts.query;
					this.timestampParam = opts.timestampParam;
					this.timestampRequests = opts.timestampRequests;
					this.readyState = '';
					this.agent = opts.agent || false;
					this.socket = opts.socket;
					this.enablesXDR = opts.enablesXDR;

					// SSL options for Node.js client
					this.pfx = opts.pfx;
					this.key = opts.key;
					this.passphrase = opts.passphrase;
					this.cert = opts.cert;
					this.ca = opts.ca;
					this.ciphers = opts.ciphers;
					this.rejectUnauthorized = opts.rejectUnauthorized;

					// other options for Node.js client
					this.extraHeaders = opts.extraHeaders;
				}

				/**
     * Mix in `Emitter`.
     */

				Emitter(Transport.prototype);

				/**
     * Emits an error.
     *
     * @param {String} str
     * @return {Transport} for chaining
     * @api public
     */

				Transport.prototype.onError = function (msg, desc) {
					var err = new Error(msg);
					err.type = 'TransportError';
					err.description = desc;
					this.emit('error', err);
					return this;
				};

				/**
     * Opens the transport.
     *
     * @api public
     */

				Transport.prototype.open = function () {
					if ('closed' == this.readyState || '' == this.readyState) {
						this.readyState = 'opening';
						this.doOpen();
					}

					return this;
				};

				/**
     * Closes the transport.
     *
     * @api private
     */

				Transport.prototype.close = function () {
					if ('opening' == this.readyState || 'open' == this.readyState) {
						this.doClose();
						this.onClose();
					}

					return this;
				};

				/**
     * Sends multiple packets.
     *
     * @param {Array} packets
     * @api private
     */

				Transport.prototype.send = function (packets) {
					if ('open' == this.readyState) {
						this.write(packets);
					} else {
						throw new Error('Transport not open');
					}
				};

				/**
     * Called upon open
     *
     * @api private
     */

				Transport.prototype.onOpen = function () {
					this.readyState = 'open';
					this.writable = true;
					this.emit('open');
				};

				/**
     * Called with data.
     *
     * @param {String} data
     * @api private
     */

				Transport.prototype.onData = function (data) {
					var packet = parser.decodePacket(data, this.socket.binaryType);
					this.onPacket(packet);
				};

				/**
     * Called with a decoded packet.
     */

				Transport.prototype.onPacket = function (packet) {
					this.emit('packet', packet);
				};

				/**
     * Called upon close.
     *
     * @api private
     */

				Transport.prototype.onClose = function () {
					this.readyState = 'closed';
					this.emit('close');
				};
			}, { "component-emitter": 15, "engine.io-parser": 19 }], 5: [function (_dereq_, module, exports) {
				(function (global) {
					/**
      * Module dependencies
      */

					var XMLHttpRequest = _dereq_('xmlhttprequest-ssl');
					var XHR = _dereq_('./polling-xhr');
					var JSONP = _dereq_('./polling-jsonp');
					var websocket = _dereq_('./websocket');

					/**
      * Export transports.
      */

					exports.polling = polling;
					exports.websocket = websocket;

					/**
      * Polling transport polymorphic constructor.
      * Decides on xhr vs jsonp based on feature detection.
      *
      * @api private
      */

					function polling(opts) {
						var xhr;
						var xd = false;
						var xs = false;
						var jsonp = false !== opts.jsonp;

						if (global.location) {
							var isSSL = 'https:' == location.protocol;
							var port = location.port;

							// some user agents have empty `location.port`
							if (!port) {
								port = isSSL ? 443 : 80;
							}

							xd = opts.hostname != location.hostname || port != opts.port;
							xs = opts.secure != isSSL;
						}

						opts.xdomain = xd;
						opts.xscheme = xs;
						xhr = new XMLHttpRequest(opts);

						if ('open' in xhr && !opts.forceJSONP) {
							return new XHR(opts);
						} else {
							if (!jsonp) throw new Error('JSONP disabled');
							return new JSONP(opts);
						}
					}
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, { "./polling-jsonp": 6, "./polling-xhr": 7, "./websocket": 9, "xmlhttprequest-ssl": 10 }], 6: [function (_dereq_, module, exports) {
				(function (global) {

					/**
      * Module requirements.
      */

					var Polling = _dereq_('./polling');
					var inherit = _dereq_('component-inherit');

					/**
      * Module exports.
      */

					module.exports = JSONPPolling;

					/**
      * Cached regular expressions.
      */

					var rNewline = /\n/g;
					var rEscapedNewline = /\\n/g;

					/**
      * Global JSONP callbacks.
      */

					var callbacks;

					/**
      * Callbacks count.
      */

					var index = 0;

					/**
      * Noop.
      */

					function empty() {}

					/**
      * JSONP Polling constructor.
      *
      * @param {Object} opts.
      * @api public
      */

					function JSONPPolling(opts) {
						Polling.call(this, opts);

						this.query = this.query || {};

						// define global callbacks array if not present
						// we do this here (lazily) to avoid unneeded global pollution
						if (!callbacks) {
							// we need to consider multiple engines in the same page
							if (!global.___eio) global.___eio = [];
							callbacks = global.___eio;
						}

						// callback identifier
						this.index = callbacks.length;

						// add callback to jsonp global
						var self = this;
						callbacks.push(function (msg) {
							self.onData(msg);
						});

						// append to query string
						this.query.j = this.index;

						// prevent spurious errors from being emitted when the window is unloaded
						if (global.document && global.addEventListener) {
							global.addEventListener('beforeunload', function () {
								if (self.script) self.script.onerror = empty;
							}, false);
						}
					}

					/**
      * Inherits from Polling.
      */

					inherit(JSONPPolling, Polling);

					/*
      * JSONP only supports binary as base64 encoded strings
      */

					JSONPPolling.prototype.supportsBinary = false;

					/**
      * Closes the socket.
      *
      * @api private
      */

					JSONPPolling.prototype.doClose = function () {
						if (this.script) {
							this.script.parentNode.removeChild(this.script);
							this.script = null;
						}

						if (this.form) {
							this.form.parentNode.removeChild(this.form);
							this.form = null;
							this.iframe = null;
						}

						Polling.prototype.doClose.call(this);
					};

					/**
      * Starts a poll cycle.
      *
      * @api private
      */

					JSONPPolling.prototype.doPoll = function () {
						var self = this;
						var script = document.createElement('script');

						if (this.script) {
							this.script.parentNode.removeChild(this.script);
							this.script = null;
						}

						script.async = true;
						script.src = this.uri();
						script.onerror = function (e) {
							self.onError('jsonp poll error', e);
						};

						var insertAt = document.getElementsByTagName('script')[0];
						if (insertAt) {
							insertAt.parentNode.insertBefore(script, insertAt);
						} else {
							(document.head || document.body).appendChild(script);
						}
						this.script = script;

						var isUAgecko = 'undefined' != typeof navigator && /gecko/i.test(navigator.userAgent);

						if (isUAgecko) {
							setTimeout(function () {
								var iframe = document.createElement('iframe');
								document.body.appendChild(iframe);
								document.body.removeChild(iframe);
							}, 100);
						}
					};

					/**
      * Writes with a hidden iframe.
      *
      * @param {String} data to send
      * @param {Function} called upon flush.
      * @api private
      */

					JSONPPolling.prototype.doWrite = function (data, fn) {
						var self = this;

						if (!this.form) {
							var form = document.createElement('form');
							var area = document.createElement('textarea');
							var id = this.iframeId = 'eio_iframe_' + this.index;
							var iframe;

							form.className = 'socketio';
							form.style.position = 'absolute';
							form.style.top = '-1000px';
							form.style.left = '-1000px';
							form.target = id;
							form.method = 'POST';
							form.setAttribute('accept-charset', 'utf-8');
							area.name = 'd';
							form.appendChild(area);
							document.body.appendChild(form);

							this.form = form;
							this.area = area;
						}

						this.form.action = this.uri();

						function complete() {
							initIframe();
							fn();
						}

						function initIframe() {
							if (self.iframe) {
								try {
									self.form.removeChild(self.iframe);
								} catch (e) {
									self.onError('jsonp polling iframe removal error', e);
								}
							}

							try {
								// ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
								var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
								iframe = document.createElement(html);
							} catch (e) {
								iframe = document.createElement('iframe');
								iframe.name = self.iframeId;
								iframe.src = 'javascript:0';
							}

							iframe.id = self.iframeId;

							self.form.appendChild(iframe);
							self.iframe = iframe;
						}

						initIframe();

						// escape \n to prevent it from being converted into \r\n by some UAs
						// double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
						data = data.replace(rEscapedNewline, '\\\n');
						this.area.value = data.replace(rNewline, '\\n');

						try {
							this.form.submit();
						} catch (e) {}

						if (this.iframe.attachEvent) {
							this.iframe.onreadystatechange = function () {
								if (self.iframe.readyState == 'complete') {
									complete();
								}
							};
						} else {
							this.iframe.onload = complete;
						}
					};
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, { "./polling": 8, "component-inherit": 16 }], 7: [function (_dereq_, module, exports) {
				(function (global) {
					/**
      * Module requirements.
      */

					var XMLHttpRequest = _dereq_('xmlhttprequest-ssl');
					var Polling = _dereq_('./polling');
					var Emitter = _dereq_('component-emitter');
					var inherit = _dereq_('component-inherit');
					var debug = _dereq_('debug')('engine.io-client:polling-xhr');

					/**
      * Module exports.
      */

					module.exports = XHR;
					module.exports.Request = Request;

					/**
      * Empty function
      */

					function empty() {}

					/**
      * XHR Polling constructor.
      *
      * @param {Object} opts
      * @api public
      */

					function XHR(opts) {
						Polling.call(this, opts);

						if (global.location) {
							var isSSL = 'https:' == location.protocol;
							var port = location.port;

							// some user agents have empty `location.port`
							if (!port) {
								port = isSSL ? 443 : 80;
							}

							this.xd = opts.hostname != global.location.hostname || port != opts.port;
							this.xs = opts.secure != isSSL;
						} else {
							this.extraHeaders = opts.extraHeaders;
						}
					}

					/**
      * Inherits from Polling.
      */

					inherit(XHR, Polling);

					/**
      * XHR supports binary
      */

					XHR.prototype.supportsBinary = true;

					/**
      * Creates a request.
      *
      * @param {String} method
      * @api private
      */

					XHR.prototype.request = function (opts) {
						opts = opts || {};
						opts.uri = this.uri();
						opts.xd = this.xd;
						opts.xs = this.xs;
						opts.agent = this.agent || false;
						opts.supportsBinary = this.supportsBinary;
						opts.enablesXDR = this.enablesXDR;

						// SSL options for Node.js client
						opts.pfx = this.pfx;
						opts.key = this.key;
						opts.passphrase = this.passphrase;
						opts.cert = this.cert;
						opts.ca = this.ca;
						opts.ciphers = this.ciphers;
						opts.rejectUnauthorized = this.rejectUnauthorized;

						// other options for Node.js client
						opts.extraHeaders = this.extraHeaders;

						return new Request(opts);
					};

					/**
      * Sends data.
      *
      * @param {String} data to send.
      * @param {Function} called upon flush.
      * @api private
      */

					XHR.prototype.doWrite = function (data, fn) {
						var isBinary = typeof data !== 'string' && data !== undefined;
						var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
						var self = this;
						req.on('success', fn);
						req.on('error', function (err) {
							self.onError('xhr post error', err);
						});
						this.sendXhr = req;
					};

					/**
      * Starts a poll cycle.
      *
      * @api private
      */

					XHR.prototype.doPoll = function () {
						debug('xhr poll');
						var req = this.request();
						var self = this;
						req.on('data', function (data) {
							self.onData(data);
						});
						req.on('error', function (err) {
							self.onError('xhr poll error', err);
						});
						this.pollXhr = req;
					};

					/**
      * Request constructor
      *
      * @param {Object} options
      * @api public
      */

					function Request(opts) {
						this.method = opts.method || 'GET';
						this.uri = opts.uri;
						this.xd = !!opts.xd;
						this.xs = !!opts.xs;
						this.async = false !== opts.async;
						this.data = undefined != opts.data ? opts.data : null;
						this.agent = opts.agent;
						this.isBinary = opts.isBinary;
						this.supportsBinary = opts.supportsBinary;
						this.enablesXDR = opts.enablesXDR;

						// SSL options for Node.js client
						this.pfx = opts.pfx;
						this.key = opts.key;
						this.passphrase = opts.passphrase;
						this.cert = opts.cert;
						this.ca = opts.ca;
						this.ciphers = opts.ciphers;
						this.rejectUnauthorized = opts.rejectUnauthorized;

						// other options for Node.js client
						this.extraHeaders = opts.extraHeaders;

						this.create();
					}

					/**
      * Mix in `Emitter`.
      */

					Emitter(Request.prototype);

					/**
      * Creates the XHR object and sends the request.
      *
      * @api private
      */

					Request.prototype.create = function () {
						var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

						// SSL options for Node.js client
						opts.pfx = this.pfx;
						opts.key = this.key;
						opts.passphrase = this.passphrase;
						opts.cert = this.cert;
						opts.ca = this.ca;
						opts.ciphers = this.ciphers;
						opts.rejectUnauthorized = this.rejectUnauthorized;

						var xhr = this.xhr = new XMLHttpRequest(opts);
						var self = this;

						try {
							debug('xhr open %s: %s', this.method, this.uri);
							xhr.open(this.method, this.uri, this.async);
							try {
								if (this.extraHeaders) {
									xhr.setDisableHeaderCheck(true);
									for (var i in this.extraHeaders) {
										if (this.extraHeaders.hasOwnProperty(i)) {
											xhr.setRequestHeader(i, this.extraHeaders[i]);
										}
									}
								}
							} catch (e) {}
							if (this.supportsBinary) {
								// This has to be done after open because Firefox is stupid
								// http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
								xhr.responseType = 'arraybuffer';
							}

							if ('POST' == this.method) {
								try {
									if (this.isBinary) {
										xhr.setRequestHeader('Content-type', 'application/octet-stream');
									} else {
										xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
									}
								} catch (e) {}
							}

							// ie6 check
							if ('withCredentials' in xhr) {
								xhr.withCredentials = true;
							}

							if (this.hasXDR()) {
								xhr.onload = function () {
									self.onLoad();
								};
								xhr.onerror = function () {
									self.onError(xhr.responseText);
								};
							} else {
								xhr.onreadystatechange = function () {
									if (4 != xhr.readyState) return;
									if (200 == xhr.status || 1223 == xhr.status) {
										self.onLoad();
									} else {
										// make sure the `error` event handler that's user-set
										// does not throw in the same tick and gets caught here
										setTimeout(function () {
											self.onError(xhr.status);
										}, 0);
									}
								};
							}

							debug('xhr data %s', this.data);
							xhr.send(this.data);
						} catch (e) {
							// Need to defer since .create() is called directly fhrom the constructor
							// and thus the 'error' event can only be only bound *after* this exception
							// occurs.  Therefore, also, we cannot throw here at all.
							setTimeout(function () {
								self.onError(e);
							}, 0);
							return;
						}

						if (global.document) {
							this.index = Request.requestsCount++;
							Request.requests[this.index] = this;
						}
					};

					/**
      * Called upon successful response.
      *
      * @api private
      */

					Request.prototype.onSuccess = function () {
						this.emit('success');
						this.cleanup();
					};

					/**
      * Called if we have data.
      *
      * @api private
      */

					Request.prototype.onData = function (data) {
						this.emit('data', data);
						this.onSuccess();
					};

					/**
      * Called upon error.
      *
      * @api private
      */

					Request.prototype.onError = function (err) {
						this.emit('error', err);
						this.cleanup(true);
					};

					/**
      * Cleans up house.
      *
      * @api private
      */

					Request.prototype.cleanup = function (fromError) {
						if ('undefined' == typeof this.xhr || null === this.xhr) {
							return;
						}
						// xmlhttprequest
						if (this.hasXDR()) {
							this.xhr.onload = this.xhr.onerror = empty;
						} else {
							this.xhr.onreadystatechange = empty;
						}

						if (fromError) {
							try {
								this.xhr.abort();
							} catch (e) {}
						}

						if (global.document) {
							delete Request.requests[this.index];
						}

						this.xhr = null;
					};

					/**
      * Called upon load.
      *
      * @api private
      */

					Request.prototype.onLoad = function () {
						var data;
						try {
							var contentType;
							try {
								contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];
							} catch (e) {}
							if (contentType === 'application/octet-stream') {
								data = this.xhr.response;
							} else {
								if (!this.supportsBinary) {
									data = this.xhr.responseText;
								} else {
									try {
										data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));
									} catch (e) {
										var ui8Arr = new Uint8Array(this.xhr.response);
										var dataArray = [];
										for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {
											dataArray.push(ui8Arr[idx]);
										}

										data = String.fromCharCode.apply(null, dataArray);
									}
								}
							}
						} catch (e) {
							this.onError(e);
						}
						if (null != data) {
							this.onData(data);
						}
					};

					/**
      * Check if it has XDomainRequest.
      *
      * @api private
      */

					Request.prototype.hasXDR = function () {
						return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
					};

					/**
      * Aborts the request.
      *
      * @api public
      */

					Request.prototype.abort = function () {
						this.cleanup();
					};

					/**
      * Aborts pending requests when unloading the window. This is needed to prevent
      * memory leaks (e.g. when using IE) and to ensure that no spurious error is
      * emitted.
      */

					if (global.document) {
						Request.requestsCount = 0;
						Request.requests = {};
						if (global.attachEvent) {
							global.attachEvent('onunload', unloadHandler);
						} else if (global.addEventListener) {
							global.addEventListener('beforeunload', unloadHandler, false);
						}
					}

					function unloadHandler() {
						for (var i in Request.requests) {
							if (Request.requests.hasOwnProperty(i)) {
								Request.requests[i].abort();
							}
						}
					}
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, { "./polling": 8, "component-emitter": 15, "component-inherit": 16, "debug": 17, "xmlhttprequest-ssl": 10 }], 8: [function (_dereq_, module, exports) {
				/**
     * Module dependencies.
     */

				var Transport = _dereq_('../transport');
				var parseqs = _dereq_('parseqs');
				var parser = _dereq_('engine.io-parser');
				var inherit = _dereq_('component-inherit');
				var yeast = _dereq_('yeast');
				var debug = _dereq_('debug')('engine.io-client:polling');

				/**
     * Module exports.
     */

				module.exports = Polling;

				/**
     * Is XHR2 supported?
     */

				var hasXHR2 = function () {
					var XMLHttpRequest = _dereq_('xmlhttprequest-ssl');
					var xhr = new XMLHttpRequest({ xdomain: false });
					return null != xhr.responseType;
				}();

				/**
     * Polling interface.
     *
     * @param {Object} opts
     * @api private
     */

				function Polling(opts) {
					var forceBase64 = opts && opts.forceBase64;
					if (!hasXHR2 || forceBase64) {
						this.supportsBinary = false;
					}
					Transport.call(this, opts);
				}

				/**
     * Inherits from Transport.
     */

				inherit(Polling, Transport);

				/**
     * Transport name.
     */

				Polling.prototype.name = 'polling';

				/**
     * Opens the socket (triggers polling). We write a PING message to determine
     * when the transport is open.
     *
     * @api private
     */

				Polling.prototype.doOpen = function () {
					this.poll();
				};

				/**
     * Pauses polling.
     *
     * @param {Function} callback upon buffers are flushed and transport is paused
     * @api private
     */

				Polling.prototype.pause = function (onPause) {
					var pending = 0;
					var self = this;

					this.readyState = 'pausing';

					function pause() {
						debug('paused');
						self.readyState = 'paused';
						onPause();
					}

					if (this.polling || !this.writable) {
						var total = 0;

						if (this.polling) {
							debug('we are currently polling - waiting to pause');
							total++;
							this.once('pollComplete', function () {
								debug('pre-pause polling complete');
								--total || pause();
							});
						}

						if (!this.writable) {
							debug('we are currently writing - waiting to pause');
							total++;
							this.once('drain', function () {
								debug('pre-pause writing complete');
								--total || pause();
							});
						}
					} else {
						pause();
					}
				};

				/**
     * Starts polling cycle.
     *
     * @api public
     */

				Polling.prototype.poll = function () {
					debug('polling');
					this.polling = true;
					this.doPoll();
					this.emit('poll');
				};

				/**
     * Overloads onData to detect payloads.
     *
     * @api private
     */

				Polling.prototype.onData = function (data) {
					var self = this;
					debug('polling got data %s', data);
					var callback = function callback(packet, index, total) {
						// if its the first message we consider the transport open
						if ('opening' == self.readyState) {
							self.onOpen();
						}

						// if its a close packet, we close the ongoing requests
						if ('close' == packet.type) {
							self.onClose();
							return false;
						}

						// otherwise bypass onData and handle the message
						self.onPacket(packet);
					};

					// decode payload
					parser.decodePayload(data, this.socket.binaryType, callback);

					// if an event did not trigger closing
					if ('closed' != this.readyState) {
						// if we got data we're not polling
						this.polling = false;
						this.emit('pollComplete');

						if ('open' == this.readyState) {
							this.poll();
						} else {
							debug('ignoring poll - transport state "%s"', this.readyState);
						}
					}
				};

				/**
     * For polling, send a close packet.
     *
     * @api private
     */

				Polling.prototype.doClose = function () {
					var self = this;

					function close() {
						debug('writing close packet');
						self.write([{ type: 'close' }]);
					}

					if ('open' == this.readyState) {
						debug('transport open - closing');
						close();
					} else {
						// in case we're trying to close while
						// handshaking is in progress (GH-164)
						debug('transport not open - deferring close');
						this.once('open', close);
					}
				};

				/**
     * Writes a packets payload.
     *
     * @param {Array} data packets
     * @param {Function} drain callback
     * @api private
     */

				Polling.prototype.write = function (packets) {
					var self = this;
					this.writable = false;
					var callbackfn = function callbackfn() {
						self.writable = true;
						self.emit('drain');
					};

					var self = this;
					parser.encodePayload(packets, this.supportsBinary, function (data) {
						self.doWrite(data, callbackfn);
					});
				};

				/**
     * Generates uri for connection.
     *
     * @api private
     */

				Polling.prototype.uri = function () {
					var query = this.query || {};
					var schema = this.secure ? 'https' : 'http';
					var port = '';

					// cache busting is forced
					if (false !== this.timestampRequests) {
						query[this.timestampParam] = yeast();
					}

					if (!this.supportsBinary && !query.sid) {
						query.b64 = 1;
					}

					query = parseqs.encode(query);

					// avoid port if default for schema
					if (this.port && ('https' == schema && this.port != 443 || 'http' == schema && this.port != 80)) {
						port = ':' + this.port;
					}

					// prepend ? to query
					if (query.length) {
						query = '?' + query;
					}

					var ipv6 = this.hostname.indexOf(':') !== -1;
					return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
				};
			}, { "../transport": 4, "component-inherit": 16, "debug": 17, "engine.io-parser": 19, "parseqs": 27, "xmlhttprequest-ssl": 10, "yeast": 30 }], 9: [function (_dereq_, module, exports) {
				(function (global) {
					/**
      * Module dependencies.
      */

					var Transport = _dereq_('../transport');
					var parser = _dereq_('engine.io-parser');
					var parseqs = _dereq_('parseqs');
					var inherit = _dereq_('component-inherit');
					var yeast = _dereq_('yeast');
					var debug = _dereq_('debug')('engine.io-client:websocket');
					var BrowserWebSocket = global.WebSocket || global.MozWebSocket;

					/**
      * Get either the `WebSocket` or `MozWebSocket` globals
      * in the browser or try to resolve WebSocket-compatible
      * interface exposed by `ws` for Node-like environment.
      */

					var WebSocket = BrowserWebSocket;
					if (!WebSocket && typeof window === 'undefined') {
						try {
							WebSocket = _dereq_('ws');
						} catch (e) {}
					}

					/**
      * Module exports.
      */

					module.exports = WS;

					/**
      * WebSocket transport constructor.
      *
      * @api {Object} connection options
      * @api public
      */

					function WS(opts) {
						var forceBase64 = opts && opts.forceBase64;
						if (forceBase64) {
							this.supportsBinary = false;
						}
						this.perMessageDeflate = opts.perMessageDeflate;
						Transport.call(this, opts);
					}

					/**
      * Inherits from Transport.
      */

					inherit(WS, Transport);

					/**
      * Transport name.
      *
      * @api public
      */

					WS.prototype.name = 'websocket';

					/*
      * WebSockets support binary
      */

					WS.prototype.supportsBinary = true;

					/**
      * Opens socket.
      *
      * @api private
      */

					WS.prototype.doOpen = function () {
						if (!this.check()) {
							// let probe timeout
							return;
						}

						var self = this;
						var uri = this.uri();
						var protocols = void 0;
						var opts = {
							agent: this.agent,
							perMessageDeflate: this.perMessageDeflate
						};

						// SSL options for Node.js client
						opts.pfx = this.pfx;
						opts.key = this.key;
						opts.passphrase = this.passphrase;
						opts.cert = this.cert;
						opts.ca = this.ca;
						opts.ciphers = this.ciphers;
						opts.rejectUnauthorized = this.rejectUnauthorized;
						if (this.extraHeaders) {
							opts.headers = this.extraHeaders;
						}

						this.ws = BrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);

						if (this.ws.binaryType === undefined) {
							this.supportsBinary = false;
						}

						if (this.ws.supports && this.ws.supports.binary) {
							this.supportsBinary = true;
							this.ws.binaryType = 'buffer';
						} else {
							this.ws.binaryType = 'arraybuffer';
						}

						this.addEventListeners();
					};

					/**
      * Adds event listeners to the socket
      *
      * @api private
      */

					WS.prototype.addEventListeners = function () {
						var self = this;

						this.ws.onopen = function () {
							self.onOpen();
						};
						this.ws.onclose = function () {
							self.onClose();
						};
						this.ws.onmessage = function (ev) {
							self.onData(ev.data);
						};
						this.ws.onerror = function (e) {
							self.onError('websocket error', e);
						};
					};

					/**
      * Override `onData` to use a timer on iOS.
      * See: https://gist.github.com/mloughran/2052006
      *
      * @api private
      */

					if ('undefined' != typeof navigator && /iPad|iPhone|iPod/i.test(navigator.userAgent)) {
						WS.prototype.onData = function (data) {
							var self = this;
							setTimeout(function () {
								Transport.prototype.onData.call(self, data);
							}, 0);
						};
					}

					/**
      * Writes data to socket.
      *
      * @param {Array} array of packets.
      * @api private
      */

					WS.prototype.write = function (packets) {
						var self = this;
						this.writable = false;

						// encodePacket efficient as it uses WS framing
						// no need for encodePayload
						var total = packets.length;
						for (var i = 0, l = total; i < l; i++) {
							(function (packet) {
								parser.encodePacket(packet, self.supportsBinary, function (data) {
									if (!BrowserWebSocket) {
										// always create a new object (GH-437)
										var opts = {};
										if (packet.options) {
											opts.compress = packet.options.compress;
										}

										if (self.perMessageDeflate) {
											var len = 'string' == typeof data ? global.Buffer.byteLength(data) : data.length;
											if (len < self.perMessageDeflate.threshold) {
												opts.compress = false;
											}
										}
									}

									//Sometimes the websocket has already been closed but the browser didn't
									//have a chance of informing us about it yet, in that case send will
									//throw an error
									try {
										if (BrowserWebSocket) {
											// TypeError is thrown when passing the second argument on Safari
											self.ws.send(data);
										} else {
											self.ws.send(data, opts);
										}
									} catch (e) {
										debug('websocket closed before onclose event');
									}

									--total || done();
								});
							})(packets[i]);
						}

						function done() {
							self.emit('flush');

							// fake drain
							// defer to next tick to allow Socket to clear writeBuffer
							setTimeout(function () {
								self.writable = true;
								self.emit('drain');
							}, 0);
						}
					};

					/**
      * Called upon close
      *
      * @api private
      */

					WS.prototype.onClose = function () {
						Transport.prototype.onClose.call(this);
					};

					/**
      * Closes socket.
      *
      * @api private
      */

					WS.prototype.doClose = function () {
						if (typeof this.ws !== 'undefined') {
							this.ws.close();
						}
					};

					/**
      * Generates uri for connection.
      *
      * @api private
      */

					WS.prototype.uri = function () {
						var query = this.query || {};
						var schema = this.secure ? 'wss' : 'ws';
						var port = '';

						// avoid port if default for schema
						if (this.port && ('wss' == schema && this.port != 443 || 'ws' == schema && this.port != 80)) {
							port = ':' + this.port;
						}

						// append timestamp to URI
						if (this.timestampRequests) {
							query[this.timestampParam] = yeast();
						}

						// communicate binary support capabilities
						if (!this.supportsBinary) {
							query.b64 = 1;
						}

						query = parseqs.encode(query);

						// prepend ? to query
						if (query.length) {
							query = '?' + query;
						}

						var ipv6 = this.hostname.indexOf(':') !== -1;
						return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
					};

					/**
      * Feature detection for WebSocket.
      *
      * @return {Boolean} whether this transport is available.
      * @api public
      */

					WS.prototype.check = function () {
						return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
					};
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, { "../transport": 4, "component-inherit": 16, "debug": 17, "engine.io-parser": 19, "parseqs": 27, "ws": undefined, "yeast": 30 }], 10: [function (_dereq_, module, exports) {
				// browser shim for xmlhttprequest module
				var hasCORS = _dereq_('has-cors');

				module.exports = function (opts) {
					var xdomain = opts.xdomain;

					// scheme must be same when usign XDomainRequest
					// http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
					var xscheme = opts.xscheme;

					// XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
					// https://github.com/Automattic/engine.io-client/pull/217
					var enablesXDR = opts.enablesXDR;

					// XMLHttpRequest can be disabled on IE
					try {
						if ('undefined' != typeof XMLHttpRequest && (!xdomain || hasCORS)) {
							return new XMLHttpRequest();
						}
					} catch (e) {}

					// Use XDomainRequest for IE8 if enablesXDR is true
					// because loading bar keeps flashing when using jsonp-polling
					// https://github.com/yujiosaka/socke.io-ie8-loading-example
					try {
						if ('undefined' != typeof XDomainRequest && !xscheme && enablesXDR) {
							return new XDomainRequest();
						}
					} catch (e) {}

					if (!xdomain) {
						try {
							return new ActiveXObject('Microsoft.XMLHTTP');
						} catch (e) {}
					}
				};
			}, { "has-cors": 22 }], 11: [function (_dereq_, module, exports) {
				module.exports = after;

				function after(count, callback, err_cb) {
					var bail = false;
					err_cb = err_cb || noop;
					proxy.count = count;

					return count === 0 ? callback() : proxy;

					function proxy(err, result) {
						if (proxy.count <= 0) {
							throw new Error('after called too many times');
						}
						--proxy.count;

						// after first error, rest are passed to err_cb
						if (err) {
							bail = true;
							callback(err);
							// future error callbacks will go to error handler
							callback = err_cb;
						} else if (proxy.count === 0 && !bail) {
							callback(null, result);
						}
					}
				}

				function noop() {}
			}, {}], 12: [function (_dereq_, module, exports) {
				/**
     * An abstraction for slicing an arraybuffer even when
     * ArrayBuffer.prototype.slice is not supported
     *
     * @api public
     */

				module.exports = function (arraybuffer, start, end) {
					var bytes = arraybuffer.byteLength;
					start = start || 0;
					end = end || bytes;

					if (arraybuffer.slice) {
						return arraybuffer.slice(start, end);
					}

					if (start < 0) {
						start += bytes;
					}
					if (end < 0) {
						end += bytes;
					}
					if (end > bytes) {
						end = bytes;
					}

					if (start >= bytes || start >= end || bytes === 0) {
						return new ArrayBuffer(0);
					}

					var abv = new Uint8Array(arraybuffer);
					var result = new Uint8Array(end - start);
					for (var i = start, ii = 0; i < end; i++, ii++) {
						result[ii] = abv[i];
					}
					return result.buffer;
				};
			}, {}], 13: [function (_dereq_, module, exports) {
				/*
     * base64-arraybuffer
     * https://github.com/niklasvh/base64-arraybuffer
     *
     * Copyright (c) 2012 Niklas von Hertzen
     * Licensed under the MIT license.
     */
				(function (chars) {
					"use strict";

					exports.encode = function (arraybuffer) {
						var bytes = new Uint8Array(arraybuffer),
						    i,
						    len = bytes.length,
						    base64 = "";

						for (i = 0; i < len; i += 3) {
							base64 += chars[bytes[i] >> 2];
							base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
							base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
							base64 += chars[bytes[i + 2] & 63];
						}

						if (len % 3 === 2) {
							base64 = base64.substring(0, base64.length - 1) + "=";
						} else if (len % 3 === 1) {
							base64 = base64.substring(0, base64.length - 2) + "==";
						}

						return base64;
					};

					exports.decode = function (base64) {
						var bufferLength = base64.length * 0.75,
						    len = base64.length,
						    i,
						    p = 0,
						    encoded1,
						    encoded2,
						    encoded3,
						    encoded4;

						if (base64[base64.length - 1] === "=") {
							bufferLength--;
							if (base64[base64.length - 2] === "=") {
								bufferLength--;
							}
						}

						var arraybuffer = new ArrayBuffer(bufferLength),
						    bytes = new Uint8Array(arraybuffer);

						for (i = 0; i < len; i += 4) {
							encoded1 = chars.indexOf(base64[i]);
							encoded2 = chars.indexOf(base64[i + 1]);
							encoded3 = chars.indexOf(base64[i + 2]);
							encoded4 = chars.indexOf(base64[i + 3]);

							bytes[p++] = encoded1 << 2 | encoded2 >> 4;
							bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
							bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
						}

						return arraybuffer;
					};
				})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
			}, {}], 14: [function (_dereq_, module, exports) {
				(function (global) {
					/**
      * Create a blob builder even when vendor prefixes exist
      */

					var BlobBuilder = global.BlobBuilder || global.WebKitBlobBuilder || global.MSBlobBuilder || global.MozBlobBuilder;

					/**
      * Check if Blob constructor is supported
      */

					var blobSupported = function () {
						try {
							var a = new Blob(['hi']);
							return a.size === 2;
						} catch (e) {
							return false;
						}
					}();

					/**
      * Check if Blob constructor supports ArrayBufferViews
      * Fails in Safari 6, so we need to map to ArrayBuffers there.
      */

					var blobSupportsArrayBufferView = blobSupported && function () {
						try {
							var b = new Blob([new Uint8Array([1, 2])]);
							return b.size === 2;
						} catch (e) {
							return false;
						}
					}();

					/**
      * Check if BlobBuilder is supported
      */

					var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;

					/**
      * Helper function that maps ArrayBufferViews to ArrayBuffers
      * Used by BlobBuilder constructor and old browsers that didn't
      * support it in the Blob constructor.
      */

					function mapArrayBufferViews(ary) {
						for (var i = 0; i < ary.length; i++) {
							var chunk = ary[i];
							if (chunk.buffer instanceof ArrayBuffer) {
								var buf = chunk.buffer;

								// if this is a subarray, make a copy so we only
								// include the subarray region from the underlying buffer
								if (chunk.byteLength !== buf.byteLength) {
									var copy = new Uint8Array(chunk.byteLength);
									copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
									buf = copy.buffer;
								}

								ary[i] = buf;
							}
						}
					}

					function BlobBuilderConstructor(ary, options) {
						options = options || {};

						var bb = new BlobBuilder();
						mapArrayBufferViews(ary);

						for (var i = 0; i < ary.length; i++) {
							bb.append(ary[i]);
						}

						return options.type ? bb.getBlob(options.type) : bb.getBlob();
					};

					function BlobConstructor(ary, options) {
						mapArrayBufferViews(ary);
						return new Blob(ary, options || {});
					};

					module.exports = function () {
						if (blobSupported) {
							return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
						} else if (blobBuilderSupported) {
							return BlobBuilderConstructor;
						} else {
							return undefined;
						}
					}();
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, {}], 15: [function (_dereq_, module, exports) {

				/**
     * Expose `Emitter`.
     */

				module.exports = Emitter;

				/**
     * Initialize a new `Emitter`.
     *
     * @api public
     */

				function Emitter(obj) {
					if (obj) return mixin(obj);
				};

				/**
     * Mixin the emitter properties.
     *
     * @param {Object} obj
     * @return {Object}
     * @api private
     */

				function mixin(obj) {
					for (var key in Emitter.prototype) {
						obj[key] = Emitter.prototype[key];
					}
					return obj;
				}

				/**
     * Listen on the given `event` with `fn`.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */

				Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
					this._callbacks = this._callbacks || {};
					(this._callbacks[event] = this._callbacks[event] || []).push(fn);
					return this;
				};

				/**
     * Adds an `event` listener that will be invoked a single
     * time then automatically removed.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */

				Emitter.prototype.once = function (event, fn) {
					var self = this;
					this._callbacks = this._callbacks || {};

					function on() {
						self.off(event, on);
						fn.apply(this, arguments);
					}

					on.fn = fn;
					this.on(event, on);
					return this;
				};

				/**
     * Remove the given callback for `event` or all
     * registered callbacks.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */

				Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
					this._callbacks = this._callbacks || {};

					// all
					if (0 == arguments.length) {
						this._callbacks = {};
						return this;
					}

					// specific event
					var callbacks = this._callbacks[event];
					if (!callbacks) return this;

					// remove all handlers
					if (1 == arguments.length) {
						delete this._callbacks[event];
						return this;
					}

					// remove specific handler
					var cb;
					for (var i = 0; i < callbacks.length; i++) {
						cb = callbacks[i];
						if (cb === fn || cb.fn === fn) {
							callbacks.splice(i, 1);
							break;
						}
					}
					return this;
				};

				/**
     * Emit `event` with the given args.
     *
     * @param {String} event
     * @param {Mixed} ...
     * @return {Emitter}
     */

				Emitter.prototype.emit = function (event) {
					this._callbacks = this._callbacks || {};
					var args = [].slice.call(arguments, 1),
					    callbacks = this._callbacks[event];

					if (callbacks) {
						callbacks = callbacks.slice(0);
						for (var i = 0, len = callbacks.length; i < len; ++i) {
							callbacks[i].apply(this, args);
						}
					}

					return this;
				};

				/**
     * Return array of callbacks for `event`.
     *
     * @param {String} event
     * @return {Array}
     * @api public
     */

				Emitter.prototype.listeners = function (event) {
					this._callbacks = this._callbacks || {};
					return this._callbacks[event] || [];
				};

				/**
     * Check if this emitter has `event` handlers.
     *
     * @param {String} event
     * @return {Boolean}
     * @api public
     */

				Emitter.prototype.hasListeners = function (event) {
					return !!this.listeners(event).length;
				};
			}, {}], 16: [function (_dereq_, module, exports) {

				module.exports = function (a, b) {
					var fn = function fn() {};
					fn.prototype = b.prototype;
					a.prototype = new fn();
					a.prototype.constructor = a;
				};
			}, {}], 17: [function (_dereq_, module, exports) {

				/**
     * This is the web browser implementation of `debug()`.
     *
     * Expose `debug()` as the module.
     */

				exports = module.exports = _dereq_('./debug');
				exports.log = log;
				exports.formatArgs = formatArgs;
				exports.save = save;
				exports.load = load;
				exports.useColors = useColors;
				exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();

				/**
     * Colors.
     */

				exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];

				/**
     * Currently only WebKit-based Web Inspectors, Firefox >= v31,
     * and the Firebug extension (any Firefox version) are known
     * to support "%c" CSS customizations.
     *
     * TODO: add a `localStorage` variable to explicitly enable/disable colors
     */

				function useColors() {
					// is webkit? http://stackoverflow.com/a/16459606/376773
					return 'WebkitAppearance' in document.documentElement.style ||
					// is firebug? http://stackoverflow.com/a/398120/376773
					window.console && (console.firebug || console.exception && console.table) ||
					// is firefox >= v31?
					// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
					navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31;
				}

				/**
     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
     */

				exports.formatters.j = function (v) {
					return JSON.stringify(v);
				};

				/**
     * Colorize log arguments if enabled.
     *
     * @api public
     */

				function formatArgs() {
					var args = arguments;
					var useColors = this.useColors;

					args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);

					if (!useColors) return args;

					var c = 'color: ' + this.color;
					args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

					// the final "%c" is somewhat tricky, because there could be other
					// arguments passed either before or after the %c, so we need to
					// figure out the correct index to insert the CSS into
					var index = 0;
					var lastC = 0;
					args[0].replace(/%[a-z%]/g, function (match) {
						if ('%%' === match) return;
						index++;
						if ('%c' === match) {
							// we only are interested in the *last* %c
							// (the user may have provided their own)
							lastC = index;
						}
					});

					args.splice(lastC, 0, c);
					return args;
				}

				/**
     * Invokes `console.log()` when available.
     * No-op when `console.log` is not a "function".
     *
     * @api public
     */

				function log() {
					// this hackery is required for IE8/9, where
					// the `console.log` function doesn't have 'apply'
					return 'object' === (typeof console === "undefined" ? "undefined" : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
				}

				/**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */

				function save(namespaces) {
					try {
						if (null == namespaces) {
							exports.storage.removeItem('debug');
						} else {
							exports.storage.debug = namespaces;
						}
					} catch (e) {}
				}

				/**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */

				function load() {
					var r;
					try {
						r = exports.storage.debug;
					} catch (e) {}
					return r;
				}

				/**
     * Enable namespaces listed in `localStorage.debug` initially.
     */

				exports.enable(load());

				/**
     * Localstorage attempts to return the localstorage.
     *
     * This is necessary because safari throws
     * when a user disables cookies/localstorage
     * and you attempt to access it.
     *
     * @return {LocalStorage}
     * @api private
     */

				function localstorage() {
					try {
						return window.localStorage;
					} catch (e) {}
				}
			}, { "./debug": 18 }], 18: [function (_dereq_, module, exports) {

				/**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     *
     * Expose `debug()` as the module.
     */

				exports = module.exports = debug;
				exports.coerce = coerce;
				exports.disable = disable;
				exports.enable = enable;
				exports.enabled = enabled;
				exports.humanize = _dereq_('ms');

				/**
     * The currently active debug mode names, and names to skip.
     */

				exports.names = [];
				exports.skips = [];

				/**
     * Map of special "%n" handling functions, for the debug "format" argument.
     *
     * Valid key names are a single, lowercased letter, i.e. "n".
     */

				exports.formatters = {};

				/**
     * Previously assigned color.
     */

				var prevColor = 0;

				/**
     * Previous log timestamp.
     */

				var prevTime;

				/**
     * Select a color.
     *
     * @return {Number}
     * @api private
     */

				function selectColor() {
					return exports.colors[prevColor++ % exports.colors.length];
				}

				/**
     * Create a debugger with the given `namespace`.
     *
     * @param {String} namespace
     * @return {Function}
     * @api public
     */

				function debug(namespace) {

					// define the `disabled` version
					function disabled() {}
					disabled.enabled = false;

					// define the `enabled` version
					function enabled() {

						var self = enabled;

						// set `diff` timestamp
						var curr = +new Date();
						var ms = curr - (prevTime || curr);
						self.diff = ms;
						self.prev = prevTime;
						self.curr = curr;
						prevTime = curr;

						// add the `color` if not set
						if (null == self.useColors) self.useColors = exports.useColors();
						if (null == self.color && self.useColors) self.color = selectColor();

						var args = Array.prototype.slice.call(arguments);

						args[0] = exports.coerce(args[0]);

						if ('string' !== typeof args[0]) {
							// anything else let's inspect with %o
							args = ['%o'].concat(args);
						}

						// apply any `formatters` transformations
						var index = 0;
						args[0] = args[0].replace(/%([a-z%])/g, function (match, format) {
							// if we encounter an escaped % then don't increase the array index
							if (match === '%%') return match;
							index++;
							var formatter = exports.formatters[format];
							if ('function' === typeof formatter) {
								var val = args[index];
								match = formatter.call(self, val);

								// now we need to remove `args[index]` since it's inlined in the `format`
								args.splice(index, 1);
								index--;
							}
							return match;
						});

						if ('function' === typeof exports.formatArgs) {
							args = exports.formatArgs.apply(self, args);
						}
						var logFn = enabled.log || exports.log || console.log.bind(console);
						logFn.apply(self, args);
					}
					enabled.enabled = true;

					var fn = exports.enabled(namespace) ? enabled : disabled;

					fn.namespace = namespace;

					return fn;
				}

				/**
     * Enables a debug mode by namespaces. This can include modes
     * separated by a colon and wildcards.
     *
     * @param {String} namespaces
     * @api public
     */

				function enable(namespaces) {
					exports.save(namespaces);

					var split = (namespaces || '').split(/[\s,]+/);
					var len = split.length;

					for (var i = 0; i < len; i++) {
						if (!split[i]) continue; // ignore empty strings
						namespaces = split[i].replace(/\*/g, '.*?');
						if (namespaces[0] === '-') {
							exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
						} else {
							exports.names.push(new RegExp('^' + namespaces + '$'));
						}
					}
				}

				/**
     * Disable debug output.
     *
     * @api public
     */

				function disable() {
					exports.enable('');
				}

				/**
     * Returns true if the given mode name is enabled, false otherwise.
     *
     * @param {String} name
     * @return {Boolean}
     * @api public
     */

				function enabled(name) {
					var i, len;
					for (i = 0, len = exports.skips.length; i < len; i++) {
						if (exports.skips[i].test(name)) {
							return false;
						}
					}
					for (i = 0, len = exports.names.length; i < len; i++) {
						if (exports.names[i].test(name)) {
							return true;
						}
					}
					return false;
				}

				/**
     * Coerce `val`.
     *
     * @param {Mixed} val
     * @return {Mixed}
     * @api private
     */

				function coerce(val) {
					if (val instanceof Error) return val.stack || val.message;
					return val;
				}
			}, { "ms": 25 }], 19: [function (_dereq_, module, exports) {
				(function (global) {
					/**
      * Module dependencies.
      */

					var keys = _dereq_('./keys');
					var hasBinary = _dereq_('has-binary');
					var sliceBuffer = _dereq_('arraybuffer.slice');
					var base64encoder = _dereq_('base64-arraybuffer');
					var after = _dereq_('after');
					var utf8 = _dereq_('utf8');

					/**
      * Check if we are running an android browser. That requires us to use
      * ArrayBuffer with polling transports...
      *
      * http://ghinda.net/jpeg-blob-ajax-android/
      */

					var isAndroid = navigator.userAgent.match(/Android/i);

					/**
      * Check if we are running in PhantomJS.
      * Uploading a Blob with PhantomJS does not work correctly, as reported here:
      * https://github.com/ariya/phantomjs/issues/11395
      * @type boolean
      */
					var isPhantomJS = /PhantomJS/i.test(navigator.userAgent);

					/**
      * When true, avoids using Blobs to encode payloads.
      * @type boolean
      */
					var dontSendBlobs = isAndroid || isPhantomJS;

					/**
      * Current protocol version.
      */

					exports.protocol = 3;

					/**
      * Packet types.
      */

					var packets = exports.packets = {
						open: 0 // non-ws
						, close: 1 // non-ws
						, ping: 2,
						pong: 3,
						message: 4,
						upgrade: 5,
						noop: 6
					};

					var packetslist = keys(packets);

					/**
      * Premade error packet.
      */

					var err = { type: 'error', data: 'parser error' };

					/**
      * Create a blob api even for blob builder when vendor prefixes exist
      */

					var Blob = _dereq_('blob');

					/**
      * Encodes a packet.
      *
      *     <packet type id> [ <data> ]
      *
      * Example:
      *
      *     5hello world
      *     3
      *     4
      *
      * Binary is encoded in an identical principle
      *
      * @api private
      */

					exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
						if ('function' == typeof supportsBinary) {
							callback = supportsBinary;
							supportsBinary = false;
						}

						if ('function' == typeof utf8encode) {
							callback = utf8encode;
							utf8encode = null;
						}

						var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;

						if (global.ArrayBuffer && data instanceof ArrayBuffer) {
							return encodeArrayBuffer(packet, supportsBinary, callback);
						} else if (Blob && data instanceof global.Blob) {
							return encodeBlob(packet, supportsBinary, callback);
						}

						// might be an object with { base64: true, data: dataAsBase64String }
						if (data && data.base64) {
							return encodeBase64Object(packet, callback);
						}

						// Sending data as a utf-8 string
						var encoded = packets[packet.type];

						// data fragment is optional
						if (undefined !== packet.data) {
							encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
						}

						return callback('' + encoded);
					};

					function encodeBase64Object(packet, callback) {
						// packet data is an object { base64: true, data: dataAsBase64String }
						var message = 'b' + exports.packets[packet.type] + packet.data.data;
						return callback(message);
					}

					/**
      * Encode packet helpers for binary types
      */

					function encodeArrayBuffer(packet, supportsBinary, callback) {
						if (!supportsBinary) {
							return exports.encodeBase64Packet(packet, callback);
						}

						var data = packet.data;
						var contentArray = new Uint8Array(data);
						var resultBuffer = new Uint8Array(1 + data.byteLength);

						resultBuffer[0] = packets[packet.type];
						for (var i = 0; i < contentArray.length; i++) {
							resultBuffer[i + 1] = contentArray[i];
						}

						return callback(resultBuffer.buffer);
					}

					function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
						if (!supportsBinary) {
							return exports.encodeBase64Packet(packet, callback);
						}

						var fr = new FileReader();
						fr.onload = function () {
							packet.data = fr.result;
							exports.encodePacket(packet, supportsBinary, true, callback);
						};
						return fr.readAsArrayBuffer(packet.data);
					}

					function encodeBlob(packet, supportsBinary, callback) {
						if (!supportsBinary) {
							return exports.encodeBase64Packet(packet, callback);
						}

						if (dontSendBlobs) {
							return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
						}

						var length = new Uint8Array(1);
						length[0] = packets[packet.type];
						var blob = new Blob([length.buffer, packet.data]);

						return callback(blob);
					}

					/**
      * Encodes a packet with binary data in a base64 string
      *
      * @param {Object} packet, has `type` and `data`
      * @return {String} base64 encoded message
      */

					exports.encodeBase64Packet = function (packet, callback) {
						var message = 'b' + exports.packets[packet.type];
						if (Blob && packet.data instanceof global.Blob) {
							var fr = new FileReader();
							fr.onload = function () {
								var b64 = fr.result.split(',')[1];
								callback(message + b64);
							};
							return fr.readAsDataURL(packet.data);
						}

						var b64data;
						try {
							b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
						} catch (e) {
							// iPhone Safari doesn't let you apply with typed arrays
							var typed = new Uint8Array(packet.data);
							var basic = new Array(typed.length);
							for (var i = 0; i < typed.length; i++) {
								basic[i] = typed[i];
							}
							b64data = String.fromCharCode.apply(null, basic);
						}
						message += global.btoa(b64data);
						return callback(message);
					};

					/**
      * Decodes a packet. Changes format to Blob if requested.
      *
      * @return {Object} with `type` and `data` (if any)
      * @api private
      */

					exports.decodePacket = function (data, binaryType, utf8decode) {
						// String data
						if (typeof data == 'string' || data === undefined) {
							if (data.charAt(0) == 'b') {
								return exports.decodeBase64Packet(data.substr(1), binaryType);
							}

							if (utf8decode) {
								try {
									data = utf8.decode(data);
								} catch (e) {
									return err;
								}
							}
							var type = data.charAt(0);

							if (Number(type) != type || !packetslist[type]) {
								return err;
							}

							if (data.length > 1) {
								return { type: packetslist[type], data: data.substring(1) };
							} else {
								return { type: packetslist[type] };
							}
						}

						var asArray = new Uint8Array(data);
						var type = asArray[0];
						var rest = sliceBuffer(data, 1);
						if (Blob && binaryType === 'blob') {
							rest = new Blob([rest]);
						}
						return { type: packetslist[type], data: rest };
					};

					/**
      * Decodes a packet encoded in a base64 string
      *
      * @param {String} base64 encoded message
      * @return {Object} with `type` and `data` (if any)
      */

					exports.decodeBase64Packet = function (msg, binaryType) {
						var type = packetslist[msg.charAt(0)];
						if (!global.ArrayBuffer) {
							return { type: type, data: { base64: true, data: msg.substr(1) } };
						}

						var data = base64encoder.decode(msg.substr(1));

						if (binaryType === 'blob' && Blob) {
							data = new Blob([data]);
						}

						return { type: type, data: data };
					};

					/**
      * Encodes multiple messages (payload).
      *
      *     <length>:data
      *
      * Example:
      *
      *     11:hello world2:hi
      *
      * If any contents are binary, they will be encoded as base64 strings. Base64
      * encoded strings are marked with a b before the length specifier
      *
      * @param {Array} packets
      * @api private
      */

					exports.encodePayload = function (packets, supportsBinary, callback) {
						if (typeof supportsBinary == 'function') {
							callback = supportsBinary;
							supportsBinary = null;
						}

						var isBinary = hasBinary(packets);

						if (supportsBinary && isBinary) {
							if (Blob && !dontSendBlobs) {
								return exports.encodePayloadAsBlob(packets, callback);
							}

							return exports.encodePayloadAsArrayBuffer(packets, callback);
						}

						if (!packets.length) {
							return callback('0:');
						}

						function setLengthHeader(message) {
							return message.length + ':' + message;
						}

						function encodeOne(packet, doneCallback) {
							exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function (message) {
								doneCallback(null, setLengthHeader(message));
							});
						}

						map(packets, encodeOne, function (err, results) {
							return callback(results.join(''));
						});
					};

					/**
      * Async array map using after
      */

					function map(ary, each, done) {
						var result = new Array(ary.length);
						var next = after(ary.length, done);

						var eachWithIndex = function eachWithIndex(i, el, cb) {
							each(el, function (error, msg) {
								result[i] = msg;
								cb(error, result);
							});
						};

						for (var i = 0; i < ary.length; i++) {
							eachWithIndex(i, ary[i], next);
						}
					}

					/*
      * Decodes data when a payload is maybe expected. Possible binary contents are
      * decoded from their base64 representation
      *
      * @param {String} data, callback method
      * @api public
      */

					exports.decodePayload = function (data, binaryType, callback) {
						if (typeof data != 'string') {
							return exports.decodePayloadAsBinary(data, binaryType, callback);
						}

						if (typeof binaryType === 'function') {
							callback = binaryType;
							binaryType = null;
						}

						var packet;
						if (data == '') {
							// parser error - ignoring payload
							return callback(err, 0, 1);
						}

						var length = '',
						    n,
						    msg;

						for (var i = 0, l = data.length; i < l; i++) {
							var chr = data.charAt(i);

							if (':' != chr) {
								length += chr;
							} else {
								if ('' == length || length != (n = Number(length))) {
									// parser error - ignoring payload
									return callback(err, 0, 1);
								}

								msg = data.substr(i + 1, n);

								if (length != msg.length) {
									// parser error - ignoring payload
									return callback(err, 0, 1);
								}

								if (msg.length) {
									packet = exports.decodePacket(msg, binaryType, true);

									if (err.type == packet.type && err.data == packet.data) {
										// parser error in individual packet - ignoring payload
										return callback(err, 0, 1);
									}

									var ret = callback(packet, i + n, l);
									if (false === ret) return;
								}

								// advance cursor
								i += n;
								length = '';
							}
						}

						if (length != '') {
							// parser error - ignoring payload
							return callback(err, 0, 1);
						}
					};

					/**
      * Encodes multiple messages (payload) as binary.
      *
      * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
      * 255><data>
      *
      * Example:
      * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
      *
      * @param {Array} packets
      * @return {ArrayBuffer} encoded payload
      * @api private
      */

					exports.encodePayloadAsArrayBuffer = function (packets, callback) {
						if (!packets.length) {
							return callback(new ArrayBuffer(0));
						}

						function encodeOne(packet, doneCallback) {
							exports.encodePacket(packet, true, true, function (data) {
								return doneCallback(null, data);
							});
						}

						map(packets, encodeOne, function (err, encodedPackets) {
							var totalLength = encodedPackets.reduce(function (acc, p) {
								var len;
								if (typeof p === 'string') {
									len = p.length;
								} else {
									len = p.byteLength;
								}
								return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
							}, 0);

							var resultArray = new Uint8Array(totalLength);

							var bufferIndex = 0;
							encodedPackets.forEach(function (p) {
								var isString = typeof p === 'string';
								var ab = p;
								if (isString) {
									var view = new Uint8Array(p.length);
									for (var i = 0; i < p.length; i++) {
										view[i] = p.charCodeAt(i);
									}
									ab = view.buffer;
								}

								if (isString) {
									// not true binary
									resultArray[bufferIndex++] = 0;
								} else {
									// true binary
									resultArray[bufferIndex++] = 1;
								}

								var lenStr = ab.byteLength.toString();
								for (var i = 0; i < lenStr.length; i++) {
									resultArray[bufferIndex++] = parseInt(lenStr[i]);
								}
								resultArray[bufferIndex++] = 255;

								var view = new Uint8Array(ab);
								for (var i = 0; i < view.length; i++) {
									resultArray[bufferIndex++] = view[i];
								}
							});

							return callback(resultArray.buffer);
						});
					};

					/**
      * Encode as Blob
      */

					exports.encodePayloadAsBlob = function (packets, callback) {
						function encodeOne(packet, doneCallback) {
							exports.encodePacket(packet, true, true, function (encoded) {
								var binaryIdentifier = new Uint8Array(1);
								binaryIdentifier[0] = 1;
								if (typeof encoded === 'string') {
									var view = new Uint8Array(encoded.length);
									for (var i = 0; i < encoded.length; i++) {
										view[i] = encoded.charCodeAt(i);
									}
									encoded = view.buffer;
									binaryIdentifier[0] = 0;
								}

								var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;

								var lenStr = len.toString();
								var lengthAry = new Uint8Array(lenStr.length + 1);
								for (var i = 0; i < lenStr.length; i++) {
									lengthAry[i] = parseInt(lenStr[i]);
								}
								lengthAry[lenStr.length] = 255;

								if (Blob) {
									var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
									doneCallback(null, blob);
								}
							});
						}

						map(packets, encodeOne, function (err, results) {
							return callback(new Blob(results));
						});
					};

					/*
      * Decodes data when a payload is maybe expected. Strings are decoded by
      * interpreting each byte as a key code for entries marked to start with 0. See
      * description of encodePayloadAsBinary
      *
      * @param {ArrayBuffer} data, callback method
      * @api public
      */

					exports.decodePayloadAsBinary = function (data, binaryType, callback) {
						if (typeof binaryType === 'function') {
							callback = binaryType;
							binaryType = null;
						}

						var bufferTail = data;
						var buffers = [];

						var numberTooLong = false;
						while (bufferTail.byteLength > 0) {
							var tailArray = new Uint8Array(bufferTail);
							var isString = tailArray[0] === 0;
							var msgLength = '';

							for (var i = 1;; i++) {
								if (tailArray[i] == 255) break;

								if (msgLength.length > 310) {
									numberTooLong = true;
									break;
								}

								msgLength += tailArray[i];
							}

							if (numberTooLong) return callback(err, 0, 1);

							bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
							msgLength = parseInt(msgLength);

							var msg = sliceBuffer(bufferTail, 0, msgLength);
							if (isString) {
								try {
									msg = String.fromCharCode.apply(null, new Uint8Array(msg));
								} catch (e) {
									// iPhone Safari doesn't let you apply to typed arrays
									var typed = new Uint8Array(msg);
									msg = '';
									for (var i = 0; i < typed.length; i++) {
										msg += String.fromCharCode(typed[i]);
									}
								}
							}

							buffers.push(msg);
							bufferTail = sliceBuffer(bufferTail, msgLength);
						}

						var total = buffers.length;
						buffers.forEach(function (buffer, i) {
							callback(exports.decodePacket(buffer, binaryType, true), i, total);
						});
					};
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, { "./keys": 20, "after": 11, "arraybuffer.slice": 12, "base64-arraybuffer": 13, "blob": 14, "has-binary": 21, "utf8": 29 }], 20: [function (_dereq_, module, exports) {

				/**
     * Gets the keys for an object.
     *
     * @return {Array} keys
     * @api private
     */

				module.exports = Object.keys || function keys(obj) {
					var arr = [];
					var has = Object.prototype.hasOwnProperty;

					for (var i in obj) {
						if (has.call(obj, i)) {
							arr.push(i);
						}
					}
					return arr;
				};
			}, {}], 21: [function (_dereq_, module, exports) {
				(function (global) {

					/*
      * Module requirements.
      */

					var isArray = _dereq_('isarray');

					/**
      * Module exports.
      */

					module.exports = hasBinary;

					/**
      * Checks for binary data.
      *
      * Right now only Buffer and ArrayBuffer are supported..
      *
      * @param {Object} anything
      * @api public
      */

					function hasBinary(data) {

						function _hasBinary(obj) {
							if (!obj) return false;

							if (global.Buffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer || global.Blob && obj instanceof Blob || global.File && obj instanceof File) {
								return true;
							}

							if (isArray(obj)) {
								for (var i = 0; i < obj.length; i++) {
									if (_hasBinary(obj[i])) {
										return true;
									}
								}
							} else if (obj && 'object' == (typeof obj === "undefined" ? "undefined" : _typeof(obj))) {
								if (obj.toJSON) {
									obj = obj.toJSON();
								}

								for (var key in obj) {
									if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
										return true;
									}
								}
							}

							return false;
						}

						return _hasBinary(data);
					}
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, { "isarray": 24 }], 22: [function (_dereq_, module, exports) {

				/**
     * Module exports.
     *
     * Logic borrowed from Modernizr:
     *
     *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
     */

				try {
					module.exports = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();
				} catch (err) {
					// if XMLHttp support is disabled in IE then it will throw
					// when trying to create
					module.exports = false;
				}
			}, {}], 23: [function (_dereq_, module, exports) {

				var indexOf = [].indexOf;

				module.exports = function (arr, obj) {
					if (indexOf) return arr.indexOf(obj);
					for (var i = 0; i < arr.length; ++i) {
						if (arr[i] === obj) return i;
					}
					return -1;
				};
			}, {}], 24: [function (_dereq_, module, exports) {
				module.exports = Array.isArray || function (arr) {
					return Object.prototype.toString.call(arr) == '[object Array]';
				};
			}, {}], 25: [function (_dereq_, module, exports) {
				/**
     * Helpers.
     */

				var s = 1000;
				var m = s * 60;
				var h = m * 60;
				var d = h * 24;
				var y = d * 365.25;

				/**
     * Parse or format the given `val`.
     *
     * Options:
     *
     *  - `long` verbose formatting [false]
     *
     * @param {String|Number} val
     * @param {Object} options
     * @return {String|Number}
     * @api public
     */

				module.exports = function (val, options) {
					options = options || {};
					if ('string' == typeof val) return parse(val);
					return options.long ? long(val) : short(val);
				};

				/**
     * Parse the given `str` and return milliseconds.
     *
     * @param {String} str
     * @return {Number}
     * @api private
     */

				function parse(str) {
					str = '' + str;
					if (str.length > 10000) return;
					var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
					if (!match) return;
					var n = parseFloat(match[1]);
					var type = (match[2] || 'ms').toLowerCase();
					switch (type) {
						case 'years':
						case 'year':
						case 'yrs':
						case 'yr':
						case 'y':
							return n * y;
						case 'days':
						case 'day':
						case 'd':
							return n * d;
						case 'hours':
						case 'hour':
						case 'hrs':
						case 'hr':
						case 'h':
							return n * h;
						case 'minutes':
						case 'minute':
						case 'mins':
						case 'min':
						case 'm':
							return n * m;
						case 'seconds':
						case 'second':
						case 'secs':
						case 'sec':
						case 's':
							return n * s;
						case 'milliseconds':
						case 'millisecond':
						case 'msecs':
						case 'msec':
						case 'ms':
							return n;
					}
				}

				/**
     * Short format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

				function short(ms) {
					if (ms >= d) return Math.round(ms / d) + 'd';
					if (ms >= h) return Math.round(ms / h) + 'h';
					if (ms >= m) return Math.round(ms / m) + 'm';
					if (ms >= s) return Math.round(ms / s) + 's';
					return ms + 'ms';
				}

				/**
     * Long format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

				function long(ms) {
					return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
				}

				/**
     * Pluralization helper.
     */

				function plural(ms, n, name) {
					if (ms < n) return;
					if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
					return Math.ceil(ms / n) + ' ' + name + 's';
				}
			}, {}], 26: [function (_dereq_, module, exports) {
				(function (global) {
					/**
      * JSON parse.
      *
      * @see Based on jQuery#parseJSON (MIT) and JSON2
      * @api private
      */

					var rvalidchars = /^[\],:{}\s]*$/;
					var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
					var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
					var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
					var rtrimLeft = /^\s+/;
					var rtrimRight = /\s+$/;

					module.exports = function parsejson(data) {
						if ('string' != typeof data || !data) {
							return null;
						}

						data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

						// Attempt to parse using the native JSON parser first
						if (global.JSON && JSON.parse) {
							return JSON.parse(data);
						}

						if (rvalidchars.test(data.replace(rvalidescape, '@').replace(rvalidtokens, ']').replace(rvalidbraces, ''))) {
							return new Function('return ' + data)();
						}
					};
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, {}], 27: [function (_dereq_, module, exports) {
				/**
     * Compiles a querystring
     * Returns string representation of the object
     *
     * @param {Object}
     * @api private
     */

				exports.encode = function (obj) {
					var str = '';

					for (var i in obj) {
						if (obj.hasOwnProperty(i)) {
							if (str.length) str += '&';
							str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
						}
					}

					return str;
				};

				/**
     * Parses a simple querystring into an object
     *
     * @param {String} qs
     * @api private
     */

				exports.decode = function (qs) {
					var qry = {};
					var pairs = qs.split('&');
					for (var i = 0, l = pairs.length; i < l; i++) {
						var pair = pairs[i].split('=');
						qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
					}
					return qry;
				};
			}, {}], 28: [function (_dereq_, module, exports) {
				/**
     * Parses an URI
     *
     * @author Steven Levithan <stevenlevithan.com> (MIT license)
     * @api private
     */

				var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

				var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];

				module.exports = function parseuri(str) {
					var src = str,
					    b = str.indexOf('['),
					    e = str.indexOf(']');

					if (b != -1 && e != -1) {
						str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
					}

					var m = re.exec(str || ''),
					    uri = {},
					    i = 14;

					while (i--) {
						uri[parts[i]] = m[i] || '';
					}

					if (b != -1 && e != -1) {
						uri.source = src;
						uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
						uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
						uri.ipv6uri = true;
					}

					return uri;
				};
			}, {}], 29: [function (_dereq_, module, exports) {
				(function (global) {
					/*! https://mths.be/utf8js v2.0.0 by @mathias */
					;(function (root) {

						// Detect free variables `exports`
						var freeExports = (typeof exports === "undefined" ? "undefined" : _typeof(exports)) == 'object' && exports;

						// Detect free variable `module`
						var freeModule = (typeof module === "undefined" ? "undefined" : _typeof(module)) == 'object' && module && module.exports == freeExports && module;

						// Detect free variable `global`, from Node.js or Browserified code,
						// and use it as `root`
						var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global;
						if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
							root = freeGlobal;
						}

						/*--------------------------------------------------------------------------*/

						var stringFromCharCode = String.fromCharCode;

						// Taken from https://mths.be/punycode
						function ucs2decode(string) {
							var output = [];
							var counter = 0;
							var length = string.length;
							var value;
							var extra;
							while (counter < length) {
								value = string.charCodeAt(counter++);
								if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
									// high surrogate, and there is a next character
									extra = string.charCodeAt(counter++);
									if ((extra & 0xFC00) == 0xDC00) {
										// low surrogate
										output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
									} else {
										// unmatched surrogate; only append this code unit, in case the next
										// code unit is the high surrogate of a surrogate pair
										output.push(value);
										counter--;
									}
								} else {
									output.push(value);
								}
							}
							return output;
						}

						// Taken from https://mths.be/punycode
						function ucs2encode(array) {
							var length = array.length;
							var index = -1;
							var value;
							var output = '';
							while (++index < length) {
								value = array[index];
								if (value > 0xFFFF) {
									value -= 0x10000;
									output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
									value = 0xDC00 | value & 0x3FF;
								}
								output += stringFromCharCode(value);
							}
							return output;
						}

						function checkScalarValue(codePoint) {
							if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
								throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() + ' is not a scalar value');
							}
						}
						/*--------------------------------------------------------------------------*/

						function createByte(codePoint, shift) {
							return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);
						}

						function encodeCodePoint(codePoint) {
							if ((codePoint & 0xFFFFFF80) == 0) {
								// 1-byte sequence
								return stringFromCharCode(codePoint);
							}
							var symbol = '';
							if ((codePoint & 0xFFFFF800) == 0) {
								// 2-byte sequence
								symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);
							} else if ((codePoint & 0xFFFF0000) == 0) {
								// 3-byte sequence
								checkScalarValue(codePoint);
								symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);
								symbol += createByte(codePoint, 6);
							} else if ((codePoint & 0xFFE00000) == 0) {
								// 4-byte sequence
								symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);
								symbol += createByte(codePoint, 12);
								symbol += createByte(codePoint, 6);
							}
							symbol += stringFromCharCode(codePoint & 0x3F | 0x80);
							return symbol;
						}

						function utf8encode(string) {
							var codePoints = ucs2decode(string);
							var length = codePoints.length;
							var index = -1;
							var codePoint;
							var byteString = '';
							while (++index < length) {
								codePoint = codePoints[index];
								byteString += encodeCodePoint(codePoint);
							}
							return byteString;
						}

						/*--------------------------------------------------------------------------*/

						function readContinuationByte() {
							if (byteIndex >= byteCount) {
								throw Error('Invalid byte index');
							}

							var continuationByte = byteArray[byteIndex] & 0xFF;
							byteIndex++;

							if ((continuationByte & 0xC0) == 0x80) {
								return continuationByte & 0x3F;
							}

							// If we end up here, it’s not a continuation byte
							throw Error('Invalid continuation byte');
						}

						function decodeSymbol() {
							var byte1;
							var byte2;
							var byte3;
							var byte4;
							var codePoint;

							if (byteIndex > byteCount) {
								throw Error('Invalid byte index');
							}

							if (byteIndex == byteCount) {
								return false;
							}

							// Read first byte
							byte1 = byteArray[byteIndex] & 0xFF;
							byteIndex++;

							// 1-byte sequence (no continuation bytes)
							if ((byte1 & 0x80) == 0) {
								return byte1;
							}

							// 2-byte sequence
							if ((byte1 & 0xE0) == 0xC0) {
								var byte2 = readContinuationByte();
								codePoint = (byte1 & 0x1F) << 6 | byte2;
								if (codePoint >= 0x80) {
									return codePoint;
								} else {
									throw Error('Invalid continuation byte');
								}
							}

							// 3-byte sequence (may include unpaired surrogates)
							if ((byte1 & 0xF0) == 0xE0) {
								byte2 = readContinuationByte();
								byte3 = readContinuationByte();
								codePoint = (byte1 & 0x0F) << 12 | byte2 << 6 | byte3;
								if (codePoint >= 0x0800) {
									checkScalarValue(codePoint);
									return codePoint;
								} else {
									throw Error('Invalid continuation byte');
								}
							}

							// 4-byte sequence
							if ((byte1 & 0xF8) == 0xF0) {
								byte2 = readContinuationByte();
								byte3 = readContinuationByte();
								byte4 = readContinuationByte();
								codePoint = (byte1 & 0x0F) << 0x12 | byte2 << 0x0C | byte3 << 0x06 | byte4;
								if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
									return codePoint;
								}
							}

							throw Error('Invalid UTF-8 detected');
						}

						var byteArray;
						var byteCount;
						var byteIndex;
						function utf8decode(byteString) {
							byteArray = ucs2decode(byteString);
							byteCount = byteArray.length;
							byteIndex = 0;
							var codePoints = [];
							var tmp;
							while ((tmp = decodeSymbol()) !== false) {
								codePoints.push(tmp);
							}
							return ucs2encode(codePoints);
						}

						/*--------------------------------------------------------------------------*/

						var utf8 = {
							'version': '2.0.0',
							'encode': utf8encode,
							'decode': utf8decode
						};

						// Some AMD build optimizers, like r.js, check for specific condition patterns
						// like the following:
						if (typeof define == 'function' && _typeof(define.amd) == 'object' && define.amd) {
							define(function () {
								return utf8;
							});
						} else if (freeExports && !freeExports.nodeType) {
							if (freeModule) {
								// in Node.js or RingoJS v0.8.0+
								freeModule.exports = utf8;
							} else {
								// in Narwhal or RingoJS v0.7.0-
								var object = {};
								var hasOwnProperty = object.hasOwnProperty;
								for (var key in utf8) {
									hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
								}
							}
						} else {
							// in Rhino or a web browser
							root.utf8 = utf8;
						}
					})(this);
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, {}], 30: [function (_dereq_, module, exports) {
				'use strict';

				var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),
				    length = 64,
				    map = {},
				    seed = 0,
				    i = 0,
				    prev;

				/**
     * Return a string representing the specified number.
     *
     * @param {Number} num The number to convert.
     * @returns {String} The string representation of the number.
     * @api public
     */
				function encode(num) {
					var encoded = '';

					do {
						encoded = alphabet[num % length] + encoded;
						num = Math.floor(num / length);
					} while (num > 0);

					return encoded;
				}

				/**
     * Return the integer value specified by the given string.
     *
     * @param {String} str The string to convert.
     * @returns {Number} The integer value represented by the string.
     * @api public
     */
				function decode(str) {
					var decoded = 0;

					for (i = 0; i < str.length; i++) {
						decoded = decoded * length + map[str.charAt(i)];
					}

					return decoded;
				}

				/**
     * Yeast: A tiny growing id generator.
     *
     * @returns {String} A unique id.
     * @api public
     */
				function yeast() {
					var now = encode(+new Date());

					if (now !== prev) return seed = 0, prev = now;
					return now + '.' + encode(seed++);
				}

				//
				// Map each character to its index.
				//
				for (; i < length; i++) {
					map[alphabet[i]] = i;
				} //
				// Expose the `yeast`, `encode` and `decode` functions.
				//
				yeast.encode = encode;
				yeast.decode = decode;
				module.exports = yeast;
			}, {}], 31: [function (_dereq_, module, exports) {

				/**
     * Module dependencies.
     */

				var url = _dereq_('./url');
				var parser = _dereq_('socket.io-parser');
				var Manager = _dereq_('./manager');
				var debug = _dereq_('debug')('socket.io-client');

				/**
     * Module exports.
     */

				module.exports = exports = lookup;

				/**
     * Managers cache.
     */

				var cache = exports.managers = {};

				/**
     * Looks up an existing `Manager` for multiplexing.
     * If the user summons:
     *
     *   `io('http://localhost/a');`
     *   `io('http://localhost/b');`
     *
     * We reuse the existing instance based on same scheme/port/host,
     * and we initialize sockets for each namespace.
     *
     * @api public
     */

				function lookup(uri, opts) {
					if ((typeof uri === "undefined" ? "undefined" : _typeof(uri)) == 'object') {
						opts = uri;
						uri = undefined;
					}

					opts = opts || {};

					var parsed = url(uri);
					var source = parsed.source;
					var id = parsed.id;
					var path = parsed.path;
					var sameNamespace = cache[id] && path in cache[id].nsps;
					var newConnection = opts.forceNew || opts['force new connection'] || false === opts.multiplex || sameNamespace;

					var io;

					if (newConnection) {
						debug('ignoring socket cache for %s', source);
						io = Manager(source, opts);
					} else {
						if (!cache[id]) {
							debug('new io instance for %s', source);
							cache[id] = Manager(source, opts);
						}
						io = cache[id];
					}

					return io.socket(parsed.path);
				}

				/**
     * Protocol version.
     *
     * @api public
     */

				exports.protocol = parser.protocol;

				/**
     * `connect`.
     *
     * @param {String} uri
     * @api public
     */

				exports.connect = lookup;

				/**
     * Expose constructors for standalone build.
     *
     * @api public
     */

				exports.Manager = _dereq_('./manager');
				exports.Socket = _dereq_('./socket');
			}, { "./manager": 32, "./socket": 34, "./url": 35, "debug": 39, "socket.io-parser": 47 }], 32: [function (_dereq_, module, exports) {

				/**
     * Module dependencies.
     */

				var eio = _dereq_('engine.io-client');
				var Socket = _dereq_('./socket');
				var Emitter = _dereq_('component-emitter');
				var parser = _dereq_('socket.io-parser');
				var on = _dereq_('./on');
				var bind = _dereq_('component-bind');
				var debug = _dereq_('debug')('socket.io-client:manager');
				var indexOf = _dereq_('indexof');
				var Backoff = _dereq_('backo2');

				/**
     * IE6+ hasOwnProperty
     */

				var has = Object.prototype.hasOwnProperty;

				/**
     * Module exports
     */

				module.exports = Manager;

				/**
     * `Manager` constructor.
     *
     * @param {String} engine instance or engine uri/opts
     * @param {Object} options
     * @api public
     */

				function Manager(uri, opts) {
					if (!(this instanceof Manager)) return new Manager(uri, opts);
					if (uri && 'object' == (typeof uri === "undefined" ? "undefined" : _typeof(uri))) {
						opts = uri;
						uri = undefined;
					}
					opts = opts || {};

					opts.path = opts.path || '/socket.io';
					this.nsps = {};
					this.subs = [];
					this.opts = opts;
					this.reconnection(opts.reconnection !== false);
					this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
					this.reconnectionDelay(opts.reconnectionDelay || 1000);
					this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
					this.randomizationFactor(opts.randomizationFactor || 0.5);
					this.backoff = new Backoff({
						min: this.reconnectionDelay(),
						max: this.reconnectionDelayMax(),
						jitter: this.randomizationFactor()
					});
					this.timeout(null == opts.timeout ? 20000 : opts.timeout);
					this.readyState = 'closed';
					this.uri = uri;
					this.connecting = [];
					this.lastPing = null;
					this.encoding = false;
					this.packetBuffer = [];
					this.encoder = new parser.Encoder();
					this.decoder = new parser.Decoder();
					this.autoConnect = opts.autoConnect !== false;
					if (this.autoConnect) this.open();
				}

				/**
     * Propagate given event to sockets and emit on `this`
     *
     * @api private
     */

				Manager.prototype.emitAll = function () {
					this.emit.apply(this, arguments);
					for (var nsp in this.nsps) {
						if (has.call(this.nsps, nsp)) {
							this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
						}
					}
				};

				/**
     * Update `socket.id` of all sockets
     *
     * @api private
     */

				Manager.prototype.updateSocketIds = function () {
					for (var nsp in this.nsps) {
						if (has.call(this.nsps, nsp)) {
							this.nsps[nsp].id = this.engine.id;
						}
					}
				};

				/**
     * Mix in `Emitter`.
     */

				Emitter(Manager.prototype);

				/**
     * Sets the `reconnection` config.
     *
     * @param {Boolean} true/false if it should automatically reconnect
     * @return {Manager} self or value
     * @api public
     */

				Manager.prototype.reconnection = function (v) {
					if (!arguments.length) return this._reconnection;
					this._reconnection = !!v;
					return this;
				};

				/**
     * Sets the reconnection attempts config.
     *
     * @param {Number} max reconnection attempts before giving up
     * @return {Manager} self or value
     * @api public
     */

				Manager.prototype.reconnectionAttempts = function (v) {
					if (!arguments.length) return this._reconnectionAttempts;
					this._reconnectionAttempts = v;
					return this;
				};

				/**
     * Sets the delay between reconnections.
     *
     * @param {Number} delay
     * @return {Manager} self or value
     * @api public
     */

				Manager.prototype.reconnectionDelay = function (v) {
					if (!arguments.length) return this._reconnectionDelay;
					this._reconnectionDelay = v;
					this.backoff && this.backoff.setMin(v);
					return this;
				};

				Manager.prototype.randomizationFactor = function (v) {
					if (!arguments.length) return this._randomizationFactor;
					this._randomizationFactor = v;
					this.backoff && this.backoff.setJitter(v);
					return this;
				};

				/**
     * Sets the maximum delay between reconnections.
     *
     * @param {Number} delay
     * @return {Manager} self or value
     * @api public
     */

				Manager.prototype.reconnectionDelayMax = function (v) {
					if (!arguments.length) return this._reconnectionDelayMax;
					this._reconnectionDelayMax = v;
					this.backoff && this.backoff.setMax(v);
					return this;
				};

				/**
     * Sets the connection timeout. `false` to disable
     *
     * @return {Manager} self or value
     * @api public
     */

				Manager.prototype.timeout = function (v) {
					if (!arguments.length) return this._timeout;
					this._timeout = v;
					return this;
				};

				/**
     * Starts trying to reconnect if reconnection is enabled and we have not
     * started reconnecting yet
     *
     * @api private
     */

				Manager.prototype.maybeReconnectOnOpen = function () {
					// Only try to reconnect if it's the first time we're connecting
					if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
						// keeps reconnection from firing twice for the same reconnection loop
						this.reconnect();
					}
				};

				/**
     * Sets the current transport `socket`.
     *
     * @param {Function} optional, callback
     * @return {Manager} self
     * @api public
     */

				Manager.prototype.open = Manager.prototype.connect = function (fn) {
					debug('readyState %s', this.readyState);
					if (~this.readyState.indexOf('open')) return this;

					debug('opening %s', this.uri);
					this.engine = eio(this.uri, this.opts);
					var socket = this.engine;
					var self = this;
					this.readyState = 'opening';
					this.skipReconnect = false;

					// emit `open`
					var openSub = on(socket, 'open', function () {
						self.onopen();
						fn && fn();
					});

					// emit `connect_error`
					var errorSub = on(socket, 'error', function (data) {
						debug('connect_error');
						self.cleanup();
						self.readyState = 'closed';
						self.emitAll('connect_error', data);
						if (fn) {
							var err = new Error('Connection error');
							err.data = data;
							fn(err);
						} else {
							// Only do this if there is no fn to handle the error
							self.maybeReconnectOnOpen();
						}
					});

					// emit `connect_timeout`
					if (false !== this._timeout) {
						var timeout = this._timeout;
						debug('connect attempt will timeout after %d', timeout);

						// set timer
						var timer = setTimeout(function () {
							debug('connect attempt timed out after %d', timeout);
							openSub.destroy();
							socket.close();
							socket.emit('error', 'timeout');
							self.emitAll('connect_timeout', timeout);
						}, timeout);

						this.subs.push({
							destroy: function destroy() {
								clearTimeout(timer);
							}
						});
					}

					this.subs.push(openSub);
					this.subs.push(errorSub);

					return this;
				};

				/**
     * Called upon transport open.
     *
     * @api private
     */

				Manager.prototype.onopen = function () {
					debug('open');

					// clear old subs
					this.cleanup();

					// mark as open
					this.readyState = 'open';
					this.emit('open');

					// add new subs
					var socket = this.engine;
					this.subs.push(on(socket, 'data', bind(this, 'ondata')));
					this.subs.push(on(socket, 'ping', bind(this, 'onping')));
					this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
					this.subs.push(on(socket, 'error', bind(this, 'onerror')));
					this.subs.push(on(socket, 'close', bind(this, 'onclose')));
					this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
				};

				/**
     * Called upon a ping.
     *
     * @api private
     */

				Manager.prototype.onping = function () {
					this.lastPing = new Date();
					this.emitAll('ping');
				};

				/**
     * Called upon a packet.
     *
     * @api private
     */

				Manager.prototype.onpong = function () {
					this.emitAll('pong', new Date() - this.lastPing);
				};

				/**
     * Called with data.
     *
     * @api private
     */

				Manager.prototype.ondata = function (data) {
					this.decoder.add(data);
				};

				/**
     * Called when parser fully decodes a packet.
     *
     * @api private
     */

				Manager.prototype.ondecoded = function (packet) {
					this.emit('packet', packet);
				};

				/**
     * Called upon socket error.
     *
     * @api private
     */

				Manager.prototype.onerror = function (err) {
					debug('error', err);
					this.emitAll('error', err);
				};

				/**
     * Creates a new socket for the given `nsp`.
     *
     * @return {Socket}
     * @api public
     */

				Manager.prototype.socket = function (nsp) {
					var socket = this.nsps[nsp];
					if (!socket) {
						socket = new Socket(this, nsp);
						this.nsps[nsp] = socket;
						var self = this;
						socket.on('connecting', onConnecting);
						socket.on('connect', function () {
							socket.id = self.engine.id;
						});

						if (this.autoConnect) {
							// manually call here since connecting evnet is fired before listening
							onConnecting();
						}
					}

					function onConnecting() {
						if (!~indexOf(self.connecting, socket)) {
							self.connecting.push(socket);
						}
					}

					return socket;
				};

				/**
     * Called upon a socket close.
     *
     * @param {Socket} socket
     */

				Manager.prototype.destroy = function (socket) {
					var index = indexOf(this.connecting, socket);
					if (~index) this.connecting.splice(index, 1);
					if (this.connecting.length) return;

					this.close();
				};

				/**
     * Writes a packet.
     *
     * @param {Object} packet
     * @api private
     */

				Manager.prototype.packet = function (packet) {
					debug('writing packet %j', packet);
					var self = this;

					if (!self.encoding) {
						// encode, then write to engine with result
						self.encoding = true;
						this.encoder.encode(packet, function (encodedPackets) {
							for (var i = 0; i < encodedPackets.length; i++) {
								self.engine.write(encodedPackets[i], packet.options);
							}
							self.encoding = false;
							self.processPacketQueue();
						});
					} else {
						// add packet to the queue
						self.packetBuffer.push(packet);
					}
				};

				/**
     * If packet buffer is non-empty, begins encoding the
     * next packet in line.
     *
     * @api private
     */

				Manager.prototype.processPacketQueue = function () {
					if (this.packetBuffer.length > 0 && !this.encoding) {
						var pack = this.packetBuffer.shift();
						this.packet(pack);
					}
				};

				/**
     * Clean up transport subscriptions and packet buffer.
     *
     * @api private
     */

				Manager.prototype.cleanup = function () {
					debug('cleanup');

					var sub;
					while (sub = this.subs.shift()) {
						sub.destroy();
					}this.packetBuffer = [];
					this.encoding = false;
					this.lastPing = null;

					this.decoder.destroy();
				};

				/**
     * Close the current socket.
     *
     * @api private
     */

				Manager.prototype.close = Manager.prototype.disconnect = function () {
					debug('disconnect');
					this.skipReconnect = true;
					this.reconnecting = false;
					if ('opening' == this.readyState) {
						// `onclose` will not fire because
						// an open event never happened
						this.cleanup();
					}
					this.backoff.reset();
					this.readyState = 'closed';
					if (this.engine) this.engine.close();
				};

				/**
     * Called upon engine close.
     *
     * @api private
     */

				Manager.prototype.onclose = function (reason) {
					debug('onclose');

					this.cleanup();
					this.backoff.reset();
					this.readyState = 'closed';
					this.emit('close', reason);

					if (this._reconnection && !this.skipReconnect) {
						this.reconnect();
					}
				};

				/**
     * Attempt a reconnection.
     *
     * @api private
     */

				Manager.prototype.reconnect = function () {
					if (this.reconnecting || this.skipReconnect) return this;

					var self = this;

					if (this.backoff.attempts >= this._reconnectionAttempts) {
						debug('reconnect failed');
						this.backoff.reset();
						this.emitAll('reconnect_failed');
						this.reconnecting = false;
					} else {
						var delay = this.backoff.duration();
						debug('will wait %dms before reconnect attempt', delay);

						this.reconnecting = true;
						var timer = setTimeout(function () {
							if (self.skipReconnect) return;

							debug('attempting reconnect');
							self.emitAll('reconnect_attempt', self.backoff.attempts);
							self.emitAll('reconnecting', self.backoff.attempts);

							// check again for the case socket closed in above events
							if (self.skipReconnect) return;

							self.open(function (err) {
								if (err) {
									debug('reconnect attempt error');
									self.reconnecting = false;
									self.reconnect();
									self.emitAll('reconnect_error', err.data);
								} else {
									debug('reconnect success');
									self.onreconnect();
								}
							});
						}, delay);

						this.subs.push({
							destroy: function destroy() {
								clearTimeout(timer);
							}
						});
					}
				};

				/**
     * Called upon successful reconnect.
     *
     * @api private
     */

				Manager.prototype.onreconnect = function () {
					var attempt = this.backoff.attempts;
					this.reconnecting = false;
					this.backoff.reset();
					this.updateSocketIds();
					this.emitAll('reconnect', attempt);
				};
			}, { "./on": 33, "./socket": 34, "backo2": 36, "component-bind": 37, "component-emitter": 38, "debug": 39, "engine.io-client": 1, "indexof": 42, "socket.io-parser": 47 }], 33: [function (_dereq_, module, exports) {

				/**
     * Module exports.
     */

				module.exports = on;

				/**
     * Helper for subscriptions.
     *
     * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
     * @param {String} event name
     * @param {Function} callback
     * @api public
     */

				function on(obj, ev, fn) {
					obj.on(ev, fn);
					return {
						destroy: function destroy() {
							obj.removeListener(ev, fn);
						}
					};
				}
			}, {}], 34: [function (_dereq_, module, exports) {

				/**
     * Module dependencies.
     */

				var parser = _dereq_('socket.io-parser');
				var Emitter = _dereq_('component-emitter');
				var toArray = _dereq_('to-array');
				var on = _dereq_('./on');
				var bind = _dereq_('component-bind');
				var debug = _dereq_('debug')('socket.io-client:socket');
				var hasBin = _dereq_('has-binary');

				/**
     * Module exports.
     */

				module.exports = exports = Socket;

				/**
     * Internal events (blacklisted).
     * These events can't be emitted by the user.
     *
     * @api private
     */

				var events = {
					connect: 1,
					connect_error: 1,
					connect_timeout: 1,
					connecting: 1,
					disconnect: 1,
					error: 1,
					reconnect: 1,
					reconnect_attempt: 1,
					reconnect_failed: 1,
					reconnect_error: 1,
					reconnecting: 1,
					ping: 1,
					pong: 1
				};

				/**
     * Shortcut to `Emitter#emit`.
     */

				var emit = Emitter.prototype.emit;

				/**
     * `Socket` constructor.
     *
     * @api public
     */

				function Socket(io, nsp) {
					this.io = io;
					this.nsp = nsp;
					this.json = this; // compat
					this.ids = 0;
					this.acks = {};
					this.receiveBuffer = [];
					this.sendBuffer = [];
					this.connected = false;
					this.disconnected = true;
					if (this.io.autoConnect) this.open();
				}

				/**
     * Mix in `Emitter`.
     */

				Emitter(Socket.prototype);

				/**
     * Subscribe to open, close and packet events
     *
     * @api private
     */

				Socket.prototype.subEvents = function () {
					if (this.subs) return;

					var io = this.io;
					this.subs = [on(io, 'open', bind(this, 'onopen')), on(io, 'packet', bind(this, 'onpacket')), on(io, 'close', bind(this, 'onclose'))];
				};

				/**
     * "Opens" the socket.
     *
     * @api public
     */

				Socket.prototype.open = Socket.prototype.connect = function () {
					if (this.connected) return this;

					this.subEvents();
					this.io.open(); // ensure open
					if ('open' == this.io.readyState) this.onopen();
					this.emit('connecting');
					return this;
				};

				/**
     * Sends a `message` event.
     *
     * @return {Socket} self
     * @api public
     */

				Socket.prototype.send = function () {
					var args = toArray(arguments);
					args.unshift('message');
					this.emit.apply(this, args);
					return this;
				};

				/**
     * Override `emit`.
     * If the event is in `events`, it's emitted normally.
     *
     * @param {String} event name
     * @return {Socket} self
     * @api public
     */

				Socket.prototype.emit = function (ev) {
					if (events.hasOwnProperty(ev)) {
						emit.apply(this, arguments);
						return this;
					}

					var args = toArray(arguments);
					var parserType = parser.EVENT; // default
					if (hasBin(args)) {
						parserType = parser.BINARY_EVENT;
					} // binary
					var packet = { type: parserType, data: args };

					packet.options = {};
					packet.options.compress = !this.flags || false !== this.flags.compress;

					// event ack callback
					if ('function' == typeof args[args.length - 1]) {
						debug('emitting packet with ack id %d', this.ids);
						this.acks[this.ids] = args.pop();
						packet.id = this.ids++;
					}

					if (this.connected) {
						this.packet(packet);
					} else {
						this.sendBuffer.push(packet);
					}

					delete this.flags;

					return this;
				};

				/**
     * Sends a packet.
     *
     * @param {Object} packet
     * @api private
     */

				Socket.prototype.packet = function (packet) {
					packet.nsp = this.nsp;
					this.io.packet(packet);
				};

				/**
     * Called upon engine `open`.
     *
     * @api private
     */

				Socket.prototype.onopen = function () {
					debug('transport is open - connecting');

					// write connect packet if necessary
					if ('/' != this.nsp) {
						this.packet({ type: parser.CONNECT });
					}
				};

				/**
     * Called upon engine `close`.
     *
     * @param {String} reason
     * @api private
     */

				Socket.prototype.onclose = function (reason) {
					debug('close (%s)', reason);
					this.connected = false;
					this.disconnected = true;
					delete this.id;
					this.emit('disconnect', reason);
				};

				/**
     * Called with socket packet.
     *
     * @param {Object} packet
     * @api private
     */

				Socket.prototype.onpacket = function (packet) {
					if (packet.nsp != this.nsp) return;

					switch (packet.type) {
						case parser.CONNECT:
							this.onconnect();
							break;

						case parser.EVENT:
							this.onevent(packet);
							break;

						case parser.BINARY_EVENT:
							this.onevent(packet);
							break;

						case parser.ACK:
							this.onack(packet);
							break;

						case parser.BINARY_ACK:
							this.onack(packet);
							break;

						case parser.DISCONNECT:
							this.ondisconnect();
							break;

						case parser.ERROR:
							this.emit('error', packet.data);
							break;
					}
				};

				/**
     * Called upon a server event.
     *
     * @param {Object} packet
     * @api private
     */

				Socket.prototype.onevent = function (packet) {
					var args = packet.data || [];
					debug('emitting event %j', args);

					if (null != packet.id) {
						debug('attaching ack callback to event');
						args.push(this.ack(packet.id));
					}

					if (this.connected) {
						emit.apply(this, args);
					} else {
						this.receiveBuffer.push(args);
					}
				};

				/**
     * Produces an ack callback to emit with an event.
     *
     * @api private
     */

				Socket.prototype.ack = function (id) {
					var self = this;
					var sent = false;
					return function () {
						// prevent double callbacks
						if (sent) return;
						sent = true;
						var args = toArray(arguments);
						debug('sending ack %j', args);

						var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
						self.packet({
							type: type,
							id: id,
							data: args
						});
					};
				};

				/**
     * Called upon a server acknowlegement.
     *
     * @param {Object} packet
     * @api private
     */

				Socket.prototype.onack = function (packet) {
					var ack = this.acks[packet.id];
					if ('function' == typeof ack) {
						debug('calling ack %s with %j', packet.id, packet.data);
						ack.apply(this, packet.data);
						delete this.acks[packet.id];
					} else {
						debug('bad ack %s', packet.id);
					}
				};

				/**
     * Called upon server connect.
     *
     * @api private
     */

				Socket.prototype.onconnect = function () {
					this.connected = true;
					this.disconnected = false;
					this.emit('connect');
					this.emitBuffered();
				};

				/**
     * Emit buffered events (received and emitted).
     *
     * @api private
     */

				Socket.prototype.emitBuffered = function () {
					var i;
					for (i = 0; i < this.receiveBuffer.length; i++) {
						emit.apply(this, this.receiveBuffer[i]);
					}
					this.receiveBuffer = [];

					for (i = 0; i < this.sendBuffer.length; i++) {
						this.packet(this.sendBuffer[i]);
					}
					this.sendBuffer = [];
				};

				/**
     * Called upon server disconnect.
     *
     * @api private
     */

				Socket.prototype.ondisconnect = function () {
					debug('server disconnect (%s)', this.nsp);
					this.destroy();
					this.onclose('io server disconnect');
				};

				/**
     * Called upon forced client/server side disconnections,
     * this method ensures the manager stops tracking us and
     * that reconnections don't get triggered for this.
     *
     * @api private.
     */

				Socket.prototype.destroy = function () {
					if (this.subs) {
						// clean subscriptions to avoid reconnections
						for (var i = 0; i < this.subs.length; i++) {
							this.subs[i].destroy();
						}
						this.subs = null;
					}

					this.io.destroy(this);
				};

				/**
     * Disconnects the socket manually.
     *
     * @return {Socket} self
     * @api public
     */

				Socket.prototype.close = Socket.prototype.disconnect = function () {
					if (this.connected) {
						debug('performing disconnect (%s)', this.nsp);
						this.packet({ type: parser.DISCONNECT });
					}

					// remove socket from pool
					this.destroy();

					if (this.connected) {
						// fire events
						this.onclose('io client disconnect');
					}
					return this;
				};

				/**
     * Sets the compress flag.
     *
     * @param {Boolean} if `true`, compresses the sending data
     * @return {Socket} self
     * @api public
     */

				Socket.prototype.compress = function (compress) {
					this.flags = this.flags || {};
					this.flags.compress = compress;
					return this;
				};
			}, { "./on": 33, "component-bind": 37, "component-emitter": 38, "debug": 39, "has-binary": 41, "socket.io-parser": 47, "to-array": 51 }], 35: [function (_dereq_, module, exports) {
				(function (global) {

					/**
      * Module dependencies.
      */

					var parseuri = _dereq_('parseuri');
					var debug = _dereq_('debug')('socket.io-client:url');

					/**
      * Module exports.
      */

					module.exports = url;

					/**
      * URL parser.
      *
      * @param {String} url
      * @param {Object} An object meant to mimic window.location.
      *                 Defaults to window.location.
      * @api public
      */

					function url(uri, loc) {
						var obj = uri;

						// default to window.location
						var loc = loc || global.location;
						if (null == uri) uri = loc.protocol + '//' + loc.host;

						// relative path support
						if ('string' == typeof uri) {
							if ('/' == uri.charAt(0)) {
								if ('/' == uri.charAt(1)) {
									uri = loc.protocol + uri;
								} else {
									uri = loc.host + uri;
								}
							}

							if (!/^(https?|wss?):\/\//.test(uri)) {
								debug('protocol-less url %s', uri);
								if ('undefined' != typeof loc) {
									uri = loc.protocol + '//' + uri;
								} else {
									uri = 'https://' + uri;
								}
							}

							// parse
							debug('parse %s', uri);
							obj = parseuri(uri);
						}

						// make sure we treat `localhost:80` and `localhost` equally
						if (!obj.port) {
							if (/^(http|ws)$/.test(obj.protocol)) {
								obj.port = '80';
							} else if (/^(http|ws)s$/.test(obj.protocol)) {
								obj.port = '443';
							}
						}

						obj.path = obj.path || '/';

						var ipv6 = obj.host.indexOf(':') !== -1;
						var host = ipv6 ? '[' + obj.host + ']' : obj.host;

						// define unique id
						obj.id = obj.protocol + '://' + host + ':' + obj.port;
						// define href
						obj.href = obj.protocol + '://' + host + (loc && loc.port == obj.port ? '' : ':' + obj.port);

						return obj;
					}
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, { "debug": 39, "parseuri": 45 }], 36: [function (_dereq_, module, exports) {

				/**
     * Expose `Backoff`.
     */

				module.exports = Backoff;

				/**
     * Initialize backoff timer with `opts`.
     *
     * - `min` initial timeout in milliseconds [100]
     * - `max` max timeout [10000]
     * - `jitter` [0]
     * - `factor` [2]
     *
     * @param {Object} opts
     * @api public
     */

				function Backoff(opts) {
					opts = opts || {};
					this.ms = opts.min || 100;
					this.max = opts.max || 10000;
					this.factor = opts.factor || 2;
					this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
					this.attempts = 0;
				}

				/**
     * Return the backoff duration.
     *
     * @return {Number}
     * @api public
     */

				Backoff.prototype.duration = function () {
					var ms = this.ms * Math.pow(this.factor, this.attempts++);
					if (this.jitter) {
						var rand = Math.random();
						var deviation = Math.floor(rand * this.jitter * ms);
						ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
					}
					return Math.min(ms, this.max) | 0;
				};

				/**
     * Reset the number of attempts.
     *
     * @api public
     */

				Backoff.prototype.reset = function () {
					this.attempts = 0;
				};

				/**
     * Set the minimum duration
     *
     * @api public
     */

				Backoff.prototype.setMin = function (min) {
					this.ms = min;
				};

				/**
     * Set the maximum duration
     *
     * @api public
     */

				Backoff.prototype.setMax = function (max) {
					this.max = max;
				};

				/**
     * Set the jitter
     *
     * @api public
     */

				Backoff.prototype.setJitter = function (jitter) {
					this.jitter = jitter;
				};
			}, {}], 37: [function (_dereq_, module, exports) {
				/**
     * Slice reference.
     */

				var slice = [].slice;

				/**
     * Bind `obj` to `fn`.
     *
     * @param {Object} obj
     * @param {Function|String} fn or string
     * @return {Function}
     * @api public
     */

				module.exports = function (obj, fn) {
					if ('string' == typeof fn) fn = obj[fn];
					if ('function' != typeof fn) throw new Error('bind() requires a function');
					var args = slice.call(arguments, 2);
					return function () {
						return fn.apply(obj, args.concat(slice.call(arguments)));
					};
				};
			}, {}], 38: [function (_dereq_, module, exports) {

				/**
     * Expose `Emitter`.
     */

				module.exports = Emitter;

				/**
     * Initialize a new `Emitter`.
     *
     * @api public
     */

				function Emitter(obj) {
					if (obj) return mixin(obj);
				};

				/**
     * Mixin the emitter properties.
     *
     * @param {Object} obj
     * @return {Object}
     * @api private
     */

				function mixin(obj) {
					for (var key in Emitter.prototype) {
						obj[key] = Emitter.prototype[key];
					}
					return obj;
				}

				/**
     * Listen on the given `event` with `fn`.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */

				Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
					this._callbacks = this._callbacks || {};
					(this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
					return this;
				};

				/**
     * Adds an `event` listener that will be invoked a single
     * time then automatically removed.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */

				Emitter.prototype.once = function (event, fn) {
					function on() {
						this.off(event, on);
						fn.apply(this, arguments);
					}

					on.fn = fn;
					this.on(event, on);
					return this;
				};

				/**
     * Remove the given callback for `event` or all
     * registered callbacks.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */

				Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
					this._callbacks = this._callbacks || {};

					// all
					if (0 == arguments.length) {
						this._callbacks = {};
						return this;
					}

					// specific event
					var callbacks = this._callbacks['$' + event];
					if (!callbacks) return this;

					// remove all handlers
					if (1 == arguments.length) {
						delete this._callbacks['$' + event];
						return this;
					}

					// remove specific handler
					var cb;
					for (var i = 0; i < callbacks.length; i++) {
						cb = callbacks[i];
						if (cb === fn || cb.fn === fn) {
							callbacks.splice(i, 1);
							break;
						}
					}
					return this;
				};

				/**
     * Emit `event` with the given args.
     *
     * @param {String} event
     * @param {Mixed} ...
     * @return {Emitter}
     */

				Emitter.prototype.emit = function (event) {
					this._callbacks = this._callbacks || {};
					var args = [].slice.call(arguments, 1),
					    callbacks = this._callbacks['$' + event];

					if (callbacks) {
						callbacks = callbacks.slice(0);
						for (var i = 0, len = callbacks.length; i < len; ++i) {
							callbacks[i].apply(this, args);
						}
					}

					return this;
				};

				/**
     * Return array of callbacks for `event`.
     *
     * @param {String} event
     * @return {Array}
     * @api public
     */

				Emitter.prototype.listeners = function (event) {
					this._callbacks = this._callbacks || {};
					return this._callbacks['$' + event] || [];
				};

				/**
     * Check if this emitter has `event` handlers.
     *
     * @param {String} event
     * @return {Boolean}
     * @api public
     */

				Emitter.prototype.hasListeners = function (event) {
					return !!this.listeners(event).length;
				};
			}, {}], 39: [function (_dereq_, module, exports) {
				arguments[4][17][0].apply(exports, arguments);
			}, { "./debug": 40, "dup": 17 }], 40: [function (_dereq_, module, exports) {
				arguments[4][18][0].apply(exports, arguments);
			}, { "dup": 18, "ms": 44 }], 41: [function (_dereq_, module, exports) {
				(function (global) {

					/*
      * Module requirements.
      */

					var isArray = _dereq_('isarray');

					/**
      * Module exports.
      */

					module.exports = hasBinary;

					/**
      * Checks for binary data.
      *
      * Right now only Buffer and ArrayBuffer are supported..
      *
      * @param {Object} anything
      * @api public
      */

					function hasBinary(data) {

						function _hasBinary(obj) {
							if (!obj) return false;

							if (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer || global.Blob && obj instanceof Blob || global.File && obj instanceof File) {
								return true;
							}

							if (isArray(obj)) {
								for (var i = 0; i < obj.length; i++) {
									if (_hasBinary(obj[i])) {
										return true;
									}
								}
							} else if (obj && 'object' == (typeof obj === "undefined" ? "undefined" : _typeof(obj))) {
								// see: https://github.com/Automattic/has-binary/pull/4
								if (obj.toJSON && 'function' == typeof obj.toJSON) {
									obj = obj.toJSON();
								}

								for (var key in obj) {
									if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
										return true;
									}
								}
							}

							return false;
						}

						return _hasBinary(data);
					}
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, { "isarray": 43 }], 42: [function (_dereq_, module, exports) {
				arguments[4][23][0].apply(exports, arguments);
			}, { "dup": 23 }], 43: [function (_dereq_, module, exports) {
				arguments[4][24][0].apply(exports, arguments);
			}, { "dup": 24 }], 44: [function (_dereq_, module, exports) {
				arguments[4][25][0].apply(exports, arguments);
			}, { "dup": 25 }], 45: [function (_dereq_, module, exports) {
				arguments[4][28][0].apply(exports, arguments);
			}, { "dup": 28 }], 46: [function (_dereq_, module, exports) {
				(function (global) {
					/*global Blob,File*/

					/**
      * Module requirements
      */

					var isArray = _dereq_('isarray');
					var isBuf = _dereq_('./is-buffer');

					/**
      * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
      * Anything with blobs or files should be fed through removeBlobs before coming
      * here.
      *
      * @param {Object} packet - socket.io event packet
      * @return {Object} with deconstructed packet and list of buffers
      * @api public
      */

					exports.deconstructPacket = function (packet) {
						var buffers = [];
						var packetData = packet.data;

						function _deconstructPacket(data) {
							if (!data) return data;

							if (isBuf(data)) {
								var placeholder = { _placeholder: true, num: buffers.length };
								buffers.push(data);
								return placeholder;
							} else if (isArray(data)) {
								var newData = new Array(data.length);
								for (var i = 0; i < data.length; i++) {
									newData[i] = _deconstructPacket(data[i]);
								}
								return newData;
							} else if ('object' == (typeof data === "undefined" ? "undefined" : _typeof(data)) && !(data instanceof Date)) {
								var newData = {};
								for (var key in data) {
									newData[key] = _deconstructPacket(data[key]);
								}
								return newData;
							}
							return data;
						}

						var pack = packet;
						pack.data = _deconstructPacket(packetData);
						pack.attachments = buffers.length; // number of binary 'attachments'
						return { packet: pack, buffers: buffers };
					};

					/**
      * Reconstructs a binary packet from its placeholder packet and buffers
      *
      * @param {Object} packet - event packet with placeholders
      * @param {Array} buffers - binary buffers to put in placeholder positions
      * @return {Object} reconstructed packet
      * @api public
      */

					exports.reconstructPacket = function (packet, buffers) {
						var curPlaceHolder = 0;

						function _reconstructPacket(data) {
							if (data && data._placeholder) {
								var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
								return buf;
							} else if (isArray(data)) {
								for (var i = 0; i < data.length; i++) {
									data[i] = _reconstructPacket(data[i]);
								}
								return data;
							} else if (data && 'object' == (typeof data === "undefined" ? "undefined" : _typeof(data))) {
								for (var key in data) {
									data[key] = _reconstructPacket(data[key]);
								}
								return data;
							}
							return data;
						}

						packet.data = _reconstructPacket(packet.data);
						packet.attachments = undefined; // no longer useful
						return packet;
					};

					/**
      * Asynchronously removes Blobs or Files from data via
      * FileReader's readAsArrayBuffer method. Used before encoding
      * data as msgpack. Calls callback with the blobless data.
      *
      * @param {Object} data
      * @param {Function} callback
      * @api private
      */

					exports.removeBlobs = function (data, callback) {
						function _removeBlobs(obj, curKey, containingObject) {
							if (!obj) return obj;

							// convert any blob
							if (global.Blob && obj instanceof Blob || global.File && obj instanceof File) {
								pendingBlobs++;

								// async filereader
								var fileReader = new FileReader();
								fileReader.onload = function () {
									// this.result == arraybuffer
									if (containingObject) {
										containingObject[curKey] = this.result;
									} else {
										bloblessData = this.result;
									}

									// if nothing pending its callback time
									if (! --pendingBlobs) {
										callback(bloblessData);
									}
								};

								fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
							} else if (isArray(obj)) {
								// handle array
								for (var i = 0; i < obj.length; i++) {
									_removeBlobs(obj[i], i, obj);
								}
							} else if (obj && 'object' == (typeof obj === "undefined" ? "undefined" : _typeof(obj)) && !isBuf(obj)) {
								// and object
								for (var key in obj) {
									_removeBlobs(obj[key], key, obj);
								}
							}
						}

						var pendingBlobs = 0;
						var bloblessData = data;
						_removeBlobs(bloblessData);
						if (!pendingBlobs) {
							callback(bloblessData);
						}
					};
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, { "./is-buffer": 48, "isarray": 43 }], 47: [function (_dereq_, module, exports) {

				/**
     * Module dependencies.
     */

				var debug = _dereq_('debug')('socket.io-parser');
				var json = _dereq_('json3');
				var isArray = _dereq_('isarray');
				var Emitter = _dereq_('component-emitter');
				var binary = _dereq_('./binary');
				var isBuf = _dereq_('./is-buffer');

				/**
     * Protocol version.
     *
     * @api public
     */

				exports.protocol = 4;

				/**
     * Packet types.
     *
     * @api public
     */

				exports.types = ['CONNECT', 'DISCONNECT', 'EVENT', 'BINARY_EVENT', 'ACK', 'BINARY_ACK', 'ERROR'];

				/**
     * Packet type `connect`.
     *
     * @api public
     */

				exports.CONNECT = 0;

				/**
     * Packet type `disconnect`.
     *
     * @api public
     */

				exports.DISCONNECT = 1;

				/**
     * Packet type `event`.
     *
     * @api public
     */

				exports.EVENT = 2;

				/**
     * Packet type `ack`.
     *
     * @api public
     */

				exports.ACK = 3;

				/**
     * Packet type `error`.
     *
     * @api public
     */

				exports.ERROR = 4;

				/**
     * Packet type 'binary event'
     *
     * @api public
     */

				exports.BINARY_EVENT = 5;

				/**
     * Packet type `binary ack`. For acks with binary arguments.
     *
     * @api public
     */

				exports.BINARY_ACK = 6;

				/**
     * Encoder constructor.
     *
     * @api public
     */

				exports.Encoder = Encoder;

				/**
     * Decoder constructor.
     *
     * @api public
     */

				exports.Decoder = Decoder;

				/**
     * A socket.io Encoder instance
     *
     * @api public
     */

				function Encoder() {}

				/**
     * Encode a packet as a single string if non-binary, or as a
     * buffer sequence, depending on packet type.
     *
     * @param {Object} obj - packet object
     * @param {Function} callback - function to handle encodings (likely engine.write)
     * @return Calls callback with Array of encodings
     * @api public
     */

				Encoder.prototype.encode = function (obj, callback) {
					debug('encoding packet %j', obj);

					if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
						encodeAsBinary(obj, callback);
					} else {
						var encoding = encodeAsString(obj);
						callback([encoding]);
					}
				};

				/**
     * Encode packet as string.
     *
     * @param {Object} packet
     * @return {String} encoded
     * @api private
     */

				function encodeAsString(obj) {
					var str = '';
					var nsp = false;

					// first is type
					str += obj.type;

					// attachments if we have them
					if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
						str += obj.attachments;
						str += '-';
					}

					// if we have a namespace other than `/`
					// we append it followed by a comma `,`
					if (obj.nsp && '/' != obj.nsp) {
						nsp = true;
						str += obj.nsp;
					}

					// immediately followed by the id
					if (null != obj.id) {
						if (nsp) {
							str += ',';
							nsp = false;
						}
						str += obj.id;
					}

					// json data
					if (null != obj.data) {
						if (nsp) str += ',';
						str += json.stringify(obj.data);
					}

					debug('encoded %j as %s', obj, str);
					return str;
				}

				/**
     * Encode packet as 'buffer sequence' by removing blobs, and
     * deconstructing packet into object with placeholders and
     * a list of buffers.
     *
     * @param {Object} packet
     * @return {Buffer} encoded
     * @api private
     */

				function encodeAsBinary(obj, callback) {

					function writeEncoding(bloblessData) {
						var deconstruction = binary.deconstructPacket(bloblessData);
						var pack = encodeAsString(deconstruction.packet);
						var buffers = deconstruction.buffers;

						buffers.unshift(pack); // add packet info to beginning of data list
						callback(buffers); // write all the buffers
					}

					binary.removeBlobs(obj, writeEncoding);
				}

				/**
     * A socket.io Decoder instance
     *
     * @return {Object} decoder
     * @api public
     */

				function Decoder() {
					this.reconstructor = null;
				}

				/**
     * Mix in `Emitter` with Decoder.
     */

				Emitter(Decoder.prototype);

				/**
     * Decodes an ecoded packet string into packet JSON.
     *
     * @param {String} obj - encoded packet
     * @return {Object} packet
     * @api public
     */

				Decoder.prototype.add = function (obj) {
					var packet;
					if ('string' == typeof obj) {
						packet = decodeString(obj);
						if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) {
							// binary packet's json
							this.reconstructor = new BinaryReconstructor(packet);

							// no attachments, labeled binary but no binary data to follow
							if (this.reconstructor.reconPack.attachments === 0) {
								this.emit('decoded', packet);
							}
						} else {
							// non-binary full packet
							this.emit('decoded', packet);
						}
					} else if (isBuf(obj) || obj.base64) {
						// raw binary data
						if (!this.reconstructor) {
							throw new Error('got binary data when not reconstructing a packet');
						} else {
							packet = this.reconstructor.takeBinaryData(obj);
							if (packet) {
								// received final buffer
								this.reconstructor = null;
								this.emit('decoded', packet);
							}
						}
					} else {
						throw new Error('Unknown type: ' + obj);
					}
				};

				/**
     * Decode a packet String (JSON data)
     *
     * @param {String} str
     * @return {Object} packet
     * @api private
     */

				function decodeString(str) {
					var p = {};
					var i = 0;

					// look up type
					p.type = Number(str.charAt(0));
					if (null == exports.types[p.type]) return error();

					// look up attachments if type binary
					if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
						var buf = '';
						while (str.charAt(++i) != '-') {
							buf += str.charAt(i);
							if (i == str.length) break;
						}
						if (buf != Number(buf) || str.charAt(i) != '-') {
							throw new Error('Illegal attachments');
						}
						p.attachments = Number(buf);
					}

					// look up namespace (if any)
					if ('/' == str.charAt(i + 1)) {
						p.nsp = '';
						while (++i) {
							var c = str.charAt(i);
							if (',' == c) break;
							p.nsp += c;
							if (i == str.length) break;
						}
					} else {
						p.nsp = '/';
					}

					// look up id
					var next = str.charAt(i + 1);
					if ('' !== next && Number(next) == next) {
						p.id = '';
						while (++i) {
							var c = str.charAt(i);
							if (null == c || Number(c) != c) {
								--i;
								break;
							}
							p.id += str.charAt(i);
							if (i == str.length) break;
						}
						p.id = Number(p.id);
					}

					// look up json data
					if (str.charAt(++i)) {
						try {
							p.data = json.parse(str.substr(i));
						} catch (e) {
							return error();
						}
					}

					debug('decoded %s as %j', str, p);
					return p;
				}

				/**
     * Deallocates a parser's resources
     *
     * @api public
     */

				Decoder.prototype.destroy = function () {
					if (this.reconstructor) {
						this.reconstructor.finishedReconstruction();
					}
				};

				/**
     * A manager of a binary event's 'buffer sequence'. Should
     * be constructed whenever a packet of type BINARY_EVENT is
     * decoded.
     *
     * @param {Object} packet
     * @return {BinaryReconstructor} initialized reconstructor
     * @api private
     */

				function BinaryReconstructor(packet) {
					this.reconPack = packet;
					this.buffers = [];
				}

				/**
     * Method to be called when binary data received from connection
     * after a BINARY_EVENT packet.
     *
     * @param {Buffer | ArrayBuffer} binData - the raw binary data received
     * @return {null | Object} returns null if more binary data is expected or
     *   a reconstructed packet object if all buffers have been received.
     * @api private
     */

				BinaryReconstructor.prototype.takeBinaryData = function (binData) {
					this.buffers.push(binData);
					if (this.buffers.length == this.reconPack.attachments) {
						// done with buffer list
						var packet = binary.reconstructPacket(this.reconPack, this.buffers);
						this.finishedReconstruction();
						return packet;
					}
					return null;
				};

				/**
     * Cleans up binary packet reconstruction variables.
     *
     * @api private
     */

				BinaryReconstructor.prototype.finishedReconstruction = function () {
					this.reconPack = null;
					this.buffers = [];
				};

				function error(data) {
					return {
						type: exports.ERROR,
						data: 'parser error'
					};
				}
			}, { "./binary": 46, "./is-buffer": 48, "component-emitter": 49, "debug": 39, "isarray": 43, "json3": 50 }], 48: [function (_dereq_, module, exports) {
				(function (global) {

					module.exports = isBuf;

					/**
      * Returns true if obj is a buffer or an arraybuffer.
      *
      * @api private
      */

					function isBuf(obj) {
						return global.Buffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer;
					}
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, {}], 49: [function (_dereq_, module, exports) {
				arguments[4][15][0].apply(exports, arguments);
			}, { "dup": 15 }], 50: [function (_dereq_, module, exports) {
				(function (global) {
					/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
					;(function () {
						// Detect the `define` function exposed by asynchronous module loaders. The
						// strict `define` check is necessary for compatibility with `r.js`.
						var isLoader = typeof define === "function" && define.amd;

						// A set of types used to distinguish objects from primitives.
						var objectTypes = {
							"function": true,
							"object": true
						};

						// Detect the `exports` object exposed by CommonJS implementations.
						var freeExports = objectTypes[typeof exports === "undefined" ? "undefined" : _typeof(exports)] && exports && !exports.nodeType && exports;

						// Use the `global` object exposed by Node (including Browserify via
						// `insert-module-globals`), Narwhal, and Ringo as the default context,
						// and the `window` object in browsers. Rhino exports a `global` function
						// instead.
						var root = objectTypes[typeof window === "undefined" ? "undefined" : _typeof(window)] && window || this,
						    freeGlobal = freeExports && objectTypes[typeof module === "undefined" ? "undefined" : _typeof(module)] && module && !module.nodeType && (typeof global === "undefined" ? "undefined" : _typeof(global)) == "object" && global;

						if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
							root = freeGlobal;
						}

						// Public: Initializes JSON 3 using the given `context` object, attaching the
						// `stringify` and `parse` functions to the specified `exports` object.
						function runInContext(context, exports) {
							context || (context = root["Object"]());
							exports || (exports = root["Object"]());

							// Native constructor aliases.
							var Number = context["Number"] || root["Number"],
							    String = context["String"] || root["String"],
							    Object = context["Object"] || root["Object"],
							    Date = context["Date"] || root["Date"],
							    SyntaxError = context["SyntaxError"] || root["SyntaxError"],
							    TypeError = context["TypeError"] || root["TypeError"],
							    Math = context["Math"] || root["Math"],
							    nativeJSON = context["JSON"] || root["JSON"];

							// Delegate to the native `stringify` and `parse` implementations.
							if ((typeof nativeJSON === "undefined" ? "undefined" : _typeof(nativeJSON)) == "object" && nativeJSON) {
								exports.stringify = nativeJSON.stringify;
								exports.parse = nativeJSON.parse;
							}

							// Convenience aliases.
							var objectProto = Object.prototype,
							    getClass = objectProto.toString,
							    _isProperty,
							    _forEach,
							    undef;

							// Test the `Date#getUTC*` methods. Based on work by @Yaffle.
							var isExtended = new Date(-3509827334573292);
							try {
								// The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
								// results for certain dates in Opera >= 10.53.
								isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
								// Safari < 2.0.2 stores the internal millisecond time value correctly,
								// but clips the values returned by the date methods to the range of
								// signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
								isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
							} catch (exception) {}

							// Internal: Determines whether the native `JSON.stringify` and `parse`
							// implementations are spec-compliant. Based on work by Ken Snyder.
							function has(name) {
								if (has[name] !== undef) {
									// Return cached feature test result.
									return has[name];
								}
								var isSupported;
								if (name == "bug-string-char-index") {
									// IE <= 7 doesn't support accessing string characters using square
									// bracket notation. IE 8 only supports this for primitives.
									isSupported = "a"[0] != "a";
								} else if (name == "json") {
									// Indicates whether both `JSON.stringify` and `JSON.parse` are
									// supported.
									isSupported = has("json-stringify") && has("json-parse");
								} else {
									var value,
									    serialized = "{\"a\":[1,true,false,null,\"\\u0000\\b\\n\\f\\r\\t\"]}";
									// Test `JSON.stringify`.
									if (name == "json-stringify") {
										var stringify = exports.stringify,
										    stringifySupported = typeof stringify == "function" && isExtended;
										if (stringifySupported) {
											// A test function object with a custom `toJSON` method.
											(value = function value() {
												return 1;
											}).toJSON = value;
											try {
												stringifySupported =
												// Firefox 3.1b1 and b2 serialize string, number, and boolean
												// primitives as object literals.
												stringify(0) === "0" &&
												// FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
												// literals.
												stringify(new Number()) === "0" && stringify(new String()) == '""' &&
												// FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
												// does not define a canonical JSON representation (this applies to
												// objects with `toJSON` properties as well, *unless* they are nested
												// within an object or array).
												stringify(getClass) === undef &&
												// IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
												// FF 3.1b3 pass this test.
												stringify(undef) === undef &&
												// Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
												// respectively, if the value is omitted entirely.
												stringify() === undef &&
												// FF 3.1b1, 2 throw an error if the given value is not a number,
												// string, array, object, Boolean, or `null` literal. This applies to
												// objects with custom `toJSON` methods as well, unless they are nested
												// inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
												// methods entirely.
												stringify(value) === "1" && stringify([value]) == "[1]" &&
												// Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
												// `"[null]"`.
												stringify([undef]) == "[null]" &&
												// YUI 3.0.0b1 fails to serialize `null` literals.
												stringify(null) == "null" &&
												// FF 3.1b1, 2 halts serialization if an array contains a function:
												// `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
												// elides non-JSON values from objects and arrays, unless they
												// define custom `toJSON` methods.
												stringify([undef, getClass, null]) == "[null,null,null]" &&
												// Simple serialization test. FF 3.1b1 uses Unicode escape sequences
												// where character escape codes are expected (e.g., `\b` => `\u0008`).
												stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
												// FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
												stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
												// JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
												// serialize extended years.
												stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
												// The milliseconds are optional in ES 5, but required in 5.1.
												stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
												// Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
												// four-digit years instead of six-digit years. Credits: @Yaffle.
												stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
												// Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
												// values less than 1000. Credits: @Yaffle.
												stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
											} catch (exception) {
												stringifySupported = false;
											}
										}
										isSupported = stringifySupported;
									}
									// Test `JSON.parse`.
									if (name == "json-parse") {
										var parse = exports.parse;
										if (typeof parse == "function") {
											try {
												// FF 3.1b1, b2 will throw an exception if a bare literal is provided.
												// Conforming implementations should also coerce the initial argument to
												// a string prior to parsing.
												if (parse("0") === 0 && !parse(false)) {
													// Simple parsing test.
													value = parse(serialized);
													var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
													if (parseSupported) {
														try {
															// Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
															parseSupported = !parse('"\t"');
														} catch (exception) {}
														if (parseSupported) {
															try {
																// FF 4.0 and 4.0.1 allow leading `+` signs and leading
																// decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
																// certain octal literals.
																parseSupported = parse("01") !== 1;
															} catch (exception) {}
														}
														if (parseSupported) {
															try {
																// FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
																// points. These environments, along with FF 3.1b1 and 2,
																// also allow trailing commas in JSON objects and arrays.
																parseSupported = parse("1.") !== 1;
															} catch (exception) {}
														}
													}
												}
											} catch (exception) {
												parseSupported = false;
											}
										}
										isSupported = parseSupported;
									}
								}
								return has[name] = !!isSupported;
							}

							if (!has("json")) {
								// Common `[[Class]]` name aliases.
								var functionClass = "[object Function]",
								    dateClass = "[object Date]",
								    numberClass = "[object Number]",
								    stringClass = "[object String]",
								    arrayClass = "[object Array]",
								    booleanClass = "[object Boolean]";

								// Detect incomplete support for accessing string characters by index.
								var charIndexBuggy = has("bug-string-char-index");

								// Define additional utility methods if the `Date` methods are buggy.
								if (!isExtended) {
									var floor = Math.floor;
									// A mapping between the months of the year and the number of days between
									// January 1st and the first of the respective month.
									var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
									// Internal: Calculates the number of days between the Unix epoch and the
									// first day of the given month.
									var getDay = function getDay(year, month) {
										return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
									};
								}

								// Internal: Determines if a property is a direct property of the given
								// object. Delegates to the native `Object#hasOwnProperty` method.
								if (!(_isProperty = objectProto.hasOwnProperty)) {
									_isProperty = function isProperty(property) {
										var members = {},
										    constructor;
										if ((members.__proto__ = null, members.__proto__ = {
											// The *proto* property cannot be set multiple times in recent
											// versions of Firefox and SeaMonkey.
											"toString": 1
										}, members).toString != getClass) {
											// Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
											// supports the mutable *proto* property.
											_isProperty = function isProperty(property) {
												// Capture and break the object's prototype chain (see section 8.6.2
												// of the ES 5.1 spec). The parenthesized expression prevents an
												// unsafe transformation by the Closure Compiler.
												var original = this.__proto__,
												    result = property in (this.__proto__ = null, this);
												// Restore the original prototype chain.
												this.__proto__ = original;
												return result;
											};
										} else {
											// Capture a reference to the top-level `Object` constructor.
											constructor = members.constructor;
											// Use the `constructor` property to simulate `Object#hasOwnProperty` in
											// other environments.
											_isProperty = function isProperty(property) {
												var parent = (this.constructor || constructor).prototype;
												return property in this && !(property in parent && this[property] === parent[property]);
											};
										}
										members = null;
										return _isProperty.call(this, property);
									};
								}

								// Internal: Normalizes the `for...in` iteration algorithm across
								// environments. Each enumerated key is yielded to a `callback` function.
								_forEach = function forEach(object, callback) {
									var size = 0,
									    Properties,
									    members,
									    property;

									// Tests for bugs in the current environment's `for...in` algorithm. The
									// `valueOf` property inherits the non-enumerable flag from
									// `Object.prototype` in older versions of IE, Netscape, and Mozilla.
									(Properties = function Properties() {
										this.valueOf = 0;
									}).prototype.valueOf = 0;

									// Iterate over a new instance of the `Properties` class.
									members = new Properties();
									for (property in members) {
										// Ignore all properties inherited from `Object.prototype`.
										if (_isProperty.call(members, property)) {
											size++;
										}
									}
									Properties = members = null;

									// Normalize the iteration algorithm.
									if (!size) {
										// A list of non-enumerable properties inherited from `Object.prototype`.
										members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
										// IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
										// properties.
										_forEach = function forEach(object, callback) {
											var isFunction = getClass.call(object) == functionClass,
											    property,
											    length;
											var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[_typeof(object.hasOwnProperty)] && object.hasOwnProperty || _isProperty;
											for (property in object) {
												// Gecko <= 1.0 enumerates the `prototype` property of functions under
												// certain conditions; IE does not.
												if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
													callback(property);
												}
											}
											// Manually invoke the callback for each non-enumerable property.
											for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property)) {}
										};
									} else if (size == 2) {
										// Safari <= 2.0.4 enumerates shadowed properties twice.
										_forEach = function forEach(object, callback) {
											// Create a set of iterated properties.
											var members = {},
											    isFunction = getClass.call(object) == functionClass,
											    property;
											for (property in object) {
												// Store each property name to prevent double enumeration. The
												// `prototype` property of functions is not enumerated due to cross-
												// environment inconsistencies.
												if (!(isFunction && property == "prototype") && !_isProperty.call(members, property) && (members[property] = 1) && _isProperty.call(object, property)) {
													callback(property);
												}
											}
										};
									} else {
										// No bugs detected; use the standard `for...in` algorithm.
										_forEach = function forEach(object, callback) {
											var isFunction = getClass.call(object) == functionClass,
											    property,
											    isConstructor;
											for (property in object) {
												if (!(isFunction && property == "prototype") && _isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
													callback(property);
												}
											}
											// Manually invoke the callback for the `constructor` property due to
											// cross-environment inconsistencies.
											if (isConstructor || _isProperty.call(object, property = "constructor")) {
												callback(property);
											}
										};
									}
									return _forEach(object, callback);
								};

								// Public: Serializes a JavaScript `value` as a JSON string. The optional
								// `filter` argument may specify either a function that alters how object and
								// array members are serialized, or an array of strings and numbers that
								// indicates which properties should be serialized. The optional `width`
								// argument may be either a string or number that specifies the indentation
								// level of the output.
								if (!has("json-stringify")) {
									// Internal: A map of control characters and their escaped equivalents.
									var Escapes = {
										92: "\\\\",
										34: '\\"',
										8: "\\b",
										12: "\\f",
										10: "\\n",
										13: "\\r",
										9: "\\t"
									};

									// Internal: Converts `value` into a zero-padded string such that its
									// length is at least equal to `width`. The `width` must be <= 6.
									var leadingZeroes = "000000";
									var toPaddedString = function toPaddedString(width, value) {
										// The `|| 0` expression is necessary to work around a bug in
										// Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
										return (leadingZeroes + (value || 0)).slice(-width);
									};

									// Internal: Double-quotes a string `value`, replacing all ASCII control
									// characters (characters with code unit values between 0 and 31) with
									// their escaped equivalents. This is an implementation of the
									// `Quote(value)` operation defined in ES 5.1 section 15.12.3.
									var unicodePrefix = "\\u00";
									var quote = function quote(value) {
										var result = '"',
										    index = 0,
										    length = value.length,
										    useCharIndex = !charIndexBuggy || length > 10;
										var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
										for (; index < length; index++) {
											var charCode = value.charCodeAt(index);
											// If the character is a control character, append its Unicode or
											// shorthand escape sequence; otherwise, append the character as-is.
											switch (charCode) {
												case 8:case 9:case 10:case 12:case 13:case 34:case 92:
													result += Escapes[charCode];
													break;
												default:
													if (charCode < 32) {
														result += unicodePrefix + toPaddedString(2, charCode.toString(16));
														break;
													}
													result += useCharIndex ? symbols[index] : value.charAt(index);
											}
										}
										return result + '"';
									};

									// Internal: Recursively serializes an object. Implements the
									// `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
									var serialize = function serialize(property, object, callback, properties, whitespace, indentation, stack) {
										var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
										try {
											// Necessary for host object support.
											value = object[property];
										} catch (exception) {}
										if ((typeof value === "undefined" ? "undefined" : _typeof(value)) == "object" && value) {
											className = getClass.call(value);
											if (className == dateClass && !_isProperty.call(value, "toJSON")) {
												if (value > -1 / 0 && value < 1 / 0) {
													// Dates are serialized according to the `Date#toJSON` method
													// specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
													// for the ISO 8601 date time string format.
													if (getDay) {
														// Manually compute the year, month, date, hours, minutes,
														// seconds, and milliseconds if the `getUTC*` methods are
														// buggy. Adapted from @Yaffle's `date-shim` project.
														date = floor(value / 864e5);
														for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++) {}
														for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++) {}
														date = 1 + date - getDay(year, month);
														// The `time` value specifies the time within the day (see ES
														// 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
														// to compute `A modulo B`, as the `%` operator does not
														// correspond to the `modulo` operation for negative numbers.
														time = (value % 864e5 + 864e5) % 864e5;
														// The hours, minutes, seconds, and milliseconds are obtained by
														// decomposing the time within the day. See section 15.9.1.10.
														hours = floor(time / 36e5) % 24;
														minutes = floor(time / 6e4) % 60;
														seconds = floor(time / 1e3) % 60;
														milliseconds = time % 1e3;
													} else {
														year = value.getUTCFullYear();
														month = value.getUTCMonth();
														date = value.getUTCDate();
														hours = value.getUTCHours();
														minutes = value.getUTCMinutes();
														seconds = value.getUTCSeconds();
														milliseconds = value.getUTCMilliseconds();
													}
													// Serialize extended years correctly.
													value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
													// Months, dates, hours, minutes, and seconds should have two
													// digits; milliseconds should have three.
													"T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
													// Milliseconds are optional in ES 5.0, but required in 5.1.
													"." + toPaddedString(3, milliseconds) + "Z";
												} else {
													value = null;
												}
											} else if (typeof value.toJSON == "function" && (className != numberClass && className != stringClass && className != arrayClass || _isProperty.call(value, "toJSON"))) {
												// Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
												// `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
												// ignores all `toJSON` methods on these objects unless they are
												// defined directly on an instance.
												value = value.toJSON(property);
											}
										}
										if (callback) {
											// If a replacement function was provided, call it to obtain the value
											// for serialization.
											value = callback.call(object, property, value);
										}
										if (value === null) {
											return "null";
										}
										className = getClass.call(value);
										if (className == booleanClass) {
											// Booleans are represented literally.
											return "" + value;
										} else if (className == numberClass) {
											// JSON numbers must be finite. `Infinity` and `NaN` are serialized as
											// `"null"`.
											return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
										} else if (className == stringClass) {
											// Strings are double-quoted and escaped.
											return quote("" + value);
										}
										// Recursively serialize objects and arrays.
										if ((typeof value === "undefined" ? "undefined" : _typeof(value)) == "object") {
											// Check for cyclic structures. This is a linear search; performance
											// is inversely proportional to the number of unique nested objects.
											for (length = stack.length; length--;) {
												if (stack[length] === value) {
													// Cyclic structures cannot be serialized by `JSON.stringify`.
													throw TypeError();
												}
											}
											// Add the object to the stack of traversed objects.
											stack.push(value);
											results = [];
											// Save the current indentation level and indent one additional level.
											prefix = indentation;
											indentation += whitespace;
											if (className == arrayClass) {
												// Recursively serialize array elements.
												for (index = 0, length = value.length; index < length; index++) {
													element = serialize(index, value, callback, properties, whitespace, indentation, stack);
													results.push(element === undef ? "null" : element);
												}
												result = results.length ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]";
											} else {
												// Recursively serialize object members. Members are selected from
												// either a user-specified list of property names, or the object
												// itself.
												_forEach(properties || value, function (property) {
													var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
													if (element !== undef) {
														// According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
														// is not the empty string, let `member` {quote(property) + ":"}
														// be the concatenation of `member` and the `space` character."
														// The "`space` character" refers to the literal space
														// character, not the `space` {width} argument provided to
														// `JSON.stringify`.
														results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
													}
												});
												result = results.length ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}";
											}
											// Remove the object from the traversed object stack.
											stack.pop();
											return result;
										}
									};

									// Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
									exports.stringify = function (source, filter, width) {
										var whitespace, callback, properties, className;
										if (objectTypes[typeof filter === "undefined" ? "undefined" : _typeof(filter)] && filter) {
											if ((className = getClass.call(filter)) == functionClass) {
												callback = filter;
											} else if (className == arrayClass) {
												// Convert the property names array into a makeshift set.
												properties = {};
												for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1)) {}
											}
										}
										if (width) {
											if ((className = getClass.call(width)) == numberClass) {
												// Convert the `width` to an integer and create a string containing
												// `width` number of space characters.
												if ((width -= width % 1) > 0) {
													for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ") {}
												}
											} else if (className == stringClass) {
												whitespace = width.length <= 10 ? width : width.slice(0, 10);
											}
										}
										// Opera <= 7.54u2 discards the values associated with empty string keys
										// (`""`) only if they are used directly within an object member list
										// (e.g., `!("" in { "": 1})`).
										return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
									};
								}

								// Public: Parses a JSON source string.
								if (!has("json-parse")) {
									var fromCharCode = String.fromCharCode;

									// Internal: A map of escaped control characters and their unescaped
									// equivalents.
									var Unescapes = {
										92: "\\",
										34: '"',
										47: "/",
										98: "\b",
										116: "\t",
										110: "\n",
										102: "\f",
										114: "\r"
									};

									// Internal: Stores the parser state.
									var Index, Source;

									// Internal: Resets the parser state and throws a `SyntaxError`.
									var abort = function abort() {
										Index = Source = null;
										throw SyntaxError();
									};

									// Internal: Returns the next token, or `"$"` if the parser has reached
									// the end of the source string. A token may be a string, number, `null`
									// literal, or Boolean literal.
									var lex = function lex() {
										var source = Source,
										    length = source.length,
										    value,
										    begin,
										    position,
										    isSigned,
										    charCode;
										while (Index < length) {
											charCode = source.charCodeAt(Index);
											switch (charCode) {
												case 9:case 10:case 13:case 32:
													// Skip whitespace tokens, including tabs, carriage returns, line
													// feeds, and space characters.
													Index++;
													break;
												case 123:case 125:case 91:case 93:case 58:case 44:
													// Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
													// the current position.
													value = charIndexBuggy ? source.charAt(Index) : source[Index];
													Index++;
													return value;
												case 34:
													// `"` delimits a JSON string; advance to the next character and
													// begin parsing the string. String tokens are prefixed with the
													// sentinel `@` character to distinguish them from punctuators and
													// end-of-string tokens.
													for (value = "@", Index++; Index < length;) {
														charCode = source.charCodeAt(Index);
														if (charCode < 32) {
															// Unescaped ASCII control characters (those with a code unit
															// less than the space character) are not permitted.
															abort();
														} else if (charCode == 92) {
															// A reverse solidus (`\`) marks the beginning of an escaped
															// control character (including `"`, `\`, and `/`) or Unicode
															// escape sequence.
															charCode = source.charCodeAt(++Index);
															switch (charCode) {
																case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:
																	// Revive escaped control characters.
																	value += Unescapes[charCode];
																	Index++;
																	break;
																case 117:
																	// `\u` marks the beginning of a Unicode escape sequence.
																	// Advance to the first character and validate the
																	// four-digit code point.
																	begin = ++Index;
																	for (position = Index + 4; Index < position; Index++) {
																		charCode = source.charCodeAt(Index);
																		// A valid sequence comprises four hexdigits (case-
																		// insensitive) that form a single hexadecimal value.
																		if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
																			// Invalid Unicode escape sequence.
																			abort();
																		}
																	}
																	// Revive the escaped character.
																	value += fromCharCode("0x" + source.slice(begin, Index));
																	break;
																default:
																	// Invalid escape sequence.
																	abort();
															}
														} else {
															if (charCode == 34) {
																// An unescaped double-quote character marks the end of the
																// string.
																break;
															}
															charCode = source.charCodeAt(Index);
															begin = Index;
															// Optimize for the common case where a string is valid.
															while (charCode >= 32 && charCode != 92 && charCode != 34) {
																charCode = source.charCodeAt(++Index);
															}
															// Append the string as-is.
															value += source.slice(begin, Index);
														}
													}
													if (source.charCodeAt(Index) == 34) {
														// Advance to the next character and return the revived string.
														Index++;
														return value;
													}
													// Unterminated string.
													abort();
												default:
													// Parse numbers and literals.
													begin = Index;
													// Advance past the negative sign, if one is specified.
													if (charCode == 45) {
														isSigned = true;
														charCode = source.charCodeAt(++Index);
													}
													// Parse an integer or floating-point value.
													if (charCode >= 48 && charCode <= 57) {
														// Leading zeroes are interpreted as octal literals.
														if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
															// Illegal octal literal.
															abort();
														}
														isSigned = false;
														// Parse the integer component.
														for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++) {}
														// Floats cannot contain a leading decimal point; however, this
														// case is already accounted for by the parser.
														if (source.charCodeAt(Index) == 46) {
															position = ++Index;
															// Parse the decimal component.
															for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}
															if (position == Index) {
																// Illegal trailing decimal.
																abort();
															}
															Index = position;
														}
														// Parse exponents. The `e` denoting the exponent is
														// case-insensitive.
														charCode = source.charCodeAt(Index);
														if (charCode == 101 || charCode == 69) {
															charCode = source.charCodeAt(++Index);
															// Skip past the sign following the exponent, if one is
															// specified.
															if (charCode == 43 || charCode == 45) {
																Index++;
															}
															// Parse the exponential component.
															for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}
															if (position == Index) {
																// Illegal empty exponent.
																abort();
															}
															Index = position;
														}
														// Coerce the parsed value to a JavaScript number.
														return +source.slice(begin, Index);
													}
													// A negative sign may only precede numbers.
													if (isSigned) {
														abort();
													}
													// `true`, `false`, and `null` literals.
													if (source.slice(Index, Index + 4) == "true") {
														Index += 4;
														return true;
													} else if (source.slice(Index, Index + 5) == "false") {
														Index += 5;
														return false;
													} else if (source.slice(Index, Index + 4) == "null") {
														Index += 4;
														return null;
													}
													// Unrecognized token.
													abort();
											}
										}
										// Return the sentinel `$` character if the parser has reached the end
										// of the source string.
										return "$";
									};

									// Internal: Parses a JSON `value` token.
									var get = function get(value) {
										var results, hasMembers;
										if (value == "$") {
											// Unexpected end of input.
											abort();
										}
										if (typeof value == "string") {
											if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
												// Remove the sentinel `@` character.
												return value.slice(1);
											}
											// Parse object and array literals.
											if (value == "[") {
												// Parses a JSON array, returning a new JavaScript array.
												results = [];
												for (;; hasMembers || (hasMembers = true)) {
													value = lex();
													// A closing square bracket marks the end of the array literal.
													if (value == "]") {
														break;
													}
													// If the array literal contains elements, the current token
													// should be a comma separating the previous element from the
													// next.
													if (hasMembers) {
														if (value == ",") {
															value = lex();
															if (value == "]") {
																// Unexpected trailing `,` in array literal.
																abort();
															}
														} else {
															// A `,` must separate each array element.
															abort();
														}
													}
													// Elisions and leading commas are not permitted.
													if (value == ",") {
														abort();
													}
													results.push(get(value));
												}
												return results;
											} else if (value == "{") {
												// Parses a JSON object, returning a new JavaScript object.
												results = {};
												for (;; hasMembers || (hasMembers = true)) {
													value = lex();
													// A closing curly brace marks the end of the object literal.
													if (value == "}") {
														break;
													}
													// If the object literal contains members, the current token
													// should be a comma separator.
													if (hasMembers) {
														if (value == ",") {
															value = lex();
															if (value == "}") {
																// Unexpected trailing `,` in object literal.
																abort();
															}
														} else {
															// A `,` must separate each object member.
															abort();
														}
													}
													// Leading commas are not permitted, object property names must be
													// double-quoted strings, and a `:` must separate each property
													// name and value.
													if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
														abort();
													}
													results[value.slice(1)] = get(lex());
												}
												return results;
											}
											// Unexpected token encountered.
											abort();
										}
										return value;
									};

									// Internal: Updates a traversed object member.
									var update = function update(source, property, callback) {
										var element = walk(source, property, callback);
										if (element === undef) {
											delete source[property];
										} else {
											source[property] = element;
										}
									};

									// Internal: Recursively traverses a parsed JSON object, invoking the
									// `callback` function for each value. This is an implementation of the
									// `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
									var walk = function walk(source, property, callback) {
										var value = source[property],
										    length;
										if ((typeof value === "undefined" ? "undefined" : _typeof(value)) == "object" && value) {
											// `forEach` can't be used to traverse an array in Opera <= 8.54
											// because its `Object#hasOwnProperty` implementation returns `false`
											// for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
											if (getClass.call(value) == arrayClass) {
												for (length = value.length; length--;) {
													update(value, length, callback);
												}
											} else {
												_forEach(value, function (property) {
													update(value, property, callback);
												});
											}
										}
										return callback.call(source, property, value);
									};

									// Public: `JSON.parse`. See ES 5.1 section 15.12.2.
									exports.parse = function (source, callback) {
										var result, value;
										Index = 0;
										Source = "" + source;
										result = get(lex());
										// If a JSON string contains multiple tokens, it is invalid.
										if (lex() != "$") {
											abort();
										}
										// Reset the parser state.
										Index = Source = null;
										return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
									};
								}
							}

							exports["runInContext"] = runInContext;
							return exports;
						}

						if (freeExports && !isLoader) {
							// Export for CommonJS environments.
							runInContext(root, freeExports);
						} else {
							// Export for web browsers and JavaScript engines.
							var nativeJSON = root.JSON,
							    previousJSON = root["JSON3"],
							    isRestored = false;

							var JSON3 = runInContext(root, root["JSON3"] = {
								// Public: Restores the original value of the global `JSON` object and
								// returns a reference to the `JSON3` object.
								"noConflict": function noConflict() {
									if (!isRestored) {
										isRestored = true;
										root.JSON = nativeJSON;
										root["JSON3"] = previousJSON;
										nativeJSON = previousJSON = null;
									}
									return JSON3;
								}
							});

							root.JSON = {
								"parse": JSON3.parse,
								"stringify": JSON3.stringify
							};
						}

						// Export for asynchronous module loaders.
						if (isLoader) {
							define(function () {
								return JSON3;
							});
						}
					}).call(this);
				}).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
			}, {}], 51: [function (_dereq_, module, exports) {
				module.exports = toArray;

				function toArray(list, index) {
					var array = [];

					index = index || 0;

					for (var i = index || 0; i < list.length; i++) {
						array[i - index] = list[i];
					}

					return array;
				}
			}, {}] }, {}, [31])(31);
	});
}

cc._RF.pop();
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"UserMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, '8313dGRC9FCDpoTe1spxGxf', 'UserMgr');
// scripts/lobby/UserMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var HttpClient_1 = require("./module/HttpClient");
var Utils_1 = require("./module/Utils");
var User_1 = require("./User");
var UserMgr = (function () {
    function UserMgr() {
        this.user = null;
        this.user = new User_1.default();
        //不是IOS或者Android
        if (cc.sys.os !== cc.sys.OS_IOS && cc.sys.os !== cc.sys.OS_ANDROID) {
            this.makeTestCase();
        }
    }
    UserMgr.getInstance = function () {
        if (null == this.instance)
            this.instance = new UserMgr();
        return this.instance;
    };
    /**
     * 测试
     */
    UserMgr.prototype.makeTestCase = function () {
        //MAC 模拟器
        if (cc.sys.isNative) {
            if (cc.sys.os === cc.sys.OS_OSX || cc.sys.os === cc.sys.OS_WINDOWS) {
                //用户1001
                this.user.uid = 1001;
                this.user.token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjEwMDEsImlzcyI6Imh0dHA6Ly9wb3J0YWwud29idTIuY29tL2FwaS91c2VyL2xvZ2luIiwiaWF0IjoxNDk3MzMzODczLCJleHAiOjE0OTk5MjU4NzMsIm5iZiI6MTQ5NzMzMzg3MywidG9rZW4iOiJ6d2tkNTIyanl5OTh2Y2MwZHIzczlvZW9uNjZ4aTR4NiJ9.oo994wucETJL619p9pq38Oct8xqEABtmGUCcSO8SPYM";
            }
        }
        //浏览器
        if (cc.sys.isBrowser) {
            //Google Chrome
            if (cc.sys.browserType === cc.sys.BROWSER_TYPE_CHROME) {
                //用户1001
                this.user.uid = 1001;
                this.user.token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjEwMDEsImlzcyI6Imh0dHA6Ly9wb3J0YWwud29idTIuY29tL2FwaS91c2VyL2xvZ2luIiwiaWF0IjoxNDk3MzMzODczLCJleHAiOjE0OTk5MjU4NzMsIm5iZiI6MTQ5NzMzMzg3MywidG9rZW4iOiJ6d2tkNTIyanl5OTh2Y2MwZHIzczlvZW9uNjZ4aTR4NiJ9.oo994wucETJL619p9pq38Oct8xqEABtmGUCcSO8SPYM";
            }
            else if (cc.sys.browserType === cc.sys.BROWSER_TYPE_SAFARI) {
                //用户1003
                this.user.uid = 1003;
                this.user.token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjEwMDMsImlzcyI6Imh0dHA6Ly9wb3J0YWwud29idTIuY29tL2FwaS91c2VyL2xvZ2luIiwiaWF0IjoxNDk3MzMzOTg2LCJleHAiOjE0OTk5MjU5ODYsIm5iZiI6MTQ5NzMzMzk4NiwidG9rZW4iOiJ6MXBseWE0MWRmaTN2a2d3dTlkaDBpejFjZXU1OHZ1MCJ9.BRrvxIklNyY7_77Gse42VCzS2s5JcfILRdx_8No2ZHM";
            }
            else if (cc.sys.browserType === cc.sys.BROWSER_TYPE_FIREFOX) {
                //用户1002
                this.user.uid = 1002;
                this.user.token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjEwMDIsImlzcyI6Imh0dHA6Ly9wb3J0YWwud29idTIuY29tL2FwaS91c2VyL2xvZ2luIiwiaWF0IjoxNDk3MzMzOTE2LCJleHAiOjE0OTk5MjU5MTYsIm5iZiI6MTQ5NzMzMzkxNiwidG9rZW4iOiJ1cTVjMTdqa2FxOTBpbmpzaXdxOTJhYTJmOHRubjB5ZyJ9.HDw6_yNQmElou_VxMd-ZTFCIQafcHK3m1OuUkrYQDSA";
            }
            this.webTestWithUrl();
        }
    };
    /**
     * WEB Test
     */
    UserMgr.prototype.webTestWithUrl = function () {
        var uid = Utils_1.default.getQueryString("uid");
        var token = Utils_1.default.getQueryString("token");
        var env = Utils_1.default.getQueryString("env");
        if (uid && uid.length > 0) {
            this.user.uid = parseInt(uid);
        }
        if (token && token.length > 0) {
            this.user.token = token;
        }
        if (env && env.length > 0) {
            if (env === "test") {
                cc.fy.configs.ServerUrl = "http://yj-test.wobu2.com/api";
            }
            else if (env === "dev") {
                cc.fy.configs.ServerUrl = "http://yj-dev.wobu2.com/api";
            }
        }
    };
    Object.defineProperty(UserMgr.prototype, "uid", {
        get: function () {
            return this.user.uid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get User
     */
    UserMgr.prototype.getUser = function () {
        return this.user;
    };
    /**
     * 是否登录
     */
    UserMgr.prototype.logined = function () {
        return this.user.isTokenLegal();
    };
    /**
     * 微信认证
     * @param callback
     */
    UserMgr.prototype.wxAuth = function (callback) {
        if (cc.sys.os == cc.sys.OS_IOS || cc.sys.os == cc.sys.OS_ANDROID) {
            console.log("微信登录2");
            cc.fy.wechat.onAuthHandler = function (errcode, code) {
                cc.fy.wechat.onAuthHandler = null;
                callback(errcode, code);
            };
            cc.fy.wechat.login();
        }
    };
    /**
     * 登录
     * @param code 微信code
     * @param callback callback
     */
    UserMgr.prototype.login = function (code, callback) {
        console.log("登录API");
        var self = this;
        HttpClient_1.HttpClient.post(cc.fy.configs.LoginSrvUrl, "/user/login", { code: code, os: cc.sys.os }, function (res) {
            if (res && res.status == 0) {
                var data = res;
                self.user.setToken(data.token);
                self.user.setUid(data.uid);
            }
            callback(res);
        });
    };
    /**
     * 获取用户信息
     * @param callback
     */
    UserMgr.prototype.getUserInfo = function (callback) {
        console.log("获取用户信息");
        var self = this;
        HttpClient_1.HttpClient.get(cc.fy.configs.ServerUrl, "/user/info", null, function (res) {
            if (res && res.status == 0) {
                var data = res.data;
                var userinfo = data.user_info;
                self.user.uid = userinfo.uid;
                self.user.avatar = userinfo.avatar;
                self.user.nickname = userinfo.nickname;
                self.user.vip_expire_at = userinfo.vip_expire_at;
                self.user.coin = userinfo.coin;
                self.user.gold = userinfo.gold;
                self.user.diamond = userinfo.diamond;
                self.user.room_id = userinfo.room_number;
                self.user.userID = userinfo.uid;
            }
            callback(res);
        }, this.makeToken());
    };
    /**
     * 是否在房间
     */
    UserMgr.prototype.isInRoom = function () {
        return this.user.room_id !== null && this.user.room_id !== undefined && this.user.room_id !== "";
    };
    /**
     * vip剩余时间
     */
    UserMgr.prototype.getVipTime = function () {
        var now = new Date().getTime();
        return "";
    };
    /**
     * 获取Token
     */
    UserMgr.prototype.makeToken = function () {
        return { Authorization: "Bearer " + this.user.getToken() };
    };
    /**
     * 更新用户
     * @param data
     * @param callback
     */
    UserMgr.prototype.updateUser = function (data, callback) {
        var self = this;
        var p = this.makeToken();
        p.user_info = data;
        HttpClient_1.HttpClient.post(cc.fy.configs.ServerUrl, "/user/info", p, function (res) {
            if (res && res.status == 0) {
                var data_1 = res.data;
                var userinfo = data_1.user_info;
                self.user.uid = userinfo.uid;
                self.user.avatar = userinfo.avatar;
                self.user.nickname = userinfo.nickname;
                self.user.vip_expire_at = userinfo.vip_expire_at;
                self.user.coin = userinfo.coin;
                self.user.gold = userinfo.gold;
                self.user.diamond = userinfo.diamond;
                self.user.room_id = userinfo.room_number;
                self.user.userID = userinfo.uid;
                callback(true);
            }
            else
                callback(false);
        }, this.makeToken());
    };
    /**
     * 创建房间
     * @param roomConf 房间配置
     * @param callback
     */
    UserMgr.prototype.createrRoom = function (roomConf, callback) {
        // let room_conf_json = JSON.stringify(roomConf);
        HttpClient_1.HttpClient.post(cc.fy.configs.ServerUrl, "/room/create", roomConf, callback, this.makeToken());
    };
    /**
     * 进入房间
     * @param roomId 房间ID
     * @param callback
     */
    UserMgr.prototype.enterRoom = function (roomId, callback) {
        var self = this;
        HttpClient_1.HttpClient.post(cc.fy.configs.ServerUrl, "/room/create", { room_id: roomId }, function (res) {
            if (res && res.status === 0) {
                var room_info = res.data;
                callback(room_info);
            }
            else
                callback(null);
        }, this.makeToken());
    };
    /**
     * 获取房间信息
     * @param roomId 房间ID
     * @param callback
     */
    UserMgr.prototype.getRoomInfo = function (roomId, callback) {
        if (!roomId)
            return;
        HttpClient_1.HttpClient.post(cc.fy.configs.ServerUrl, "/room/info", { room_number: roomId }, function (res) {
            if (res && res.status === 0) {
                callback(res);
            }
            else
                callback(null);
        }, this.makeToken());
    };
    return UserMgr;
}());
UserMgr.instance = null;
exports.default = UserMgr;

cc._RF.pop();
},{"./User":"User","./module/HttpClient":"HttpClient","./module/Utils":"Utils"}],"User":[function(require,module,exports){
"use strict";
cc._RF.push(module, '0b4f7Wph4BEz7my6jNKPVwN', 'User');
// scripts/lobby/User.ts

Object.defineProperty(exports, "__esModule", { value: true });
var User = (function () {
    function User() {
        this.uid = null;
        this.userID = null;
        this.token = null;
        this.avatar = null;
        this.nickname = "";
        this.vip_expire_at = -1;
        this.coin = 0;
        this.diamond = 0;
        this.gold = 0;
        this.room_id = null;
        this.token = cc.sys.localStorage.getItem("token");
        this.uid = cc.sys.localStorage.getItem("uid");
    }
    /**
     * Set Local Token
     * @param token
     */
    User.prototype.setToken = function (token) {
        this.token = token;
        cc.sys.localStorage.setItem("token", token);
    };
    User.prototype.setUid = function (uid) {
        this.uid = uid;
        cc.sys.localStorage.setItem("uid", uid);
    };
    /**
     * Get Local Token
     */
    User.prototype.getToken = function () {
        return this.token;
    };
    /**
     * 验证Token是否合法
     */
    User.prototype.isTokenLegal = function () {
        if (this.token !== null
            && this.token !== undefined
            && this.token !== "") {
            var arr = this.token.split('.');
            if (arr && arr.length === 3)
                return true;
        }
        return false;
    };
    /**
     * Get Room Id
     */
    User.prototype.getRoomId = function () {
        return this.room_id;
    };
    User.prototype.getGold = function () {
        return this.gold;
    };
    User.prototype.getDiamond = function () {
        return this.diamond;
    };
    User.prototype.getAvatarUrl = function () {
        return this.avatar;
    };
    User.prototype.getNick = function () {
        return this.nickname;
    };
    /**
     * 设置房间ID
     * @param roomId
     */
    User.prototype.setRoomId = function (roomId) {
        this.room_id = roomId;
    };
    /**
     * 是否是VIP
     */
    User.prototype.isVip = function () {
        var ret = false;
        do {
            if (typeof this.vip_expire_at === "number" && this.vip_expire_at !== null && this.vip_expire_at !== -1) {
                break;
            }
            var now = new Date().getTime();
            ret = now <= this.vip_expire_at;
        } while (false);
        return ret;
    };
    return User;
}());
exports.default = User;

cc._RF.pop();
},{}],"Utils":[function(require,module,exports){
"use strict";
cc._RF.push(module, '4b3fd2OqZxJ7KBuceGSKSr0', 'Utils');
// scripts/lobby/module/Utils.ts

Object.defineProperty(exports, "__esModule", { value: true });
function isNull(val) {
    return val === null || val === undefined;
}
exports.isNull = isNull;
function isNullStr(val) {
    return val === null || val === undefined || val === "";
}
exports.isNullStr = isNullStr;
var Utils = (function () {
    function Utils() {
    }
    Utils.addClickEvent = function (node, target, component, handler) {
        var eventHandler = new cc.Component.EventHandler();
        eventHandler.target = target;
        eventHandler.component = component;
        eventHandler.handler = handler;
        var clickEvents = node.getComponent(cc.Button).clickEvents;
        clickEvents.push(eventHandler);
    };
    Utils.addSlideEvent = function (node, target, component, handler) {
        var eventHandler = new cc.Component.EventHandler();
        eventHandler.target = target;
        eventHandler.component = component;
        eventHandler.handler = handler;
        var slideEvents = node.getComponent(cc.Slider).slideEvents;
        slideEvents.push(eventHandler);
    };
    /**
 * 获取浏览器参数
 * @param name
 */
    Utils.getQueryString = function (name) {
        var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');
        var r = window.location.search.substr(1).match(reg);
        if (r != null) {
            return r[2];
        }
        return null;
    };
    return Utils;
}());
exports.default = Utils;

cc._RF.pop();
},{}],"Validation":[function(require,module,exports){
"use strict";
cc._RF.push(module, '870c6TgUEpFSrPc0cGaqNaG', 'Validation');
// scripts/lobby/module/Validation.ts

var Validation;
(function (Validation) {
    var PhoneValidator = (function () {
        function PhoneValidator() {
        }
        PhoneValidator.prototype.verify = function (phone) {
            if (!(/^1[3|4|5|8][0-9]\d{4,8}$/.test(phone))) {
                return false;
            }
        };
        return PhoneValidator;
    }());
    Validation.PhoneValidator = PhoneValidator;
    var EmailValidator = (function () {
        function EmailValidator() {
        }
        EmailValidator.prototype.verify = function (val) {
            if (!(/^(\w-*\.*)+@(\w-?)+(\.\w{2,})+$/.test(val))) {
                return false;
            }
        };
        return EmailValidator;
    }());
    Validation.EmailValidator = EmailValidator;
})(Validation || (Validation = {}));

cc._RF.pop();
},{}],"Wechat":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'd9acaSCMrhO3ZbhMevfLRWw', 'Wechat');
// scripts/lobby/module/platform/Wechat.ts

Object.defineProperty(exports, "__esModule", { value: true });
var IOS_CLASS_PATH = "Api";
var ANDROID_CLASS_PATH = "com/yaoji/qp/Api";
var Wechat = (function () {
    function Wechat() {
        this.delegate = null;
        this.onAuthHandler = null;
        this.isCapturing = false;
    }
    /**
     * Login With Wechat
     */
    Wechat.prototype.login = function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            jsb.reflection.callStaticMethod(ANDROID_CLASS_PATH, "login", "()V");
        }
        else if (cc.sys.os == cc.sys.OS_IOS) {
            console.log("微信登录3");
            jsb.reflection.callStaticMethod(IOS_CLASS_PATH, "login");
        }
    };
    /**
     * Wechat Pay
     * @param json
     */
    Wechat.prototype.pay = function (json) {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            jsb.reflection.callStaticMethod(ANDROID_CLASS_PATH, "pay", "(Ljava/lang/String;)V", json);
        }
        else if (cc.sys.os == cc.sys.OS_IOS) {
            jsb.reflection.callStaticMethod(IOS_CLASS_PATH, "pay:", json);
        }
    };
    /**
     * Share
     * @param url
     * @param title
     * @param desc
     * @param scene
     */
    Wechat.prototype.share = function (url, title, desc, scene) {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            jsb.reflection.callStaticMethod(ANDROID_CLASS_PATH, "share", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", url, title, desc, scene);
        }
        else if (cc.sys.os == cc.sys.OS_IOS) {
            jsb.reflection.callStaticMethod(IOS_CLASS_PATH, "share:shareTitle:shareDesc:scene:", url, title, desc, scene);
        }
    };
    Wechat.captureScreenshot = function (filename) {
        if (cc.sys.isBrowser) {
            var canvas = document.getElementById("gameCanvas");
            var base64 = canvas.toDataURL("image/png");
            var href = base64.replace(/^data:image[^;]*/, "data:image/octet-stream");
            var aLink = document.createElement('a');
            aLink['download'] = filename;
            aLink.href = href;
            var evt = document.createEvent("HTMLEvents");
            evt.initEvent("click", false, false);
            aLink.dispatchEvent(evt);
        }
        else {
            var size = cc.view.getVisibleSize();
            var texture = new cc.RenderTexture(size.width, size.height);
            texture.begin();
            // cc.director.getScene().visit();
            texture.end();
            // texture.saveToFile(filename, cc.IMAGE_FORMAT_PNG);
        }
    };
    /**
     * Share Screen
     */
    Wechat.prototype.shareScreenShot = function () {
        do {
            if (this.isCapturing)
                break;
            this.isCapturing = true;
            var size = cc.director.getWinSize();
            var currentDate = new Date();
            var fileName = "result_share.jpg";
            var fullPath = jsb.fileUtils.getWritablePath() + fileName;
            //If Exist, Delete!
            if (jsb.fileUtils.isFileExist(fullPath)) {
                jsb.fileUtils.removeFile(fullPath);
            }
            var texture = new cc.RenderTexture(Math.floor(size.width), Math.floor(size.height));
            texture.setPosition(cc.p(size.width / 2, size.height / 2));
            texture.begin();
            // cc.director.getScene().visit();
            texture.end();
            texture.saveToFile(fileName, cc.IMAGE_FORMAT_JPG);
            var fileExist = jsb.fileUtils.isFileExist(fullPath);
            if (!texture || !fileExist)
                break;
            var height = 100;
            var scale = height / size.height;
            var width = Math.floor(size.width * scale);
            if (cc.sys.os == cc.sys.OS_ANDROID) {
                jsb.reflection.callStaticMethod(ANDROID_CLASS_PATH, "ShareIMG", "(Ljava/lang/String;II)V", fullPath, width, height);
            }
            else if (cc.sys.os == cc.sys.OS_IOS) {
                jsb.reflection.callStaticMethod(IOS_CLASS_PATH, "shareIMG:width:height:", fullPath, width, height);
            }
            else {
                console.log("platform:" + cc.sys.os + " dosn't implement share.");
            }
            this.isCapturing = false;
        } while (false);
    };
    /**
     * Native Call Back
     */
    Wechat.prototype.onLoginResp = function (errcode, code) {
        console.log("微信登录返回" + code);
        if (this.delegate) {
            this.delegate.onAuthResp(errcode, code);
        }
        if (this.onAuthHandler) {
            this.onAuthHandler(errcode, code);
        }
    };
    /**
     * Pay Call Back
     * @param errcode
     * @param key
     */
    Wechat.prototype.onPayResp = function (errcode, key) {
        if (this.delegate) {
            this.delegate.onPayResp(errcode, key);
        }
    };
    /**
     * Share Call Back
     * @param errcode
     */
    Wechat.prototype.onShareResp = function (errcode) {
        if (this.delegate) {
            this.delegate.onShareResp(errcode);
        }
    };
    return Wechat;
}());
exports.Wechat = Wechat;

cc._RF.pop();
},{}],"XZDDCardMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'ede347U/NRMoZVCvs7faiLp', 'XZDDCardMgr');
// scripts/games/xzdd/XZDDCardMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = 'hello';
        return _this;
    }
    NewClass.prototype.onLoad = function () {
        // init logic
    };
    return NewClass;
}(cc.Component));
__decorate([
    property(cc.Label)
], NewClass.prototype, "label", void 0);
__decorate([
    property({
        default: 'hello'
    })
], NewClass.prototype, "text", void 0);
NewClass = __decorate([
    ccclass
], NewClass);
exports.default = NewClass;

cc._RF.pop();
},{}],"XZDDCard":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'e87b0s25XJHc5CvH00Dj/ng', 'XZDDCard');
// scripts/games/xzdd/XZDDCard.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NewClass.prototype.onLoad = function () {
    };
    return NewClass;
}(cc.Component));
NewClass = __decorate([
    ccclass
], NewClass);
exports.default = NewClass;

cc._RF.pop();
},{}],"XZDDChat":[function(require,module,exports){
"use strict";
cc._RF.push(module, '64400Cy/WpNXIo8uvAYocpv', 'XZDDChat');
// scripts/games/xzdd/XZDDChat.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var XZDDChat = (function (_super) {
    __extends(XZDDChat, _super);
    function XZDDChat() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = 'hello';
        return _this;
    }
    XZDDChat.prototype.onLoad = function () {
        // init logic
    };
    return XZDDChat;
}(cc.Component));
__decorate([
    property(cc.Label)
], XZDDChat.prototype, "label", void 0);
__decorate([
    property({
        default: 'hello'
    })
], XZDDChat.prototype, "text", void 0);
XZDDChat = __decorate([
    ccclass
], XZDDChat);
exports.default = XZDDChat;

cc._RF.pop();
},{}],"XZDDGameDataMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'a60bbzccitIp6S61BLGbN1c', 'XZDDGameDataMgr');
// scripts/games/xzdd/XZDDGameDataMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = 'hello';
        return _this;
    }
    NewClass.prototype.onLoad = function () {
        // init logic
    };
    return NewClass;
}(cc.Component));
__decorate([
    property(cc.Label)
], NewClass.prototype, "label", void 0);
__decorate([
    property({
        default: 'hello'
    })
], NewClass.prototype, "text", void 0);
NewClass = __decorate([
    ccclass
], NewClass);
exports.default = NewClass;

cc._RF.pop();
},{}],"XZDDGameNetMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, '8090aOG06NFZ6lFQJmGjVlN', 'XZDDGameNetMgr');
// scripts/games/xzdd/XZDDGameNetMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = 'hello';
        return _this;
    }
    NewClass.prototype.onLoad = function () {
        // init logic
    };
    return NewClass;
}(cc.Component));
__decorate([
    property(cc.Label)
], NewClass.prototype, "label", void 0);
__decorate([
    property({
        default: 'hello'
    })
], NewClass.prototype, "text", void 0);
NewClass = __decorate([
    ccclass
], NewClass);
exports.default = NewClass;

cc._RF.pop();
},{}],"XZDDGameOver":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'a9f66aq93RLn4Y5NZC1sLJ/', 'XZDDGameOver');
// scripts/games/xzdd/XZDDGameOver.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = 'hello';
        return _this;
    }
    NewClass.prototype.onLoad = function () {
        // init logic
    };
    return NewClass;
}(cc.Component));
__decorate([
    property(cc.Label)
], NewClass.prototype, "label", void 0);
__decorate([
    property({
        default: 'hello'
    })
], NewClass.prototype, "text", void 0);
NewClass = __decorate([
    ccclass
], NewClass);
exports.default = NewClass;

cc._RF.pop();
},{}],"XZDDGameResult":[function(require,module,exports){
"use strict";
cc._RF.push(module, '3ce81aI0npDypo9TBKrolfa', 'XZDDGameResult');
// scripts/games/xzdd/XZDDGameResult.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = 'hello';
        return _this;
    }
    NewClass.prototype.onLoad = function () {
        // init logic
    };
    return NewClass;
}(cc.Component));
__decorate([
    property(cc.Label)
], NewClass.prototype, "label", void 0);
__decorate([
    property({
        default: 'hello'
    })
], NewClass.prototype, "text", void 0);
NewClass = __decorate([
    ccclass
], NewClass);
exports.default = NewClass;

cc._RF.pop();
},{}],"XZDDGameUI":[function(require,module,exports){
"use strict";
cc._RF.push(module, '7d49aXasQlFLJuphPQXQiMY', 'XZDDGameUI');
// scripts/games/xzdd/XZDDGameUI.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = 'hello';
        return _this;
    }
    NewClass.prototype.onLoad = function () {
        // init logic
    };
    return NewClass;
}(cc.Component));
__decorate([
    property(cc.Label)
], NewClass.prototype, "label", void 0);
__decorate([
    property({
        default: 'hello'
    })
], NewClass.prototype, "text", void 0);
NewClass = __decorate([
    ccclass
], NewClass);
exports.default = NewClass;

cc._RF.pop();
},{}],"XZDDGame":[function(require,module,exports){
"use strict";
cc._RF.push(module, '19d02mFprVKqoTixYJIR8nz', 'XZDDGame');
// scripts/games/xzdd/XZDDGame.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = 'hello';
        return _this;
    }
    NewClass.prototype.onLoad = function () {
        // init logic
    };
    return NewClass;
}(cc.Component));
__decorate([
    property(cc.Label)
], NewClass.prototype, "label", void 0);
__decorate([
    property({
        default: 'hello'
    })
], NewClass.prototype, "text", void 0);
NewClass = __decorate([
    ccclass
], NewClass);
exports.default = NewClass;

cc._RF.pop();
},{}],"XZDDLogic":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'e015ce9lK1D35ggfBP/3MJJ', 'XZDDLogic');
// scripts/games/xzdd/XZDDLogic.ts

Object.defineProperty(exports, "__esModule", { value: true });
var XXDDLogic = (function () {
    function XXDDLogic() {
        this.basicPoints = 1;
    }
    /******************************
    var this.result = {
        total: 5,
        TotalScore:0,
        detail:[{
            type:"平胡",
            val:1
        },{
            type:"清一色",
            val:2
        },{
            type:"杠",
            val:1,
            num:2
        }]
    }
    ******************************/
    //初始化对局
    XXDDLogic.prototype.init = function (point) {
        this.basicPoints = point;
        this.reset();
    }; //end func
    //计算最后得分
    XXDDLogic.prototype.count = function (data) {
        this.reset();
        if (this.judgeLegal(data.cards)) {
            this.Kong(data.cards);
            this.sameColor(data.cards);
            this.bigPair(data.cards, data.pak);
            this.generalPair(data.cards);
            this.Orphans(data.cards);
            this.countScore();
        }
        else {
            this.result = "这不是一副和牌的麻将！";
        }
        return this.result;
    }; //end func
    //计算总分
    XXDDLogic.prototype.countScore = function () {
        this.result.TotalScore = this.basicPoints * Math.pow(2, this.result.total);
    }; //end func
    //判断是否是幺九牌
    XXDDLogic.prototype.Orphans = function (data) {
        var pairA = 0; //123类型的牌
        var pairB = 0; //789类型的牌
        var pairC = 0; //11,99,111,999,1111,9999类型的牌
        var err = 0; //其他类型的牌
        for (var i = 0; i < data.length; i++) {
            pairA += this.judgeLetterNum(data[i], 123);
            pairB += this.judgeLetterNum(data[i], 789);
            if (this.judgeLetterNum(data[i], 1) >= 2)
                pairC++;
            if (this.judgeLetterNum(data[i], 9) >= 2)
                pairC++;
            for (var j = 4; j <= 6; j++) {
                if (this.judgeLetterNum(data[i], j) > 0)
                    err++;
            }
            ;
        }
        ;
        if (pairA + pairB + pairC >= 5 && err == 0) {
            this.result.total += 2;
            this.result.detail.push({
                type: "幺九",
                val: 2
            });
            for (var i = 0; i < this.result.detail.length; i++) {
                if (this.result.detail[i].type == "小七对") {
                    this.result.detail.splice(i, 1);
                    this.result.total -= 2;
                }
            }
            ;
        }
    }; //end func
    //判断是否是将对
    XXDDLogic.prototype.generalPair = function (data) {
        var bpair = 0;
        var pair = 0;
        for (var i = 0; i < data.length; i++) {
            var a = this.judgeLetterNum(data[i], 2);
            var b = this.judgeLetterNum(data[i], 5);
            var c = this.judgeLetterNum(data[i], 8);
            if (a >= 3)
                bpair++;
            if (b >= 3)
                bpair++;
            if (c >= 3)
                bpair++;
            if (a == 2)
                pair++;
            if (b == 2)
                pair++;
            if (c == 2)
                pair++;
        }
        ;
        if (bpair == 4 && pair == 1) {
            this.result.total += 3;
            this.result.detail.push({
                type: "将对",
                val: 3
            });
        }
    }; //end func
    //判断是否是大对子/小七对
    XXDDLogic.prototype.bigPair = function (data, pak) {
        var pair = 0; //小七对
        var bpair = 0; //大对子
        var str = "";
        for (var i = 0; i < data.length; i++) {
            str += data[i] + "";
            for (var j = 1; j <= 9; j++) {
                var x = this.judgeLetterNum(data[i], j);
                if (x == 2)
                    pair++;
                if (x > 2)
                    bpair++;
            }
            ;
        }
        ;
        if ((pair == 7 || pair == 5 || pair == 3) && pak == 0) {
            this.result.total += 2;
            this.result.detail.push({
                type: "小七对",
                val: 2
            });
        }
        if (bpair == 4 && pair == 1) {
            this.result.total += 1;
            this.result.detail.push({
                type: "大对子",
                val: 1
            });
        }
        if (pak == 4) {
            this.result.total += 2;
            this.result.detail.push({
                type: "金钩钩",
                val: 2
            });
        }
    }; //end func
    //判断是否是清一色
    XXDDLogic.prototype.sameColor = function (data) {
        if (data.length == 1) {
            this.result.total += 2;
            this.result.detail.push({
                type: "清一色",
                val: 2
            });
        }
    }; //end func
    //判断是否有杠
    XXDDLogic.prototype.Kong = function (data) {
        var kong = 0;
        var root = 0;
        var str = "";
        for (var i = 0; i < data.length; i++) {
            str += data[i] + "";
            for (var j = 1; j <= 9; j++) {
                if (this.judgeLetterNum(data[i], j) == 4)
                    root++;
            }
            ;
        }
        ;
        var x = str.length - 14;
        for (var i = 0; i < x; i++) {
            kong++;
            root--;
        }
        ;
        if (kong > 0) {
            this.result.total += kong;
            this.result.detail.push({
                type: "杠",
                val: 1,
                num: kong
            });
        }
        if (root > 0) {
            this.result.total += root;
            this.result.detail.push({
                type: "根",
                val: 1,
                num: root
            });
        }
    }; //end func
    //判断一副麻将牌是否合法
    XXDDLogic.prototype.judgeLegal = function (data) {
        var bool = true;
        var str = "";
        for (var i = 0; i < data.length; i++) {
            str += data[i] + "";
            for (var j = 1; j <= 9; j++) {
                if (this.judgeLetterNum(data[i], j) > 4)
                    bool = false;
            }
            ;
        }
        ;
        if (str.length < 14)
            bool = false;
        return bool;
    }; //end func
    //判断某个字母在字符串中的数量
    XXDDLogic.prototype.judgeLetterNum = function (str, l) {
        var item = str + "";
        l = l + "";
        var num = item.split(l).length - 1;
        return num;
    }; //end func
    //重置一次胡牌的计分
    XXDDLogic.prototype.reset = function () {
        this.result = {
            total: 0,
            TotalScore: 0,
            detail: []
        };
    }; //end func
    return XXDDLogic;
}());
exports.default = XXDDLogic;

cc._RF.pop();
},{}],"XZDDMJMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, '38a0aaIm+BIjInuwvdWbCwU', 'XZDDMJMgr');
// scripts/games/xzdd/XZDDMJMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = 'hello';
        return _this;
    }
    NewClass.prototype.onLoad = function () {
        // init logic
    };
    return NewClass;
}(cc.Component));
__decorate([
    property(cc.Label)
], NewClass.prototype, "label", void 0);
__decorate([
    property({
        default: 'hello'
    })
], NewClass.prototype, "text", void 0);
NewClass = __decorate([
    ccclass
], NewClass);
exports.default = NewClass;

cc._RF.pop();
},{}],"XZDDNetMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'c15b7r7RDZONrdhTobms83Q', 'XZDDNetMgr');
// scripts/games/xzdd/XZDDNetMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = 'hello';
        return _this;
    }
    NewClass.prototype.onLoad = function () {
        // init logic
    };
    return NewClass;
}(cc.Component));
__decorate([
    property(cc.Label)
], NewClass.prototype, "label", void 0);
__decorate([
    property({
        default: 'hello'
    })
], NewClass.prototype, "text", void 0);
NewClass = __decorate([
    ccclass
], NewClass);
exports.default = NewClass;

cc._RF.pop();
},{}],"XZDDPlayerMgr":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'bd47bsNf8BMe4BbUGv5WDdm', 'XZDDPlayerMgr');
// scripts/games/xzdd/XZDDPlayerMgr.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = 'hello';
        return _this;
    }
    NewClass.prototype.onLoad = function () {
        // init logic
    };
    return NewClass;
}(cc.Component));
__decorate([
    property(cc.Label)
], NewClass.prototype, "label", void 0);
__decorate([
    property({
        default: 'hello'
    })
], NewClass.prototype, "text", void 0);
NewClass = __decorate([
    ccclass
], NewClass);
exports.default = NewClass;

cc._RF.pop();
},{}],"XZDDPlayer":[function(require,module,exports){
"use strict";
cc._RF.push(module, '74ad9rp12hMi6nIJSFyWUAU', 'XZDDPlayer');
// scripts/games/xzdd/XZDDPlayer.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var NewClass = (function (_super) {
    __extends(NewClass, _super);
    function NewClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.text = 'hello';
        return _this;
    }
    NewClass.prototype.onLoad = function () {
        // init logic
    };
    return NewClass;
}(cc.Component));
__decorate([
    property(cc.Label)
], NewClass.prototype, "label", void 0);
__decorate([
    property({
        default: 'hello'
    })
], NewClass.prototype, "text", void 0);
NewClass = __decorate([
    ccclass
], NewClass);
exports.default = NewClass;

cc._RF.pop();
},{}],"achievementTemp":[function(require,module,exports){
"use strict";
cc._RF.push(module, '11a763PydtKppWMGwAMLgZ1', 'achievementTemp');
// scripts/lobby/components/achievementTemp.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var achievementTemp = (function (_super) {
    __extends(achievementTemp, _super);
    function achievementTemp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    achievementTemp.prototype.onLoad = function () {
        // init logic
    };
    achievementTemp.prototype.init = function (data) {
        this.time.string = data["time"] ? data["time"] : "";
        this.play.string = data["play"] ? data["play"] : "";
        this.result.string = data["result"] ? data["result"] : "";
        this.gold.string = data["gold"] ? data["gold"] : "";
    };
    return achievementTemp;
}(cc.Component));
__decorate([
    property(cc.Label)
], achievementTemp.prototype, "time", void 0);
__decorate([
    property(cc.Label)
], achievementTemp.prototype, "play", void 0);
__decorate([
    property(cc.Label)
], achievementTemp.prototype, "result", void 0);
__decorate([
    property(cc.Label)
], achievementTemp.prototype, "gold", void 0);
achievementTemp = __decorate([
    ccclass
], achievementTemp);
exports.default = achievementTemp;

cc._RF.pop();
},{}],"achievement":[function(require,module,exports){
"use strict";
cc._RF.push(module, '3ebc4ZoFr5F3Lf8fDQk94lK', 'achievement');
// scripts/lobby/components/achievement.ts

Object.defineProperty(exports, "__esModule", { value: true });
var HttpClient_1 = require("../module/HttpClient");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var achievement = (function (_super) {
    __extends(achievement, _super);
    function achievement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    achievement.prototype.onLoad = function () {
        // init logic
        console.log("achievement onload");
        this.token = cc.sys.localStorage.getItem("token");
        console.log("token", this.token);
    };
    achievement.prototype.onEnable = function () {
        console.log("on Enable");
        this.getAchievement();
    };
    achievement.prototype.makeToken = function () {
        return { Authorization: "Bearer " + this.token };
    };
    achievement.prototype.getAchievement = function () {
        var self = this;
        HttpClient_1.HttpClient.post(cc.fy.configs.ServerUrl, "/lobby/game_record_list", null, function (res) {
            if (res && res.status == 0) {
                self.setData(res.data);
            }
        }, this.makeToken());
    };
    achievement.prototype.setData = function (data) {
        var _this = this;
        console.log("res =>", data);
        this.itemList = data["game_record_list"] ? data["game_record_list"] : [];
        this.content.node.removeAllChildren();
        if (this.itemList.length) {
            this.itemList.map(function (item) {
                console.log("item", item);
                var achievementItem = cc.instantiate(_this.itemPrefab);
                _this.content.node.addChild(achievementItem);
                achievementItem.getComponent('achievementTemp').init({
                    time: item.start_at,
                    play: item.game,
                    result: (Number(item.win) === 1) ? "胜利" : "失败",
                    gold: item.record_id
                });
                console.log("aItem", achievementItem);
            });
        }
    };
    return achievement;
}(cc.Component));
__decorate([
    property(cc.Label)
], achievement.prototype, "label", void 0);
__decorate([
    property(cc.Prefab)
], achievement.prototype, "itemPrefab", void 0);
__decorate([
    property(cc.Layout)
], achievement.prototype, "content", void 0);
achievement = __decorate([
    ccclass
], achievement);
exports.default = achievement;

cc._RF.pop();
},{"../module/HttpClient":"HttpClient"}],"activityTitle":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'acddfJ9TPBHdpa8R9ik4pvs', 'activityTitle');
// scripts/lobby/components/activityTitle.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var activityTitle = (function (_super) {
    __extends(activityTitle, _super);
    function activityTitle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    activityTitle.prototype.onLoad = function () {
        // init logic
    };
    activityTitle.prototype.getContentUrl = function () {
        return this.contentUrl;
    };
    activityTitle.prototype.init = function (data) {
        this.title.string = data.title;
        this.contentUrl = data.content_url;
    };
    return activityTitle;
}(cc.Component));
__decorate([
    property(cc.Label)
], activityTitle.prototype, "title", void 0);
activityTitle = __decorate([
    ccclass
], activityTitle);
exports.default = activityTitle;

cc._RF.pop();
},{}],"activity":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'd5f057hmE1C64ayvrN2VtF8', 'activity');
// scripts/lobby/components/activity.ts

Object.defineProperty(exports, "__esModule", { value: true });
var HttpClient_1 = require("../module/HttpClient");
var Utils_1 = require("../module/Utils");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var activity = (function (_super) {
    __extends(activity, _super);
    function activity() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isFirst = false;
        return _this;
    }
    activity.prototype.onLoad = function () {
        // init logic
        console.log("achievement onload");
        var first_activity = this.node.getChildByName("bg").getChildByName("menu").children[0];
        console.log("first_game", first_activity);
        this.cp_gameItem = first_activity.getPosition();
        this.cp_select = this.selected.node.getPosition();
        this.token = cc.sys.localStorage.getItem("token");
        console.log("token", this.token);
        // 初始化活动栏目
        this.initActivity();
    };
    activity.prototype.btnKeySelectActivity = function (event) {
        console.log("cp_gameItem is defined");
        console.log(event);
        if (this.selected) {
            var temp_gameItem = event.target.getPosition();
            var temp_select = this.cp_select;
            temp_select.y += (temp_gameItem.y - this.cp_gameItem.y);
            this.selected.node.setPosition(temp_select);
            this.cp_gameItem = temp_gameItem;
            this.cp_select = temp_select;
        }
        var _content_url = event.target.getComponent("activityTitle").getContentUrl();
        console.log("activityTitle", _content_url);
        this.content.url = _content_url;
    };
    activity.prototype.makeToken = function () {
        return { Authorization: "Bearer " + this.token };
    };
    activity.prototype.initActivity = function () {
        var self = this;
        HttpClient_1.HttpClient.post(cc.fy.configs.ServerUrl, "/lobby/notice_list", null, function (res) {
            if (res && res.status == 0) {
                self.setData(res.data);
            }
        }, this.makeToken());
    };
    activity.prototype.setData = function (data) {
        var _this = this;
        console.log("data => ", data);
        var promise = new Promise(function (resolve, reject) {
            _this.itemList = data["notice_list"] ? data["notice_list"] : [];
            _this.menu.node.removeAllChildren();
            _this.itemList.map(function (item) {
                console.log("item=>", item);
                var activityTitle = cc.instantiate(_this.itemActivity);
                console.log("activityTitle", activityTitle);
                activityTitle.getComponent(cc.Toggle).toggleGroup = _this.menu.node
                    .getComponent(cc.ToggleGroup);
                _this.menu.node.addChild(activityTitle);
                activityTitle.getComponent("activityTitle").init({
                    title: item.title,
                    content_url: item.content_url
                });
                // (<any>activityTitle).toggleGroup = this.menuGroup.node;
            });
            resolve();
        });
        promise.then(function () {
            console.log("成功创建元素");
            _this.arr_activityItem = _this.menu.node.children;
            console.log("item =>", _this.arr_activityItem);
            console.log("menu=>", _this.menu);
            _this.arr_activityItem.map(function (item) {
                //  (<any>item.getComponent(cc.Toggle)).toggleGroup = this.menu.node
                //  .getComponent(cc.ToggleGroup);
                Utils_1.default.addClickEvent(item, _this.node, "activity", "btnKeySelectActivity");
            });
            console.log("isFirst", _this.isFirst);
            if (!_this.isFirst && _this.arr_activityItem.length > 0) {
                _this.arr_activityItem[0].getComponent(cc.Toggle).isChecked = true;
                _this.isFirst = true;
            }
        });
        console.log("menu=>", this.menu);
    };
    activity.prototype.onEnable = function () {
        //测试 数据
        // this.initActivity();
    };
    return activity;
}(cc.Component));
__decorate([
    property(cc.Layout)
], activity.prototype, "menu", void 0);
__decorate([
    property(cc.Sprite)
], activity.prototype, "selected", void 0);
__decorate([
    property(cc.WebView)
], activity.prototype, "content", void 0);
__decorate([
    property(cc.Prefab)
], activity.prototype, "itemActivity", void 0);
activity = __decorate([
    ccclass
], activity);
exports.default = activity;

cc._RF.pop();
},{"../module/HttpClient":"HttpClient","../module/Utils":"Utils"}],"lodash":[function(require,module,exports){
(function (global){
"use strict";
cc._RF.push(module, '6cf02EocMxHOYCknwMcjYRL', 'lodash');
// scripts/games/ddz/lodash.js

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function () {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.4';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = '[\'\u2019]',
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C', '\xe7': 'c',
    '\xd0': 'D', '\xf0': 'd',
    '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N', '\xf1': 'n',
    '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C', '\u0108': 'C', '\u010A': 'C', '\u010C': 'C',
    '\u0107': 'c', '\u0109': 'c', '\u010B': 'c', '\u010D': 'c',
    '\u010E': 'D', '\u0110': 'D', '\u010F': 'd', '\u0111': 'd',
    '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011A': 'E',
    '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011B': 'e',
    '\u011C': 'G', '\u011E': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011D': 'g', '\u011F': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I', '\u012A': 'I', '\u012C': 'I', '\u012E': 'I', '\u0130': 'I',
    '\u0129': 'i', '\u012B': 'i', '\u012D': 'i', '\u012F': 'i', '\u0131': 'i',
    '\u0134': 'J', '\u0135': 'j',
    '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L', '\u013B': 'L', '\u013D': 'L', '\u013F': 'L', '\u0141': 'L',
    '\u013A': 'l', '\u013C': 'l', '\u013E': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014A': 'N',
    '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014B': 'n',
    '\u014C': 'O', '\u014E': 'O', '\u0150': 'O',
    '\u014D': 'o', '\u014F': 'o', '\u0151': 'o',
    '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
    '\u015A': 'S', '\u015C': 'S', '\u015E': 'S', '\u0160': 'S',
    '\u015B': 's', '\u015D': 's', '\u015F': 's', '\u0161': 's',
    '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't', '\u0165': 't', '\u0167': 't',
    '\u0168': 'U', '\u016A': 'U', '\u016C': 'U', '\u016E': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u', '\u016B': 'u', '\u016D': 'u', '\u016F': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W', '\u0175': 'w',
    '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z', '\u017B': 'Z', '\u017D': 'Z',
    '\u017A': 'z', '\u017C': 'z', '\u017E': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017F': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && (typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = function () {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function (value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? baseSum(array, iteratee) / length : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function (key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function (value, index, collection) {
      accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : result + current;
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function (key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function (key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function (value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = function () {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? 'Symbol(src)_1.' + uid : '';
    }();

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        _Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined,
        symIterator = _Symbol ? _Symbol.iterator : undefined,
        symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

    var defineProperty = function () {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }();

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap();

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = _Symbol ? _Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = function () {
      function object() {}
      return function (proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = undefined;
        return result;
      };
    }();

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {}
    // No operation performed.


    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : start - 1,
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || !isRight && arrLength == length && takeCount == length) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer: while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash(),
        'map': new (Map || ListCache)(),
        'string': new Hash()
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
        // Safari 9 has enumerable `arguments.length` in strict mode.
        key == 'length' ||
        // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == 'offset' || key == 'parent') ||
        // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
        // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function (value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function (subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function (object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if (value === undefined && !(key in object) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function () {
        func.apply(undefined, args);
      }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        } else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function (value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end === undefined || end > length ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function (value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function (key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer: while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = comparator || value !== 0 ? value : 0;
        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function (value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object') {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function (value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function (object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function (object) {
        var objValue = get(object, path);
        return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function (srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack());
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function (value, key, collection) {
        var criteria = arrayMap(iteratees, function (iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function (object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function (value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function (object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function (func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function (func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function (value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = low + high >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? computed <= value : computed < value;
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = value + '';
      return result == '0' && 1 / value == -INFINITY ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        } else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

      return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function (result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return !start && end >= length ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function (id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor());
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor());
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
          return 1;
        }
        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function (collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function (object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function (collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function (object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function (string) {
        string = toString(string);

        var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;

        var chr = strSymbols ? strSymbols[0] : string.charAt(0);

        var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function (string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function () {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0:
            return new Ctor();
          case 1:
            return new Ctor(args[0]);
          case 2:
            return new Ctor(args[0], args[1]);
          case 3:
            return new Ctor(args[0], args[1], args[2]);
          case 4:
            return new Ctor(args[0], args[1], args[2], args[3]);
          case 5:
            return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
        }
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function (collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function predicate(key) {
            return iteratee(iterable[key], key, iterable);
          };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function (funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function () {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function (object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function (value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function (iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function (args) {
          var thisArg = this;
          return arrayFunc(iteratees, function (iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = this && this !== root && this instanceof wrapper ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function (start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function (value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function (number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function (object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function (othValue, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == other + '';

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function (func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = func.name + '',
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function (symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function getTag(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':
            start += size;break;
          case 'dropRight':
            end -= size;break;
          case 'take':
            end = nativeMin(end, start + size);break;
          case 'takeRight':
            start = nativeMax(start, end - size);break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag:case float64Tag:
        case int8Tag:case int16Tag:case int32Tag:
        case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index === 'undefined' ? 'undefined' : _typeof(index);
      if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
      if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
      return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function (object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function (key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? func.length - 1 : start, 0);
      return function () {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function (func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = reference + '';
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function () {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function (string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function (match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = value + '';
      return result == '0' && 1 / value == -INFINITY ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return func + '';
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function (pair) {
        var value = '_.' + pair[0];
        if (bitmask & pair[1] && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__ = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, index += size);
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function (array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function (array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function (array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return array && array.length ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function (arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function (arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function (arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return array && array.length ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return array && array.length && values && values.length ? basePullAll(array, values) : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function (array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function (index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      } else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return array && array.length ? baseSortedUniq(array) : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function (arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function (arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function (arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return array && array.length ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return array && array.length ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function (group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function (index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function (group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function (array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, values) : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function (arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function (arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function (arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function (arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function (paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function interceptor(object) {
        return baseAt(object, paths);
      };

      if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function (array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function (result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function (result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function (collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function (value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function (result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function (result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function () {
      return [[], []];
    });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function (collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function () {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function () {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = func && n == null ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function () {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function (func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function (object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function (func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function (func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function memoized() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function () {
        var args = arguments;
        switch (args.length) {
          case 0:
            return !predicate.call(this);
          case 1:
            return !predicate.call(this, args[0]);
          case 2:
            return !predicate.call(this, args[0], args[1]);
          case 3:
            return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function (func, transforms) {
      transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function (args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function (func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function (func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function (func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function (args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function (value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function () {
      return arguments;
    }()) ? baseIsArguments : function (value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function (value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? remainder ? result - remainder : result : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? other + '' : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function (object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function (object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function (args) {
      args.push(undefined, customDefaultsAssignIn);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function (args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function (result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function (result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function (value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function (value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function (object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function (object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function (path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function (object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function (prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function (value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor() : [];
        } else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        } else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        } else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      } else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function (result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined ? length : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function (result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function (result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';

      string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';

      var result = attempt(function () {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += result.length - end;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while (match = separator.exec(substring)) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function (func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function (object, methodNames) {
      arrayEach(methodNames, function (key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function (pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function (args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function () {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return value == null || value !== value ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function (path, args) {
      return function (object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function (object, args) {
      return function (path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function (methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function () {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {}
    // No operation performed.


    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function (args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function (path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function (augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function (dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function (multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function (minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return array && array.length ? baseSum(array, identity) : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, function () {
      var source = {};
      baseForOwn(lodash, function (func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }(), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function (methodName, index) {
      LazyWrapper.prototype[methodName] = function (n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function (n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function (iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function (methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function () {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function (methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function () {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function () {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function (predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function (predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function (value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function (predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function (start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function (predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function () {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function () {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function interceptor(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return isTaker && chainAll ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function () {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function (value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '',
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  };

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && _typeof(define.amd) == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
      // Export for Node.js.
      (freeModule.exports = _)._ = _;
      // Export for CommonJS support.
      freeExports._ = _;
    } else {
      // Export to the global object.
      root._ = _;
    }
}).call(undefined);

cc._RF.pop();
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"recharge":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'aaee6lFVstDx5F4C0qEuJH7', 'recharge');
// scripts/lobby/components/recharge.ts

Object.defineProperty(exports, "__esModule", { value: true });
var HttpClient_1 = require("../module/HttpClient");
var UserMgr_1 = require("../UserMgr");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var iconData = cc.Class({
    name: 'iconData',
    properties: {
        id: 0,
        count: '',
        itemPrice: 0,
        iconSF: cc.SpriteFrame
    }
});
var recharge = (function (_super) {
    __extends(recharge, _super);
    function recharge() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.items = [];
        // type 显示的商品类型 金币 1 钻石 2 ...
        _this.type = 1;
        return _this;
    }
    recharge.prototype.onLoad = function () {
        // init logic
        this.token = cc.sys.localStorage.getItem("token");
        this._diamond = this.top.getChildByName("diamond_bg").getChildByName("diamond").getComponent(cc.Label);
        console.log(this._diamond);
        this.initTop();
    };
    recharge.prototype.initTop = function () {
        var user = UserMgr_1.default.getInstance().getUser();
        console.log("user=>", user);
        this._diamond.string = '' + user.diamond;
    };
    recharge.prototype.makeToken = function () {
        return { Authorization: "Bearer " + this.token };
    };
    recharge.prototype.getProductList = function () {
        var self = this;
        HttpClient_1.HttpClient.post(cc.fy.configs.ServerUrl, "/lobby/product_list", null, function (res) {
            if (res && res.status == 0) {
                self.setData(res.data);
            }
        }, this.makeToken());
    };
    recharge.prototype.onEnable = function () {
        console.log("recharge is onEnable");
        console.log("token", this.token);
        this.getProductList();
    };
    recharge.prototype.setData = function (data) {
        var _this = this;
        console.log("data", data);
        var count = 0;
        this.itemList = data["product_list"] ? data["product_list"] : data;
        this.content.node.removeAllChildren();
        this.itemList.map(function (item) {
            console.log("item", item);
            if (item.type == _this.type) {
                var shopItem = cc.instantiate(_this.shopItem);
                _this.content.node.addChild(shopItem);
                shopItem.getComponent("shopItem").init({
                    title: item.title,
                    price: item.price,
                    iconF: _this.items[count < 7 ? count : 6]["iconSF"]
                });
                count++;
            }
        });
    };
    recharge.prototype.onKeyClick = function (event) {
        var name = event.target.name;
        if (name === "btn_back") {
            this.node.active = false;
        }
    };
    recharge.prototype.changeType = function (event) {
        console.log(event);
        // let name = event.node.name;
        // console.log("name", name);
        switch (event.node.name) {
            case "btn_gold":
                console.log("btn_gold");
                this.type = 1;
                this.setData(this.itemList);
                break;
            case "btn_diamond":
                console.log("btn_diamond");
                this.type = 2;
                this.setData(this.itemList);
                break;
        }
    };
    return recharge;
}(cc.Component));
__decorate([
    property(cc.Prefab)
], recharge.prototype, "shopItem", void 0);
__decorate([
    property(cc.Layout)
], recharge.prototype, "content", void 0);
__decorate([
    property(cc.Node)
], recharge.prototype, "top", void 0);
__decorate([
    property(iconData)
], recharge.prototype, "items", void 0);
recharge = __decorate([
    ccclass
], recharge);
exports.default = recharge;

cc._RF.pop();
},{"../UserMgr":"UserMgr","../module/HttpClient":"HttpClient"}],"shopItem":[function(require,module,exports){
"use strict";
cc._RF.push(module, 'dd51boTDqVIjJUNcYl20Qft', 'shopItem');
// scripts/lobby/components/shopItem.ts

Object.defineProperty(exports, "__esModule", { value: true });
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var shopItem = (function (_super) {
    __extends(shopItem, _super);
    function shopItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    shopItem.prototype.onLoad = function () {
        // init logic
    };
    shopItem.prototype.init = function (data) {
        this.title.string = data.title;
        this.price.string = data.price;
        this.icon.spriteFrame = data.iconF;
    };
    return shopItem;
}(cc.Component));
__decorate([
    property(cc.Sprite)
], shopItem.prototype, "icon", void 0);
__decorate([
    property(cc.Label)
], shopItem.prototype, "title", void 0);
__decorate([
    property(cc.Label)
], shopItem.prototype, "price", void 0);
shopItem = __decorate([
    ccclass
], shopItem);
exports.default = shopItem;

cc._RF.pop();
},{}],"userInfo":[function(require,module,exports){
"use strict";
cc._RF.push(module, '661f9G5dZBExJGglVMmW7IJ', 'userInfo');
// scripts/lobby/components/userInfo.ts

Object.defineProperty(exports, "__esModule", { value: true });
var UserMgr_1 = require("../UserMgr");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var userInfo = (function (_super) {
    __extends(userInfo, _super);
    function userInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    userInfo.prototype.onLoad = function () {
        // init logic
        console.log("node", this.node);
        this.vip_flag = this.node.getChildByName("bg").getChildByName("info").getChildByName("nick").getChildByName("vip");
    };
    userInfo.prototype.onEnable = function () {
        var user = UserMgr_1.default.getInstance().getUser();
        console.log("user=>", user);
        this.nick_name.string = user.getNick();
        this.uid.string = String(user.userID);
        this.vip_time.string = user.vip_expire_at ? user.vip_expire_at + "天" : "无";
        this.vip_flag.active = user.isVip();
    };
    return userInfo;
}(cc.Component));
__decorate([
    property(cc.Label)
], userInfo.prototype, "nick_name", void 0);
__decorate([
    property(cc.Label)
], userInfo.prototype, "uid", void 0);
__decorate([
    property(cc.Label)
], userInfo.prototype, "vip_time", void 0);
userInfo = __decorate([
    ccclass
], userInfo);
exports.default = userInfo;

cc._RF.pop();
},{"../UserMgr":"UserMgr"}]},{},["DDZApizInterface.d","DDZAssetsMgr","DDZAudioMgr","DDZCard","DDZCardMgr","DDZCardNode","DDZCardPanel","DDZChat","DDZCmdDef","DDZDebugNode","DDZDissolve","DDZGame","DDZGameAnimator","DDZGameDataMgr","DDZGameNetMgr","DDZGameOver","DDZGameResult","DDZGameUI","DDZGameUIBinder","DDZLogic","DDZNetInterface","DDZPlayerFSM","DDZPlayers","DDZPlayersMgr","DDZPlayersUIBinder","DDZReplayMgr","DDZRoomInfo","DDZRule","DDZSeat","DDZTypes","DDZUserInfoUI","DDZVideoChat","lodash","XZDDCard","XZDDCardMgr","XZDDChat","XZDDGame","XZDDGameDataMgr","XZDDGameNetMgr","XZDDGameOver","XZDDGameResult","XZDDGameUI","XZDDLogic","XZDDMJMgr","XZDDNetMgr","XZDDPlayer","XZDDPlayerMgr","Adapter","Configs","DataMgr","Fy.d","GameMgr","Initiator","User","UserMgr","Alert","AnimationShow","CancelButton","CheckIn","Checkbox","CreatRoom","EnterRoom","Hud","ImgLoader","InitializeApp","Loading","Lobby","Prompt","Setting","achievement","achievementTemp","activity","activityTitle","recharge","shopItem","userInfo","AudioMgr","Deserialize","HashMap","HotUpdate","HttpClient","Net","Socket-io","Utils","Validation","Agora","CrossApi","CrossPlatform","Native","Wechat","Iap"])

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbXSwic291cmNlUm9vdCI6IiJ9